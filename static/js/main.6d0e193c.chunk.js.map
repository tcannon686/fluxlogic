{"version":3,"sources":["assets/and-gate.svg","assets/or-gate.svg","assets/led.svg","assets/buffer-gate.svg","assets/switch-off.svg","assets/xor-gate.svg","assets/one-gate.svg","assets/zero-gate.svg","assets/pin-inverted.svg","assets/open-pin.svg","assets/open-pin-inverted.svg","assets/pin.svg","assets/led-glow.svg","assets/switch-on.svg","sim.worker.js","logic.js","Wire.js","hooks.js","LogicGate.js","Circuit.js","SelectionBox.js","Page.js","Palette.js","themes.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["module","exports","addMethods","methods","w","Worker","name","nextOutputFunctions","and","gate","state","getInputs","every","x","or","some","xor","filter","length","constant","value","led","buffer","switch","Boolean","getUserInput","pin","id","nextId","connections","nextState","circuit","prevState","outputs","inputs","gates","nextOutputs","type","i","isInverted","Object","assign","map","currentId","Number","MAX_SAFE_INTEGER","getValidPins","fromEntries","reduce","t","concat","getOutputs","setUserInput","fastForward","n","renumber","clone","maxId","calcNewId","updateId","object","r","connect","a","b","push","andGate","seal","orGate","xorGate","constantGate","switchGate","removeInvalidConnections","validPins","gateClone","updatePin","Wire","props","x0","y0","x1","y1","curve","Math","min","abs","padding","l","c0","c1","width","height","d","viewBox","style","position","left","top","pointerEvents","stroke","strokeWidth","fill","useRefCallback","callback","ref","useRef","memoizedCallback","useCallback","current","useEffect","useStyles","makeStyles","theme","selectedGate","background","fade","palette","primary","main","borderRadius","cursor","editableGate","editablePin","margin","LogicGate","React","memo","classes","y","getWidth","getHeight","pinPositions","getPinPositions","isSelected","selected","Pin","pinProps","alt","src","getPinSvg","onMouseDown","e","onPinMouseDown","isOutput","onMouseUp","onPinMouseUp","className","editable","key","svg","onClick","onGateClick","onGateMouseDown","Circuit","isEditable","page","useMemo","undefined","selection","moveAmount","simState","positions","forEach","getGateSvg","selectionBox","SelectionBox","useState","selectionStart","selectionEnd","setSelectionEnd","onSelectionChanged","onMouseMove","end","clientX","clientY","max","document","addEventListener","removeEventListener","PreviewWire","setEnd","clientToPage","isOutputPin","Page","forwardRef","onCircuitChanged","onUserInputChanged","setSelectionStart","toBeAddedToSelection","setToBeAddedToSelection","isDragging","setIsDragging","didDrag","setDidDrag","moveStart","setMoveStart","moveEnd","setMoveEnd","wireStartPin","setWireStartPin","wireStartPinIsOutput","setWireStartPinIsOutput","coord","bounds","getBoundingClientRect","button","newSelection","shiftKey","stopPropagation","logic","preventDefault","onMove","addWire","from","to","shouldUpdate","hasPin","inIndex","indexOf","outIndex","findIndex","output","totalSelection","window","Paper","elevation","square","ul","br","isOverlapping","PaletteItem","Grid","item","xs","title","text","Button","overflow","inverted","PinInvertedSvg","Palette","invert","container","AndGateSvg","onSelect","OrGateSvg","XorGateSvg","ZeroGateSvg","OneGateSvg","BufferGateSvg","LedSvg","SwitchOffSvg","defaultThemeSvgs","LedGlowSvg","SwitchOnSvg","defaultTheme","OpenPinInvertedSvg","OpenPinSvg","PinSvg","ret","index","root","display","appBar","zIndex","drawer","menuButton","marginRight","spacing","menuButtonGroup","hide","flexShrink","drawerContent","content","flexGrow","PageChanger","anchorEl","setAnchorEl","onClose","menuItems","MenuItem","onChangedPage","pageCount","Tooltip","aria-controls","aria-haspopup","aria-label","color","currentTarget","Menu","keepMounted","open","App","present","setPresent","past","setPast","future","setFuture","canUndo","canRedo","splice","slice","useUndoable","setCircuit","undo","redo","setSelection","setSimState","isPlaying","setIsPlaying","copiedGates","setCopiedGates","contextMenuPos","setContextMenuPos","currentPage","setCurrentPage","setPageCount","simWorker","SimWorker","openUploadError","setOpenUploadError","appBarRef","createRef","pageRef","closeContextMenu","shouldLoop","loop","getState","then","onContextMenu","event","CssBaseline","Drawer","variant","Toolbar","factory","appBarRect","pageRect","innerHeight","AppBar","Typography","ButtonGroup","Promise","resolve","reject","element","createElement","setAttribute","body","appendChild","this","files","JSON","parse","data","catch","error","click","removeChild","maxPage","console","filename","encodeURIComponent","stringify","download","version","packageJson","stopSimulation","startSimulation","Container","Snackbar","autoHideDuration","message","anchorReference","anchorPosition","location","hostname","match","ReactDOM","render","StrictMode","rel","href","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d0e193c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/and-gate.b39df76c.svg\";","module.exports = __webpack_public_path__ + \"static/media/or-gate.ce29e395.svg\";","module.exports = __webpack_public_path__ + \"static/media/led.788936c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/buffer-gate.96d07f6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-off.b1ab986c.svg\";","module.exports = __webpack_public_path__ + \"static/media/xor-gate.12bb51fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/one-gate.ac34b99c.svg\";","module.exports = __webpack_public_path__ + \"static/media/zero-gate.d126f49d.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-inverted.25b87449.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin.402b8aa6.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin-inverted.fb8a5ebb.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.4c8eaca6.svg\";","module.exports = __webpack_public_path__ + \"static/media/led-glow.ff1875d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-on.37d11db0.svg\";","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"startSimulation\",\"getState\",\"stopSimulation\",\"setUserInput\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"1995daae4a069d13b604.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","/*\n * An object mapping gate types to functions.\n */\nconst nextOutputFunctions = {\n  and: (gate, state) => [getInputs(gate, state).every((x) => x)],\n  or: (gate, state) => [getInputs(gate, state).some((x) => x)],\n  xor: (gate, state) => [\n    getInputs(gate, state).filter((x) => x).length % 2 !== 0\n  ],\n  constant: (gate, state) => [gate.value],\n  led: (gate, state) => [],\n  buffer: (gate, state) => getInputs(gate, state),\n  switch: (gate, state) => [Boolean(getUserInput(gate, state))]\n}\n\n/** Connect to logic pins by a wire. */\nfunction connect (a, b) {\n  a.connections.push(b.id)\n  b.connections.push(a.id)\n}\n\n/**\n * Creates a circuit with the given gates.\n */\nfunction circuit (gates) {\n  return {\n    gates\n  }\n}\n\n/**\n * Creates a logic pin. A pin may be inverted by setting its isInverted field.\n */\nfunction pin () {\n  return {\n    id: nextId(),\n    connections: []\n  }\n}\n\n/** Creates an and gate. */\nfunction andGate () {\n  return {\n    id: nextId(),\n    type: 'and',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an or gate. */\nfunction orGate () {\n  return {\n    id: nextId(),\n    type: 'or',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an xor gate. */\nfunction xorGate () {\n  return {\n    id: nextId(),\n    type: 'xor',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates a constant gate (for simulating ground or 1). */\nfunction constantGate (value) {\n  return {\n    id: nextId(),\n    type: 'constant',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()]),\n    value: value || false\n  }\n}\n\n/** Creates a switch gate that the user can interact with. */\nfunction switchGate () {\n  return {\n    id: nextId(),\n    type: 'switch',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an LED. */\nfunction led () {\n  return {\n    id: nextId(),\n    type: 'led',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/** Creates a buffer (a gate that simply passes its input to its output). */\nfunction buffer () {\n  return {\n    id: nextId(),\n    type: 'buffer',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Computes a state object to represent the current state of the simulation for\n * the given circuit. If prevState is passed, returns the next state after the\n * given state.\n *\n * The state object is an object containing an outputs field, which is an object\n * that maps each pin ID to a boolean value. For example, if a pin with ID 2 has\n * an output of true, the state object would look something like this:\n * { outputs: { 2: true } }\n *\n * To calculate the inputs and outputs of individual gates, the getInputs and\n * getOutputs helper functions can be used.\n *\n * The input from the user (for example, whether a switch is switched or not) is\n * stored in the inputs field, that maps a gate ID to a user input object. The\n * format of the input depends on the gate itself.\n */\nfunction nextState (circuit, prevState) {\n  const state = { outputs: {}, inputs: {} }\n\n  if (prevState) {\n    for (const gate of circuit.gates) {\n      /* Calculate the next output. */\n      const nextOutputs = nextOutputFunctions[gate.type](gate, prevState)\n\n      for (let i = 0; i < nextOutputs.length; i++) {\n        state.outputs[gate.outputs[i].id] = (\n          nextOutputs[i] ^ gate.outputs[i].isInverted) === 1\n      }\n    }\n\n    Object.assign(state.inputs, prevState.inputs)\n  } else {\n    /* Initialize all outputs to false. */\n    for (const gate of circuit.gates) {\n      for (const pin of gate.outputs) {\n        state.outputs[pin.id] = false\n      }\n    }\n  }\n\n  return state\n}\n\n/**\n * Returns a list of input booleans for the gate given the current simulation\n * state.\n */\nfunction getInputs (gate, state) {\n  return gate.inputs\n    .map((pin) => (state.outputs[pin.connections[0]] ^ pin.isInverted) === 1)\n}\n\n/**\n * Returns a list of output booleans for the gate given the current simulation\n * state.\n */\nfunction getOutputs (gate, state) {\n  return gate.outputs.map((pin) => state.outputs[pin.id])\n}\n\n/**\n * Returns the user input for the gate given the current simulation state.\n */\nfunction getUserInput (gate, state) {\n  return state.inputs[gate.id]\n}\n\n/**\n * Sets the user input for the gate for the current simulation state.\n */\nfunction setUserInput (gate, state, value) {\n  state.inputs[gate.id] = value\n}\n\n/**\n * Skip forward n simulation states given a circuit, n, and the (optional)\n * current state. This function simply calls nextState(circuit, state) n times.\n */\nfunction fastForward (circuit, n, state) {\n  for (let i = 0; i < n; i++) {\n    state = nextState(circuit, state)\n  }\n  return state\n}\n\n/*\n * Function to return a unique id. This should only be used within this JS file.\n * The ID wraps around to 0 once Number.MAX_SAFE_INTEGER is reached. This is\n * assumed to be okay since Number.MAX_SAFE_INTEGER is so large.\n */\nlet currentId = 0\nfunction nextId () {\n  if (currentId >= Number.MAX_SAFE_INTEGER) {\n    currentId = 0\n  }\n\n  return currentId++\n}\n\n/*\n * This function renumbers the IDs of the given circuit so that there are no\n * collisions. This should be called any time a circuit is loaded to avoid\n * collisions. It returns the circuit.\n */\nfunction renumber (circuit) {\n  const clone = { ...circuit }\n  let maxId = currentId\n\n  const calcNewId = (id) => currentId < (Number.MAX_SAFE_INTEGER - id)\n    ? id + currentId\n    : (id - Number.MAX_SAFE_INTEGER) + currentId\n\n  const updateId = (object) => {\n    const clone = {\n      ...object,\n      id: calcNewId(object.id)\n    }\n    if (clone.id > maxId) {\n      maxId = clone.id\n    }\n\n    if (clone.connections) {\n      clone.connections = clone.connections.map(calcNewId)\n    }\n    return clone\n  }\n\n  clone.gates = clone.gates.map((gate) => {\n    const r = updateId(gate)\n    r.inputs = r.inputs.map(updateId)\n    r.outputs = r.outputs.map(updateId)\n    return r\n  })\n\n  currentId = maxId + 1\n\n  return clone\n}\n\n/**\n * Create an object containing the IDs of all valid pins for the given gates.\n */\nconst getValidPins = (gates) => (\n  Object.fromEntries(gates.reduce(\n    (t, gate) => t.concat(\n      gate.inputs.map((pin) => pin.id),\n      gate.outputs.map((pin) => pin.id)),\n    []\n  ).map((id) => [id, true]))\n)\n\n/**\n * Returns a new list of gates from the given list of gates with the\n * connections to invalid pins removed.\n */\nconst removeInvalidConnections = (gates) => {\n  const validPins = getValidPins(gates)\n\n  /* Remove all connections that point to a deleted pin. */\n  return gates.map((gate) => {\n    const gateClone = { ...gate }\n    const updatePin = (pin) => {\n      return {\n        ...pin,\n        connections: pin.connections.filter((id) => validPins[id])\n      }\n    }\n\n    gateClone.inputs = gateClone.inputs.map(updatePin)\n    gateClone.outputs = gateClone.outputs.map(updatePin)\n    return gateClone\n  })\n}\n\nexport default {\n  /* Simulation. */\n  nextState,\n  getOutputs,\n  getInputs,\n  getUserInput,\n  setUserInput,\n  fastForward,\n\n  /* Circuit creation. */\n  renumber,\n  connect,\n  circuit,\n  andGate,\n  orGate,\n  xorGate,\n  constantGate,\n  switchGate,\n  led,\n  buffer,\n\n  /* Utils. */\n  removeInvalidConnections,\n  getValidPins\n}\n","import React from 'react'\n\nfunction Wire (props) {\n  const x0 = Number(props.x0)\n  const y0 = Number(props.y0)\n  const x1 = Number(props.x1)\n  const y1 = Number(props.y1)\n\n  const curve = Math.min(Math.abs(y1 - y0), Math.abs(x1 - x0))\n  const padding = 0.1 + (x1 < x0 ? curve * 0.25 : 0)\n\n  const l = Math.min(x0, x1) - padding\n  const t = Math.min(y0, y1) - padding\n\n  const c0 = x0 - l + curve\n  const c1 = x1 - l - curve\n\n  const width = Math.abs(x1 - x0) + padding * 2\n  const height = Math.abs(y1 - y0) + padding * 2\n\n  const d = `M ${x0 - l} ${y0 - t} ` +\n            `C ${c0} ${y0 - t}, ${c1} ${y1 - t}, ${x1 - l} ${y1 - t}`\n\n  return (\n    <svg\n      width={`${width}in`}\n      height={`${height}in`}\n      viewBox={`0 0 ${width} ${height}`}\n      style={{\n        position: 'absolute',\n        left: `${l}in`,\n        top: `${t}in`,\n        pointerEvents: 'none'\n      }}\n    >\n      <path\n        d={d}\n        stroke='black' strokeWidth='0.01' fill='transparent'\n      />\n    </svg>\n  )\n}\n\nexport default Wire\n","import { useRef, useEffect, useCallback, useState } from 'react'\n\n/**\n * Creates a callback function that calls the given callback by reference. This\n * is useful when multiple components need to use the same callback, and you\n * don't want to trigger a rerender of all the components when the callback\n * changes. Returns the memoized callback.\n */\nexport const useRefCallback = (callback) => {\n  const ref = useRef(null)\n  const memoizedCallback = useCallback(\n    (...args) => ref.current(...args),\n    []\n  )\n\n  useEffect(() => {\n    ref.current = callback\n  }, [callback])\n\n  return memoizedCallback\n}\n\nexport const useUndoable = (state, max) => {\n  const [present, setPresent] = useState(state)\n  const [past, setPast] = useState([])\n  const [future, setFuture] = useState([])\n\n  const canUndo = past.length > 0\n  const canRedo = future.length > 0\n\n  const undo = () => {\n    if (canUndo) {\n      setFuture([present, ...future])\n      setPresent(past[0])\n      setPast(past.slice(1))\n    }\n  }\n\n  const redo = () => {\n    if (canRedo) {\n      setPast([present, ...past])\n      setPresent(future[0])\n      setFuture(future.slice(1))\n    }\n  }\n\n  const setState = (state) => {\n    setPast([present, ...past].splice(-(max || 1000)))\n    setPresent(state)\n    setFuture([])\n  }\n\n  return [present, setState, undo, redo]\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nimport Wire from './Wire'\n\nconst useStyles = makeStyles((theme) => ({\n  selectedGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    background: fade(theme.palette.primary.main, 0.3),\n    borderRadius: '4px',\n    cursor: 'move'\n  },\n\n  gate: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  pin: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  editableGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.15)\n    }\n  },\n\n  editablePin: {\n    position: 'absolute',\n    margin: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.3)\n    }\n  }\n}))\n\n/*\n * A react component representing a single logic gate.\n */\nconst LogicGate = React.memo((props) => {\n  /*\n   * The object responsible for placing the pins and choosing the SVGs. Note\n   * that this is not related to the material-ui theme.\n   */\n  const theme = props.theme\n\n  const classes = useStyles()\n\n  /* The position of the gate. */\n  const x = props.x\n  const y = props.y\n\n  const width = theme.getWidth(props.gate)\n  const height = theme.getHeight(props.gate)\n\n  /* The positions of the pins. */\n  const pinPositions = theme.getPinPositions(props.gate, x, y)\n\n  const isSelected = props.selected\n\n  const Pin = (pinProps) => (\n    <img\n      alt=''\n      src={theme.getPinSvg(pinProps.pin)}\n      onMouseDown={\n        (e) => props.onPinMouseDown(e, pinProps.pin, pinProps.isOutput)\n      }\n      onMouseUp={\n        (e) => props.onPinMouseUp(e, pinProps.pin, pinProps.isOutput)\n      }\n      style={{\n        left: `${pinPositions[pinProps.pin.id].x - x - 0.0625}in`,\n        top: `${pinPositions[pinProps.pin.id].y - y - 0.0625}in`\n      }}\n      className={props.editable ? classes.editablePin : classes.pin}\n    />\n  )\n\n  return (\n    <div\n      style={{\n        left: `${x}in`,\n        top: `${y}in`,\n        width: `${width}in`,\n        height: `${height}in`\n      }}\n      className={\n        props.editable\n          ? (isSelected ? classes.selectedGate : classes.editableGate)\n          : classes.gate\n      }\n    >\n\n      {\n        /* Input pin wires */\n        props.gate.outputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={pinPositions[pin.id].x - x - 0.25}\n            y1={pinPositions[pin.id].y - y}\n          />)\n      }\n\n      {\n        /* Output pin wires */\n        props.gate.inputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={pinPositions[pin.id].x - x + 0.25}\n            y1={pinPositions[pin.id].y - y}\n          />)\n      }\n\n      {/* The gate itself */}\n      <img\n        alt={props.gate.type}\n        src={props.svg}\n        style={{ position: 'absolute' }}\n        onClick={(e) => props.onGateClick(e, props.gate)}\n        onMouseDown={(e) => props.onGateMouseDown(e, props.gate)}\n      />\n\n      {\n        /* Input pins */\n        props.gate.inputs.map((pin) =>\n          <Pin pin={pin} isOutput={false} key={pin.id} />\n        )\n      }\n\n      {\n        /* Output pins */\n        props.gate.outputs.map((pin) =>\n          <Pin pin={pin} isOutput key={pin.id} />\n        )\n      }\n    </div>\n  )\n})\n\nexport default LogicGate\n","import React, { useMemo } from 'react'\nimport { useRefCallback } from './hooks'\n\nimport Wire from './Wire'\nimport LogicGate from './LogicGate'\n\n/**\n * React component used to hold a circuit.\n */\nexport default function Circuit (props) {\n  const theme = props.theme\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  const selection = props.selection\n  const moveAmount = props.moveAmount\n\n  const simState = props.simState\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, gates])\n\n  const onGateClick = useRefCallback(props.onGateClick, [])\n  const onGateMouseDown = useRefCallback(props.onGateMouseDown, [])\n\n  const onPinMouseUp = useRefCallback(props.onPinMouseUp, [])\n  const onPinMouseDown = useRefCallback(props.onPinMouseDown, [])\n\n  return (\n    <>\n      {\n        /* Wires */\n        gates.map(\n          (gate) => gate.inputs\n            .filter((pin) => pin.connections[0])\n            .map((pin) =>\n              <Wire\n                key={`${pin.id}-${pin.connections[0].id}`}\n                x0={pinPositions[pin.connections[0]].x}\n                y0={pinPositions[pin.connections[0]].y}\n                x1={pinPositions[pin.id].x}\n                y1={pinPositions[pin.id].y}\n              />))\n      }\n\n      {\n        /* Gates */\n        gates.map((gate) => {\n          const x = (gate.x || 0) +\n            (props.selection[gate.id] ? moveAmount[0] : 0)\n          const y = (gate.y || 0) +\n            (props.selection[gate.id] ? moveAmount[1] : 0)\n\n          return (\n            <LogicGate\n              gate={gate}\n              svg={theme.getGateSvg(gate, simState)}\n              x={x}\n              y={y}\n              key={gate.id}\n              theme={theme}\n              selected={selection[gate.id]}\n              editable={isEditable}\n              onGateClick={onGateClick}\n              onGateMouseDown={onGateMouseDown}\n              onPinMouseDown={onPinMouseDown}\n              onPinMouseUp={onPinMouseUp}\n            />\n          )\n        })\n      }\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nconst useStyles = makeStyles((theme) => ({\n  selectionBox: {\n    position: 'fixed',\n    background: fade(theme.palette.primary.main, 0.3),\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component for a selection box dragged by the user.\n */\nfunction SelectionBox (props) {\n  const [selectionEnd, setSelectionEnd] = useState(props.selectionStart)\n\n  const selectionStart = props.selectionStart\n  const onSelectionChanged = props.onSelectionChanged\n\n  const classes = useStyles()\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      const end = [e.clientX, e.clientY]\n      setSelectionEnd(end)\n      onSelectionChanged(\n        [\n          Math.min(selectionStart[0], end[0]),\n          Math.min(selectionStart[1], end[1])\n        ],\n        [\n          Math.max(selectionStart[0], end[0]),\n          Math.max(selectionStart[1], end[1])\n        ])\n    }\n\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [selectionStart, onSelectionChanged])\n\n  const hasMoved = (\n    selectionEnd[0] !== props.selectionStart[0] &&\n    selectionEnd[1] !== props.selectionStart[1])\n\n  /*\n   * The selection box should only be visible after the user moves their mouse.\n   */\n  return hasMoved && (\n    <div\n      className={classes.selectionBox} style={{\n        left: Math.min(props.selectionStart[0], selectionEnd[0]),\n        top: Math.min(props.selectionStart[1], selectionEnd[1]),\n        width: Math.abs(selectionEnd[0] - props.selectionStart[0]),\n        height: Math.abs(selectionEnd[1] - props.selectionStart[1])\n      }}\n    />\n  )\n}\n\nexport default SelectionBox\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\n\nimport logic from './logic'\n\nimport Wire from './Wire'\nimport Circuit from './Circuit'\nimport SelectionBox from './SelectionBox'\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    width: '8.5in',\n    height: '11in',\n    position: 'relative'\n  }\n}))\n\n/*\n * A react component for the wire currently being dragged by the user.\n */\nfunction PreviewWire (props) {\n  const [end, setEnd] = useState([props.x0, props.y0])\n\n  const clientToPage = props.clientToPage\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      setEnd(clientToPage([e.clientX, e.clientY]))\n    }\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [clientToPage])\n\n  if (props.isOutputPin) {\n    return (\n      <Wire x0={props.x0} y0={props.y0} x1={end[0]} y1={end[1]} />\n    )\n  } else {\n    return (\n      <Wire x1={props.x0} y1={props.y0} x0={end[0]} y0={end[1]} />\n    )\n  }\n}\n\nconst Page = React.forwardRef((props, ref) => {\n  const selection = props.selection\n  const theme = props.theme\n\n  const simState = props.simState\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  const onCircuitChanged = props.onCircuitChanged\n\n  const onSelectionChanged = props.onSelectionChanged\n  const onUserInputChanged = props.onUserInputChanged\n\n  const classes = useStyles()\n\n  const [selectionStart, setSelectionStart] = useState(null)\n\n  /* Object containing IDs of gates currently being selected. */\n  const [toBeAddedToSelection, setToBeAddedToSelection] = useState({})\n\n  /* Whether or not the selected items are being dragged. */\n  const [isDragging, setIsDragging] = useState(false)\n\n  /*\n   * Whether or not the selected items were dragged (to prevent the click event\n   * from being fired after a drag.\n   */\n  const [didDrag, setDidDrag] = useState(false)\n\n  /* The start and end positions of the drag in client coordinates. */\n  const [moveStart, setMoveStart] = useState([0, 0])\n  const [moveEnd, setMoveEnd] = useState([0, 0])\n\n  const [wireStartPin, setWireStartPin] = useState(null)\n\n  /* Whether or not the pin being dragged from is an output pin. */\n  const [wireStartPinIsOutput, setWireStartPinIsOutput] = useState(false)\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  /* The amount to move teh selected components in page coordinates. */\n  const moveAmount = isDragging\n    ? [\n      (moveEnd[0] - moveStart[0]) / 96,\n      (moveEnd[1] - moveStart[1]) / 96\n    ]\n    : [0, 0]\n\n  /*\n   * Function to convert from client coordianates to coordinates on the page.\n   */\n  const clientToPage = (coord) => {\n    const bounds = ref.current.getBoundingClientRect()\n    return [\n      (coord[0] - bounds.left) / 96,\n      (coord[1] - bounds.top) / 96\n    ]\n  }\n\n  /* Called when the bounds of the selection box changes. */\n  const onSelectionBoxChanged = (ul, br) => {\n    /* Calculate the selection on the page. */\n\n    const a = clientToPage(ul)\n    const b = clientToPage(br)\n\n    let clone = null\n\n    /* Determine if any items were added to the selection. */\n    gates.forEach((gate) => {\n      const width = props.theme.getWidth(gate)\n      const height = props.theme.getHeight(gate)\n\n      const isOverlapping = (\n        gate.x >= a[0] && gate.y >= a[1] &&\n        gate.x + width <= b[0] && gate.y + height <= b[1])\n\n      if (isOverlapping && !toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        clone[gate.id] = true\n      } else if (!isOverlapping && toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        delete clone[gate.id]\n      }\n    })\n\n    if (clone) {\n      setToBeAddedToSelection(clone)\n    }\n  }\n\n  const onGateClick = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      if (!didDrag) {\n        const newSelection = {}\n        if (e.shiftKey) {\n          Object.assign(newSelection, selection)\n        }\n        newSelection[gate.id] = !newSelection[gate.id]\n        onSelectionChanged(newSelection)\n        e.stopPropagation()\n      }\n    } else if (simState != null) {\n      if (gate.type === 'switch') {\n        onUserInputChanged(gate, !logic.getUserInput(gate, simState))\n      }\n    }\n  }, [\n    selection,\n    isEditable,\n    didDrag,\n    onSelectionChanged,\n    onUserInputChanged,\n    simState\n  ])\n\n  const onGateMouseDown = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      setMoveStart([e.clientX, e.clientY])\n      setMoveEnd([e.clientX, e.clientY])\n      setDidDrag(false)\n      if (selection[gate.id]) {\n        setIsDragging(true)\n      }\n      e.stopPropagation()\n    }\n    e.preventDefault()\n  }, [isEditable, selection, setMoveStart, setMoveEnd, setDidDrag])\n\n  const onMove = useCallback((moveAmount) => {\n    const clone = { ...circuit }\n    clone.gates = clone.gates.map((gate) => {\n      if (selection[gate.id]) {\n        /* Copy the gate. */\n        gate = { ...gate }\n        gate.x += moveAmount[0]\n        gate.y += moveAmount[1]\n      }\n      return gate\n    })\n    onCircuitChanged(clone)\n  }, [circuit, selection, onCircuitChanged])\n\n  const addWire = useCallback((from, to) => {\n    const clone = { ...circuit }\n\n    /*\n     * Function that takes in a pin, clones it and adds a connection if it is\n     * the from or to pin. Returns the pin otherwise.\n     */\n    const updatePin = (pin, isOutputPin) => {\n      if (isOutputPin || pin.connections.length === 0) {\n        if (pin.id === from) {\n          return { ...pin, connections: [...pin.connections, to] }\n        } else if (pin.id === to) {\n          return { ...pin, connections: [...pin.connections, from] }\n        }\n      }\n      return pin\n    }\n\n    /* Only update if the input pin has no connections. */\n    let shouldUpdate = false\n\n    clone.gates = clone.gates.map((gate) => {\n      let hasPin = false\n      const inputs = gate.inputs.map((pin) => {\n        const r = updatePin(pin)\n        if (r !== pin) {\n          hasPin = true\n        }\n        return r\n      })\n\n      /* If the gate has the pin, clone the gate. */\n      if (hasPin) {\n        shouldUpdate = true\n        return { ...gate, inputs }\n      } else {\n        return gate\n      }\n    })\n\n    if (shouldUpdate) {\n      /* Update output pin. */\n      clone.gates = clone.gates.map((gate) => {\n        let hasPin = false\n        const outputs = gate.outputs.map((pin) => {\n          const r = updatePin(pin, true)\n          if (r !== pin) {\n            hasPin = true\n          }\n          return r\n        })\n\n        /* If the gate has the pin, clone it. */\n        if (hasPin) {\n          return { ...gate, outputs }\n        } else {\n          return gate\n        }\n      })\n\n      onCircuitChanged(clone)\n    }\n  }, [circuit, onCircuitChanged])\n\n  const onPinMouseDown = useCallback((e, pin, isOutputPin) => {\n    if (isEditable && e.button === 0) {\n      /* If the pin is an output pin, start dragging a wire from it. */\n      if (isOutputPin) {\n        setWireStartPin(pin.id)\n        setWireStartPinIsOutput(isOutputPin)\n      } else {\n        /*\n         * If the pin is an input pin and already has a connection, remove the\n         * connection and start dragging from the connected pin.\n         */\n        if (pin.connections.length > 0) {\n          const clone = { ...circuit }\n          clone.gates = clone.gates.map((gate) => {\n            const inIndex = gate.inputs.indexOf(pin)\n            const outIndex = gate.outputs.findIndex(\n              (output) => output.id === pin.connections[0])\n\n            if (inIndex !== -1) {\n              const gateClone = {\n                ...gate,\n                inputs: [...gate.inputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.inputs[inIndex] = { ...pin, connections: [] }\n\n              return gateClone\n            } else if (outIndex !== -1) {\n              const output = gate.outputs[outIndex]\n              const gateClone = {\n                ...gate,\n                outputs: [...gate.outputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.outputs[outIndex] = {\n                ...output,\n                connections: output.connections.filter((id) => id !== pin.id)\n              }\n\n              return gateClone\n            } else {\n              return gate\n            }\n          })\n\n          /* Update the circuit */\n          onCircuitChanged(clone)\n\n          setWireStartPin(pin.connections[0])\n          setWireStartPinIsOutput(true)\n        } else {\n          setWireStartPin(pin.id)\n          setWireStartPinIsOutput(isOutputPin)\n        }\n      }\n    }\n    e.stopPropagation()\n    e.preventDefault()\n  }, [\n    circuit,\n    isEditable,\n    setWireStartPin,\n    setWireStartPinIsOutput,\n    onCircuitChanged\n  ])\n\n  const onPinMouseUp = useCallback((e, pin, isOutputPin) => {\n    if (isEditable) {\n      /*\n       * Add a wire if the wire start pin is different from the wire\n       * end pin, and both of the pins are not output pins\n       */\n      if (wireStartPin !== null &&\n          wireStartPin !== pin.id &&\n          isOutputPin ^ wireStartPinIsOutput) {\n        addWire(wireStartPin, pin.id)\n        e.stopPropagation()\n        e.preventDefault()\n      }\n      setWireStartPin(null)\n    }\n  }, [isEditable, wireStartPin, wireStartPinIsOutput, addWire])\n\n  /*\n   * The total selection, including elements currently being selected as well as\n   * the previously selected elements.\n   */\n  const totalSelection = { ...props.selection, ...toBeAddedToSelection }\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    circuit.gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, circuit])\n\n  /*\n   * Add a mouseup event listener to the window. We need to do this in case the\n   * user drags outside the window.\n   */\n  useEffect(() => {\n    const onMouseUp = (e) => {\n      if (!isEditable) {\n        e.preventDefault()\n      } else if (e.button === 0) {\n        if (isDragging) {\n          onMove(moveAmount)\n          setIsDragging(false)\n          e.stopPropagation()\n        } else if (selectionStart) {\n          setToBeAddedToSelection({})\n          onSelectionChanged(totalSelection)\n        }\n        setSelectionStart(null)\n\n        if (wireStartPin !== null) {\n          setWireStartPin(null)\n        }\n        e.preventDefault()\n      }\n    }\n\n    window.addEventListener('mouseup', onMouseUp)\n    return () => window.removeEventListener('mouseup', onMouseUp)\n  })\n\n  useEffect(() => {\n    if (isEditable) {\n      const onMouseMove = (e) => {\n        if (isDragging) {\n          setMoveEnd([\n            e.clientX,\n            e.clientY\n          ])\n        }\n\n        if (!didDrag) {\n          setDidDrag(true)\n        }\n      }\n      window.addEventListener('mousemove', onMouseMove)\n      return () => window.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [isDragging, didDrag, isEditable])\n\n  return (\n    <Paper\n      elevation={3}\n      square\n      className={classes.page}\n      ref={ref}\n      onMouseDown={(e) => {\n        if (isEditable && e.button === 0) {\n          setSelectionStart([e.clientX, e.clientY])\n\n          /* Reset the selection if the user did not click shift. */\n          if (!e.shiftKey) {\n            onSelectionChanged({})\n          }\n        }\n\n        e.preventDefault()\n      }}\n    >\n      {\n        isEditable && wireStartPin !== null && (\n          <PreviewWire\n            x0={pinPositions[wireStartPin].x}\n            y0={pinPositions[wireStartPin].y}\n            clientToPage={clientToPage}\n            isOutputPin={wireStartPinIsOutput}\n          />\n        )\n      }\n      <Circuit\n        page={props.page}\n        circuit={circuit}\n        editable={isEditable}\n        selection={totalSelection}\n        theme={theme}\n        moveAmount={moveAmount}\n        onPinMouseDown={onPinMouseDown}\n        onPinMouseUp={onPinMouseUp}\n        onGateClick={onGateClick}\n        onGateMouseDown={onGateMouseDown}\n        simState={simState}\n      />\n      {\n        isEditable && selectionStart && (\n          <SelectionBox\n            selectionStart={selectionStart}\n            onSelectionChanged={onSelectionBoxChanged}\n          />\n        )\n      }\n    </Paper>\n  )\n})\n\nexport default Page\n","import React from 'react'\n\nimport Tooltip from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\n\nimport PinInvertedSvg from './assets/pin-inverted.svg'\n\nimport Wire from './Wire'\n\nimport logic from './logic'\n\nfunction PaletteItem (props) {\n  return (\n    <Grid item xs={3}>\n      <Tooltip title={`Add ${props.text}`}>\n        <Button onClick={props.onClick}>\n          <div\n            style={{\n              position: 'relative',\n              width: '0.5in',\n              height: '0.5in',\n              overflow: 'hidden'\n            }}\n          >\n            {\n              props.inverted && (\n                <Wire\n                  x0={0.25}\n                  y0={0.25}\n                  x1={0.5 - 0.0625}\n                  y1={0.25}\n                />\n              )\n            }\n\n            {\n              props.inverted && (\n                <img\n                  src={PinInvertedSvg}\n                  alt=''\n                  style={{\n                    position: 'absolute',\n                    left: `${0.5 - 0.125}in`,\n                    top: `${0.25 - 0.0625}in`\n                  }}\n                />\n              )\n            }\n\n            <img\n              src={props.svg}\n              alt=''\n              style={{\n                position: 'absolute',\n                left: props.inverted ? '-0.0625in' : 0,\n                top: 0\n              }}\n            />\n          </div>\n        </Button>\n      </Tooltip>\n    </Grid>\n  )\n}\n\n/**\n * A palette for placing components.\n * Props:\n *     - onSelect(factory)\n *           A callback called when the user selects an item. The factory\n *           parameter is a function that constructs a new logic gate.\n */\nfunction Palette (props) {\n  const invert = (gate) => {\n    gate.outputs[0].isInverted = true\n    return gate\n  }\n  return (\n    <Grid container className={props.className}>\n      <PaletteItem\n        svg={AndGateSvg}\n        text='AND gate'\n        onClick={() => props.onSelect(logic.andGate)}\n      />\n      <PaletteItem\n        svg={AndGateSvg}\n        text='NAND gate'\n        onClick={() => props.onSelect(() => invert(logic.andGate()))}\n        inverted\n      />\n      <PaletteItem\n        svg={OrGateSvg}\n        text='OR gate'\n        onClick={() => props.onSelect(logic.orGate)}\n      />\n      <PaletteItem\n        svg={OrGateSvg}\n        text='NOR gate'\n        onClick={() => props.onSelect(() => invert(logic.orGate()))}\n        inverted\n      />\n      <PaletteItem\n        svg={XorGateSvg}\n        text='XOR gate'\n        onClick={() => props.onSelect(logic.xorGate)}\n      />\n      <PaletteItem\n        svg={ZeroGateSvg}\n        text='ground'\n        onClick={() => props.onSelect(() => logic.constantGate(false))}\n      />\n      <PaletteItem\n        svg={OneGateSvg}\n        text='+1'\n        onClick={() => props.onSelect(() => logic.constantGate(true))}\n      />\n      <PaletteItem\n        svg={BufferGateSvg}\n        text='buffer'\n        onClick={() => props.onSelect(() => logic.buffer())}\n      />\n      <PaletteItem\n        svg={BufferGateSvg}\n        text='inverter'\n        onClick={() => props.onSelect(() => invert(logic.buffer()))}\n        inverted\n      />\n      <PaletteItem\n        svg={LedSvg}\n        text='LED'\n        onClick={() => props.onSelect(() => logic.led())}\n      />\n      <PaletteItem\n        svg={SwitchOffSvg}\n        text='switch'\n        onClick={() => props.onSelect(logic.switchGate)}\n      />\n    </Grid>\n  )\n}\n\nexport default Palette\n","/*\n * Themes are responsible for determining the images to use for each logic gate,\n * as well as the position of the pins.\n */\n\nimport logic from './logic'\n\n/* SVGs */\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OpenPinSvg from './assets/open-pin.svg'\nimport OpenPinInvertedSvg from './assets/open-pin-inverted.svg'\nimport PinSvg from './assets/pin.svg'\nimport PinInvertedSvg from './assets/pin-inverted.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport LedGlowSvg from './assets/led-glow.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SwitchOnSvg from './assets/switch-on.svg'\n\nconst defaultThemeSvgs = {\n  and: () => AndGateSvg,\n  or: () => OrGateSvg,\n  xor: () => XorGateSvg,\n  buffer: () => BufferGateSvg,\n  led: (gate, state) =>\n    state\n      ? (logic.getInputs(gate, state)[0] ? LedGlowSvg : LedSvg)\n      : LedSvg,\n  constant: (gate) => gate.value ? OneGateSvg : ZeroGateSvg,\n  switch: (gate, state) =>\n    state\n      ? (logic.getUserInput(gate, state) ? SwitchOnSvg : SwitchOffSvg)\n      : SwitchOffSvg\n}\n\nconst defaultTheme = {\n  /* Returns an SVG for the given pin. */\n  getPinSvg: (pin) => (\n    pin.connections.length === 0\n      ? (pin.isInverted\n        ? OpenPinInvertedSvg\n        : OpenPinSvg)\n      : (pin.isInverted\n        ? PinInvertedSvg\n        : PinSvg)),\n\n  /* Returns an SVG for the given gate. */\n  getGateSvg (gate, state) {\n    return defaultThemeSvgs[gate.type](gate, state)\n  },\n\n  /* Returns an object mapping a pin ID to a pin position. */\n  getPinPositions (gate, x, y, state) {\n    /* Maps a pin ID to a position */\n    const ret = {}\n\n    gate.inputs.forEach((pin, index) => {\n      ret[pin.id] = {\n        x: x,\n        y: y + 0.25 + (index - (gate.inputs.length - 1) / 2) * 0.2\n      }\n    })\n\n    gate.outputs.forEach((pin, index) => {\n      ret[pin.id] = {\n        x: x + 0.5,\n        y: y + 0.25\n      }\n    })\n\n    return ret\n  },\n\n  getWidth (gate, state) {\n    return 0.5\n  },\n\n  getHeight (gate, state) {\n    return 0.5\n  }\n}\n\nexport {\n  defaultTheme\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport packageJson from '../package.json'\n\n/* Material UI components. */\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Container from '@material-ui/core/Container'\nimport Drawer from '@material-ui/core/Drawer'\nimport Typography from '@material-ui/core/Typography'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\n/* Icons. */\nimport StopIcon from '@material-ui/icons/Stop'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport RedoIcon from '@material-ui/icons/Redo'\nimport UndoIcon from '@material-ui/icons/Undo'\nimport HelpIcon from '@material-ui/icons/Help'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\n/* Page components. */\nimport Page from './Page'\nimport Palette from './Palette'\n\n/* Logic components. */\nimport logic from './logic'\nimport { defaultTheme } from './themes'\n\nimport { upload, download } from './utils'\n\nimport { useUndoable } from './hooks'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport SimWorker from 'workerize-loader!./sim.worker'\n\nconst drawerWidth = 256\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  menuButtonGroup: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerContent: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\nfunction PageChanger (props) {\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const classes = useStyles()\n\n  const onClose = () => setAnchorEl(null)\n  const onClick = (e) => setAnchorEl(e.currentTarget)\n\n  const menuItems = []\n  for (let i = 0; i <= props.pageCount; i++) {\n    menuItems.push(\n      <MenuItem\n        onClick={() => {\n          props.onChangedPage(i)\n          onClose()\n        }}\n      >\n        Page {i + 1}\n      </MenuItem>\n    )\n  }\n\n  return (\n    <>\n      <Tooltip title='Change page'>\n        <Button\n          aria-controls='simple-menu'\n          aria-haspopup='true'\n          aria-label='change page'\n          className={classes.menuButton}\n          color='inherit'\n          onClick={onClick}\n        >\n          Page {1 + props.page}\n          <ExpandMoreIcon />\n        </Button>\n      </Tooltip>\n\n      <Menu\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClose}\n        anchorEl={anchorEl}\n      >\n        {menuItems}\n      </Menu>\n    </>\n  )\n}\n\nfunction App () {\n  const [circuit, setCircuit, undo, redo] = useUndoable(() => logic.circuit([]))\n  const [selection, setSelection] = useState(false)\n  const [simState, setSimState] = useState(null)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [copiedGates, setCopiedGates] = useState(null)\n  const [contextMenuPos, setContextMenuPos] = useState(null)\n  const [currentPage, setCurrentPage] = useState(0)\n  const [pageCount, setPageCount] = useState(1)\n\n  const simWorker = useRef(new SimWorker())\n\n  /* For opening and closing the upload error snackbar. */\n  const [openUploadError, setOpenUploadError] = useState(false)\n\n  /* Refs used for calculating the center of the page. */\n  const appBarRef = React.createRef()\n  const pageRef = React.createRef()\n\n  const classes = useStyles()\n\n  const closeContextMenu = () => setContextMenuPos(null)\n\n  const downloadProject = () => {\n    download('circuit.json', {\n      version: packageJson.version,\n      circuit,\n      currentPage\n    })\n  }\n\n  const uploadProject = () =>\n    upload()\n      .then((data) => {\n        setCircuit(logic.renumber(data.circuit))\n\n        const maxPage = data.circuit.gates.reduce(\n          (maxPage, gate) => gate.page ? Math.max(maxPage, gate.page) : maxPage,\n          0\n        )\n\n        const page = data.currentPage || 0\n\n        /* Set the number of pages available to the user. */\n        setPageCount(Math.max(page, maxPage + 1))\n\n        /* Goto the first page, or the current page that was saved. */\n        setCurrentPage(page)\n      })\n      .catch((error) => {\n        setOpenUploadError(true)\n        console.error(error)\n      })\n\n  const selectAll = () => {\n    setSelection(\n      Object.fromEntries(\n        circuit.gates\n          .filter((gate) => (gate.page || 0) === currentPage)\n          .map((gate) => [gate.id, true]))\n    )\n    closeContextMenu()\n  }\n\n  const copy = () => {\n    /* Copy the selection. */\n    setCopiedGates(\n      logic.removeInvalidConnections(\n        circuit.gates.filter((gate) => selection[gate.id])\n      )\n    )\n    closeContextMenu()\n  }\n\n  const paste = () => {\n    if (copiedGates) {\n      /* Renumber the circuit so we have no ID collisions. */\n      const clone = logic.renumber(circuit)\n      /* Append the copied gates to the circuit. */\n      clone.gates = [\n        ...clone.gates,\n        ...copiedGates.map((gate) => ({\n          ...gate,\n          page: currentPage\n        }))\n      ]\n      setCircuit(clone)\n    }\n    closeContextMenu()\n  }\n\n  const onPlayButtonClicked = () => {\n    if (!isPlaying) {\n      simWorker.current.startSimulation(circuit)\n      setIsPlaying(true)\n    } else {\n      simWorker.current.stopSimulation()\n      setIsPlaying(false)\n    }\n  }\n\n  useEffect(() => {\n    let shouldLoop = isPlaying\n\n    const loop = (state) => {\n      if (shouldLoop) {\n        setSimState(state)\n        simWorker.current.getState().then(loop)\n      } else {\n        setSimState(null)\n      }\n    }\n    loop(null)\n\n    return () => { shouldLoop = false }\n  }, [isPlaying])\n\n  const deleteSelection = () => {\n    const clone = { ...circuit }\n\n    /* Remove the selected gates. */\n    clone.gates = clone.gates.filter((gate) => !selection[gate.id])\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n    setCircuit(clone)\n  }\n\n  return (\n    <div\n      className={classes.root}\n      onContextMenu={(event) => {\n        event.preventDefault()\n        setContextMenuPos([event.clientX - 2, event.clientY - 4])\n      }}\n    >\n      <CssBaseline />\n\n      <Drawer variant='persistent' className={classes.drawer} open>\n        <Toolbar />\n        <Palette\n          className={classes.drawerContent}\n          onSelect={(factory) => {\n            /* Clone the circuit. */\n            const clone = { ...circuit }\n            clone.gates = [...clone.gates]\n\n            /* Place the gate. */\n            const gate = factory()\n            clone.gates.push(gate)\n\n            /* Calculate the gate position. */\n            const appBarRect = appBarRef.current.getBoundingClientRect()\n            const pageRect = pageRef.current.getBoundingClientRect()\n\n            gate.x = ((appBarRect.width + drawerWidth) / 2 - pageRect.left) / 96\n            gate.y = (\n              (window.innerHeight + appBarRect.height) / 2 - pageRect.top) / 96\n\n            gate.page = currentPage\n\n            /* Update with the new circuit. */\n            setCircuit(clone)\n          }}\n        />\n      </Drawer>\n\n      <AppBar position='fixed' className={classes.appBar} ref={appBarRef}>\n        <Toolbar>\n\n          <Typography variant='h6' className={classes.title}>MML2</Typography>\n\n          <PageChanger\n            page={currentPage}\n            pageCount={pageCount}\n            onChangedPage={(page) => {\n              setCurrentPage(page)\n              if (page >= pageCount) {\n                setPageCount(page + 1)\n              }\n            }}\n          />\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Upload project'>\n              <Button\n                aria-label='upload'\n                onClick={uploadProject}\n              >\n                <CloudUploadIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Download project'>\n              <Button\n                aria-label='download'\n                onClick={downloadProject}\n              >\n                <CloudDownloadIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Undo'>\n              <Button aria-label='undo' onClick={undo}>\n                <UndoIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Redo'>\n              <Button aria-label='redo' onClick={redo}>\n                <RedoIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <Tooltip title={isPlaying ? 'Stop simulation' : 'Start simulation'}>\n            <Button\n              aria-label={isPlaying ? 'stop' : 'start'}\n              onClick={onPlayButtonClicked}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              {\n                isPlaying ? <StopIcon /> : <PlayIcon />\n              }\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Delete selection'>\n            <Button\n              aria-label='delete'\n              onClick={deleteSelection}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <DeleteIcon />\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Help'>\n            <Button\n              aria-label='help'\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <HelpIcon />\n            </Button>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n\n      <Toolbar />\n      <main className={classes.content}>\n        <Toolbar />\n        <Container>\n          <Page\n            page={currentPage}\n            circuit={circuit}\n            theme={defaultTheme}\n            ref={pageRef}\n            selection={selection}\n            simState={simState}\n            onSelectionChanged={(selection) => {\n              setSelection(selection)\n            }}\n            onCircuitChanged={(circuit) => {\n              setCircuit(circuit)\n            }}\n            onUserInputChanged={(gate, value) => {\n              simWorker.current.setUserInput(gate, value)\n            }}\n            editable={!simState}\n          />\n        </Container>\n      </main>\n      <Snackbar\n        open={openUploadError}\n        autoHideDuration={10000}\n        onClose={() => { setOpenUploadError(false) }}\n        message=\"Uh oh! We weren't able to load that file.\"\n      />\n      <Menu\n        keepMounted\n        open={contextMenuPos !== null}\n        onClose={closeContextMenu}\n        anchorReference='anchorPosition'\n        anchorPosition={\n          contextMenuPos && { left: contextMenuPos[0], top: contextMenuPos[1] }\n        }\n      >\n        <MenuItem onClick={copy}>Copy</MenuItem>\n        <MenuItem onClick={paste}>Paste</MenuItem>\n        <MenuItem onClick={selectAll}>Select all</MenuItem>\n      </Menu>\n    </div>\n  )\n}\n\nexport default App\n","/*\n * Utility functions\n */\n\n/*\n * Converts the given data to JSON, and prompts the user to save the file as the\n * given filename.\n */\nexport const download = (filename, data) => {\n  var element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    `data:text/plain;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`)\n  element.setAttribute('download', filename)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\n/*\n * Prompts the user to upload a file. Returns a promise that resolves to the\n * parsed JSON.\n */\nexport const upload = () => {\n  return new Promise((resolve, reject) => {\n    var element = document.createElement('input')\n    element.setAttribute('type', 'file')\n\n    element.style.display = 'none'\n    document.body.appendChild(element)\n\n    element.addEventListener(\n      'change',\n      function () {\n        this.files[0].text()\n          .then(JSON.parse)\n          .then((data) => resolve(data))\n          .catch((error) => reject(error))\n      },\n      false)\n\n    element.click()\n\n    document.body.removeChild(element)\n  })\n}\n","/* eslint-env serviceworker */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap' />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}