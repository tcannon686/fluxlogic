{"version":3,"sources":["assets/receiver.svg","assets/seven-segment.svg","assets/sr-latch.svg","assets/d-latch.svg","assets/d-flip-flop.svg","assets/sr-d-flip-flop.svg","assets/pin-inverted.svg","assets/text.svg","assets/open-pin.svg","assets/open-pin-inverted.svg","assets/pin.svg","assets/led-glow.svg","assets/switch-on.svg","assets/seven-segment-0.svg","assets/seven-segment-1.svg","assets/seven-segment-2.svg","assets/seven-segment-3.svg","assets/seven-segment-4.svg","assets/seven-segment-5.svg","assets/seven-segment-6.svg","assets/seven-segment-7.svg","assets/seven-segment-8.svg","assets/seven-segment-9.svg","assets/seven-segment-10.svg","assets/seven-segment-11.svg","assets/seven-segment-12.svg","assets/seven-segment-13.svg","assets/seven-segment-14.svg","assets/seven-segment-15.svg","Wire.js","hooks.js","Circuit.js","SelectionBox.js","Page.js","ListSection.js","utils.js","logic.js","Palette.js","Inspector.js","LogicGate.js","themes.js","App.js","serviceWorker.js","index.js","assets/and-gate.svg","assets/or-gate.svg","assets/buffer-gate.svg","assets/mux.svg","assets/demux.svg","assets/xor-gate.svg","assets/one-gate.svg","assets/zero-gate.svg","assets/led.svg","assets/switch-off.svg","assets/sender.svg"],"names":["module","exports","Wire","props","x0","Number","y0","x1","y1","curve","Math","min","abs","padding","l","t","c0","c1","width","height","d","viewBox","style","position","left","top","pointerEvents","stroke","strokeWidth","fill","useSubscription","observable","useState","state","setState","useEffect","subscription","subscribe","value","unsubscribe","useRefCallback","callback","ref","useRef","memoizedCallback","useCallback","current","Circuit","theme","isEditable","editable","circuit","page","gates","useMemo","undefined","filter","gate","selection","moveAmount","simulation","pinPositions","positions","forEach","x","id","y","Object","assign","getPinPositions","onGateClick","onGateMouseDown","onPinMouseUp","onPinMouseDown","onUserInputChanged","map","inputs","pin","connections","length","key","Component","getGateComponent","selected","useStyles","makeStyles","selectionBox","background","fade","palette","primary","main","SelectionBox","selectionStart","selectionEnd","setSelectionEnd","onSelectionChanged","classes","onMouseMove","e","end","clientX","clientY","max","document","addEventListener","removeEventListener","className","PreviewWire","setEnd","clientToPage","isOutputPin","Page","React","forwardRef","onCircuitChanged","setSelectionStart","toBeAddedToSelection","setToBeAddedToSelection","isDragging","setIsDragging","didDrag","setDidDrag","moveStart","setMoveStart","moveEnd","setMoveEnd","wireStartPin","setWireStartPin","wireStartPinIsOutput","setWireStartPinIsOutput","coord","bounds","getBoundingClientRect","button","newSelection","shiftKey","stopPropagation","isSelectionEmpty","keys","preventDefault","onMove","clone","addWire","from","to","inputGateId","outputGateId","updatePin","shouldUpdate","hasPin","r","outputs","inIndex","indexOf","outIndex","findIndex","output","gateClone","totalSelection","onMouseUp","window","Paper","elevation","square","onMouseDown","activeElement","blur","ul","br","a","b","getWidth","getHeight","isOverlapping","ListSection","isExpanded","setIsExpanded","ListItem","onClick","ListItemIcon","ListItemText","title","Collapse","in","children","isPrimitive","object","deepEquals","nextOutputFunctions","and","getInputs","every","or","some","xor","constant","led","text","buffer","switch","Boolean","getUserInput","sender","receiver","find","type","label","findSender","mux","index","slice","n","reduce","c","i","demux","Array","sevenSegment","srLatch","getOutputs","s","q","dLatch","dFlipFlop","cPrev","prevState","srDFlipFlop","nextId","andGate","seal","orGate","xorGate","constantGate","switchGate","push","nextState","nextOutputs","isInverted","stateChanged","currentId","MAX_SAFE_INTEGER","renumber","maxId","calcNewId","updateId","removeInvalidConnections","validPins","fromEntries","concat","getValidPins","loadProject","data","JSON","parse","PaletteItem","Grid","item","xs","Button","overflow","inverted","src","PinInvertedSvg","alt","svg","Palette","memo","invert","List","container","AndGateSvg","onSelect","logic","OrGateSvg","XorGateSvg","ZeroGateSvg","OneGateSvg","BufferGateSvg","LedSvg","SevenSegmentSvg","SwitchOffSvg","SenderSvg","ReceiverSvg","MuxSvg","DemuxSvg","SrLatchSvg","DLatchSvg","DFlipFlopSvg","SrDFlipFlopSvg","TextSvg","string","evenlySpaced","margin","spacing","PinProperties","Tooltip","Checkbox","checked","onChange","target","deletable","onPinDeleted","Inspector","selectedGates","minX","Infinity","minY","sharedLabel","allHaveLabels","setX","setY","setLabel","updateGates","isOutput","deletePin","v","setText","setWidth","setHeight","Box","p","Typography","variant","isLogicGate","inputProps","newPin","fullWidth","addPin","outputProps","textProps","TextField","multiline","onBlur","sizeProps","class","isNaN","gateProps","positionProps","ButtonGroup","order","sort","labelProps","noValidate","selectedGate","borderRadius","cursor","editableGate","editablePin","transform","textAlign","LogicGateContainer","isSelected","Pin","pinProps","getPinSvg","LogicGate","Text","sevenSegmentSvgs","SevenSegment0Svg","SevenSegment1Svg","SevenSegment2Svg","SevenSegment3Svg","SevenSegment4Svg","SevenSegment5Svg","SevenSegment6Svg","SevenSegment7Svg","SevenSegment8Svg","SevenSegment9Svg","SevenSegment10Svg","SevenSegment11Svg","SevenSegment12Svg","SevenSegment13Svg","SevenSegment14Svg","SevenSegment15Svg","Switch","isOn","setIsOn","subject","BehaviorSubject","setUserInput","SwitchOnSvg","next","Led","isGlowing","pipe","LedGlowSvg","SevenSegment","defaultThemeComponents","defaultTheme","OpenPinInvertedSvg","OpenPinSvg","PinSvg","distribute","ret","pinX","f","root","display","appBar","zIndex","drawer","menuButton","marginRight","menuButtonGroup","hide","flexShrink","drawerContent","overflowX","content","flexGrow","PageChanger","anchorEl","setAnchorEl","onClose","menuItems","MenuItem","onChangedPage","pageCount","aria-controls","aria-haspopup","aria-label","color","currentTarget","Menu","keepMounted","open","TabPanel","other","Fade","role","aria-labelledby","App","present","setPresent","past","setPast","future","setFuture","undo","redo","splice","useUndoable","setCircuit","setSelection","isPlaying","setIsPlaying","copiedGates","setCopiedGates","contextMenuPos","setContextMenuPos","currentPage","setCurrentPage","setPageCount","tab","setTab","setSimulation","errorMessage","setErrorMessage","appBarRef","pageRef","closeContextMenu","selectAll","copy","paste","onPaletteSelect","factory","appBarRect","pageRect","innerHeight","onPlayButtonClicked","duplicates","senderCounts","entries","initialState","stateSubject","pinSubjects","Map","outputSubjects","inputSubjects","userInputs","userInputsSubscriptions","getPinOutput","pinId","has","set","get","getPin","gatePinSubjects","combineLatest","of","getState","asObservable","fastForward","join","interval","setInterval","clearInterval","deleteSelection","cut","changePage","onKeyDown","body","uppercase","toUpperCase","isValidShortcut","getModifierState","onContextMenu","event","CssBaseline","Drawer","Toolbar","Tabs","Tab","AppBar","Promise","resolve","reject","element","createElement","setAttribute","appendChild","this","files","then","catch","error","click","removeChild","maxPage","console","filename","encodeURIComponent","download","stringify","version","packageJson","Container","Snackbar","autoHideDuration","message","anchorReference","anchorPosition","location","hostname","match","createMuiTheme","light","dark","contrastText","secondary","ReactDOM","render","StrictMode","rel","href","ThemeProvider","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.382b49f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/receiver.34ee3b2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment.87ddfae3.svg\";","module.exports = __webpack_public_path__ + \"static/media/sr-latch.66255362.svg\";","module.exports = __webpack_public_path__ + \"static/media/d-latch.acbaf710.svg\";","module.exports = __webpack_public_path__ + \"static/media/d-flip-flop.57c93f76.svg\";","module.exports = __webpack_public_path__ + \"static/media/sr-d-flip-flop.2981b8c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-inverted.25b87449.svg\";","module.exports = __webpack_public_path__ + \"static/media/text.ede21a5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin.402b8aa6.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin-inverted.fb8a5ebb.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.4c8eaca6.svg\";","module.exports = __webpack_public_path__ + \"static/media/led-glow.ff1875d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-on.37d11db0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-0.04852a4c.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-1.6fd25c65.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-2.7208f433.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-3.8b8ca250.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-4.a18e6dce.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-5.25404539.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-6.f740952a.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-7.43f06495.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-8.4c14e783.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-9.50519141.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-10.b8869da5.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-11.4982a3e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-12.37b243f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-13.82ababea.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-14.a8711f2b.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-15.8f26ba8c.svg\";","import React from 'react'\n\nfunction Wire (props) {\n  const x0 = Number(props.x0)\n  const y0 = Number(props.y0)\n  const x1 = Number(props.x1)\n  const y1 = Number(props.y1)\n\n  const curve = Math.min(Math.abs(y1 - y0), Math.abs(x1 - x0))\n  const padding = 0.1 + (x1 < x0 ? curve * 0.25 : 0)\n\n  const l = Math.min(x0, x1) - padding\n  const t = Math.min(y0, y1) - padding\n\n  const c0 = x0 - l + curve\n  const c1 = x1 - l - curve\n\n  const width = Math.abs(x1 - x0) + padding * 2\n  const height = Math.abs(y1 - y0) + padding * 2\n\n  const d = `M ${x0 - l} ${y0 - t} ` +\n            `C ${c0} ${y0 - t}, ${c1} ${y1 - t}, ${x1 - l} ${y1 - t}`\n\n  return (\n    <svg\n      width={`${width}in`}\n      height={`${height}in`}\n      viewBox={`0 0 ${width} ${height}`}\n      style={{\n        position: 'absolute',\n        left: `${l}in`,\n        top: `${t}in`,\n        pointerEvents: 'none'\n      }}\n    >\n      <path\n        d={d}\n        stroke='black' strokeWidth='0.01' fill='transparent'\n      />\n    </svg>\n  )\n}\n\nexport default Wire\n","import { useRef, useEffect, useCallback, useState } from 'react'\n\n/**\n * Subscribe to an observable and return its value.\n */\nexport const useSubscription = (observable) => {\n  const [state, setState] = useState()\n  useEffect(() => {\n    if (observable) {\n      const subscription = observable.subscribe(value => {\n        setState(value)\n      })\n      return () => subscription.unsubscribe()\n    }\n  }, [observable])\n  return state\n}\n\n/**\n * Creates a callback function that calls the given callback by reference. This\n * is useful when multiple components need to use the same callback, and you\n * don't want to trigger a rerender of all the components when the callback\n * changes. Returns the memoized callback.\n */\nexport const useRefCallback = (callback) => {\n  const ref = useRef(null)\n  const memoizedCallback = useCallback(\n    (...args) => ref.current(...args),\n    []\n  )\n\n  useEffect(() => {\n    ref.current = callback\n  }, [callback])\n\n  return memoizedCallback\n}\n\nexport const useUndoable = (state, max) => {\n  const [present, setPresent] = useState(state)\n  const [past, setPast] = useState([])\n  const [future, setFuture] = useState([])\n\n  const undo = useCallback(() => {\n    const canUndo = past.length > 0\n    if (canUndo) {\n      setFuture([present, ...future])\n      setPresent(past[0])\n      setPast(past.slice(1))\n    }\n  }, [present, past, future, setPresent, setPast, setFuture])\n\n  const redo = useCallback(() => {\n    const canRedo = future.length > 0\n    if (canRedo) {\n      setPast([present, ...past])\n      setPresent(future[0])\n      setFuture(future.slice(1))\n    }\n  }, [present, past, future, setPresent, setPast, setFuture])\n\n  const setState = useCallback((state) => {\n    setPast([present, ...past].splice(-(max || 1000)))\n    setPresent(state)\n    setFuture([])\n  }, [present, past, setPresent, setPast, setFuture, max])\n\n  return [present, setState, undo, redo]\n}\n","import React, { useMemo } from 'react'\nimport { useRefCallback } from './hooks'\n\nimport Wire from './Wire'\n\n/**\n * React component used to hold a circuit.\n */\nexport default function Circuit (props) {\n  const theme = props.theme\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  const selection = props.selection\n  const moveAmount = props.moveAmount\n\n  const simulation = props.simulation\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, gates])\n\n  const onGateClick = useRefCallback(props.onGateClick)\n  const onGateMouseDown = useRefCallback(props.onGateMouseDown)\n\n  const onPinMouseUp = useRefCallback(props.onPinMouseUp)\n  const onPinMouseDown = useRefCallback(props.onPinMouseDown)\n\n  const onUserInputChanged = useRefCallback(props.onUserInputChanged)\n\n  return (\n    <>\n      {\n        /* Wires */\n        gates.map(\n          (gate) => gate.inputs\n            .filter((pin) => pin.connections.length > 0)\n            .map((pin) =>\n              <Wire\n                key={`${pin.id}-${pin.connections[0].id}`}\n                x0={pinPositions[pin.connections[0]].x}\n                y0={pinPositions[pin.connections[0]].y}\n                x1={pinPositions[pin.id].x}\n                y1={pinPositions[pin.id].y}\n              />))\n      }\n\n      {\n        /* Gates */\n        gates.map((gate) => {\n          const x = (gate.x || 0) +\n            (props.selection[gate.id] ? moveAmount[0] : 0)\n          const y = (gate.y || 0) +\n            (props.selection[gate.id] ? moveAmount[1] : 0)\n\n          const Component = theme.getGateComponent(gate)\n\n          return (\n            <Component\n              simulation={simulation}\n              gate={gate}\n              x={x}\n              y={y}\n              key={gate.id}\n              theme={theme}\n              selected={selection[gate.id]}\n              editable={isEditable}\n              onGateClick={onGateClick}\n              onGateMouseDown={onGateMouseDown}\n              onPinMouseDown={onPinMouseDown}\n              onPinMouseUp={onPinMouseUp}\n              onUserInputChanged={onUserInputChanged}\n            />\n          )\n        })\n      }\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nconst useStyles = makeStyles((theme) => ({\n  selectionBox: {\n    position: 'fixed',\n    background: fade(theme.palette.primary.main, 0.3),\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component for a selection box dragged by the user.\n */\nfunction SelectionBox (props) {\n  const [selectionEnd, setSelectionEnd] = useState(props.selectionStart)\n\n  const selectionStart = props.selectionStart\n  const onSelectionChanged = props.onSelectionChanged\n\n  const classes = useStyles()\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      const end = [e.clientX, e.clientY]\n      setSelectionEnd(end)\n      onSelectionChanged(\n        [\n          Math.min(selectionStart[0], end[0]),\n          Math.min(selectionStart[1], end[1])\n        ],\n        [\n          Math.max(selectionStart[0], end[0]),\n          Math.max(selectionStart[1], end[1])\n        ])\n    }\n\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [selectionStart, onSelectionChanged])\n\n  const hasMoved = (\n    selectionEnd[0] !== props.selectionStart[0] &&\n    selectionEnd[1] !== props.selectionStart[1])\n\n  /*\n   * The selection box should only be visible after the user moves their mouse.\n   */\n  return hasMoved && (\n    <div\n      className={classes.selectionBox} style={{\n        left: Math.min(props.selectionStart[0], selectionEnd[0]),\n        top: Math.min(props.selectionStart[1], selectionEnd[1]),\n        width: Math.abs(selectionEnd[0] - props.selectionStart[0]),\n        height: Math.abs(selectionEnd[1] - props.selectionStart[1])\n      }}\n    />\n  )\n}\n\nexport default SelectionBox\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\n\nimport Wire from './Wire'\nimport Circuit from './Circuit'\nimport SelectionBox from './SelectionBox'\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    width: '8.5in',\n    height: '11in',\n    position: 'relative'\n  }\n}))\n\n/*\n * A react component for the wire currently being dragged by the user.\n */\nfunction PreviewWire (props) {\n  const [end, setEnd] = useState([props.x0, props.y0])\n\n  const clientToPage = props.clientToPage\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      setEnd(clientToPage([e.clientX, e.clientY]))\n    }\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [clientToPage])\n\n  if (props.isOutputPin) {\n    return (\n      <Wire x0={props.x0} y0={props.y0} x1={end[0]} y1={end[1]} />\n    )\n  } else {\n    return (\n      <Wire x1={props.x0} y1={props.y0} x0={end[0]} y0={end[1]} />\n    )\n  }\n}\n\nconst Page = React.forwardRef((props, ref) => {\n  const selection = props.selection\n  const theme = props.theme\n\n  const simulation = props.simulation\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  const onCircuitChanged = props.onCircuitChanged\n\n  const onSelectionChanged = props.onSelectionChanged\n  const onUserInputChanged = props.onUserInputChanged\n\n  const classes = useStyles()\n\n  const [selectionStart, setSelectionStart] = useState(null)\n\n  /* Object containing IDs of gates currently being selected. */\n  const [toBeAddedToSelection, setToBeAddedToSelection] = useState({})\n\n  /* Whether or not the selected items are being dragged. */\n  const [isDragging, setIsDragging] = useState(false)\n\n  /*\n   * Whether or not the selected items were dragged (to prevent the click event\n   * from being fired after a drag.\n   */\n  const [didDrag, setDidDrag] = useState(false)\n\n  /* The start and end positions of the drag in client coordinates. */\n  const [moveStart, setMoveStart] = useState([0, 0])\n  const [moveEnd, setMoveEnd] = useState([0, 0])\n\n  const [wireStartPin, setWireStartPin] = useState(null)\n\n  /* Whether or not the pin being dragged from is an output pin. */\n  const [wireStartPinIsOutput, setWireStartPinIsOutput] = useState(false)\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  /* The amount to move teh selected components in page coordinates. */\n  const moveAmount = isDragging\n    ? [\n      (moveEnd[0] - moveStart[0]) / 96,\n      (moveEnd[1] - moveStart[1]) / 96\n    ]\n    : [0, 0]\n\n  /*\n   * Function to convert from client coordianates to coordinates on the page.\n   */\n  const clientToPage = (coord) => {\n    const bounds = ref.current.getBoundingClientRect()\n    return [\n      (coord[0] - bounds.left) / 96,\n      (coord[1] - bounds.top) / 96\n    ]\n  }\n\n  /* Called when the bounds of the selection box changes. */\n  const onSelectionBoxChanged = (ul, br) => {\n    /* Calculate the selection on the page. */\n\n    const a = clientToPage(ul)\n    const b = clientToPage(br)\n\n    let clone = null\n\n    /* Determine if any items were added to the selection. */\n    gates.forEach((gate) => {\n      const width = props.theme.getWidth(gate)\n      const height = props.theme.getHeight(gate)\n\n      const isOverlapping = (\n        gate.x >= a[0] && gate.y >= a[1] &&\n        gate.x + width <= b[0] && gate.y + height <= b[1])\n\n      if (isOverlapping && !toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        clone[gate.id] = true\n      } else if (!isOverlapping && toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        delete clone[gate.id]\n      }\n    })\n\n    if (clone) {\n      setToBeAddedToSelection(clone)\n    }\n  }\n\n  const onGateClick = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      if (!didDrag) {\n        const newSelection = {}\n        if (e.shiftKey) {\n          Object.assign(newSelection, selection)\n        }\n        newSelection[gate.id] = !newSelection[gate.id]\n        onSelectionChanged(newSelection)\n        e.stopPropagation()\n      }\n    }\n  }, [\n    selection,\n    isEditable,\n    didDrag,\n    onSelectionChanged\n  ])\n\n  const onGateMouseDown = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      const isSelectionEmpty = Object.keys(selection).length === 0\n\n      setMoveStart([e.clientX, e.clientY])\n      setMoveEnd([e.clientX, e.clientY])\n      setDidDrag(false)\n\n      /* If no gates have been selected, select the gate. */\n      if (isSelectionEmpty) {\n        onSelectionChanged({ [gate.id]: true })\n      }\n\n      if (selection[gate.id] || isSelectionEmpty) {\n        setIsDragging(true)\n      }\n      e.stopPropagation()\n    }\n    e.preventDefault()\n  }, [\n    isEditable,\n    selection,\n    setMoveStart,\n    setMoveEnd,\n    setDidDrag,\n    onSelectionChanged\n  ])\n\n  const onMove = useCallback((moveAmount) => {\n    const clone = { ...circuit }\n    clone.gates = clone.gates.map((gate) => {\n      if (selection[gate.id]) {\n        /* Copy the gate. */\n        gate = { ...gate }\n        gate.x += moveAmount[0]\n        gate.y += moveAmount[1]\n      }\n      return gate\n    })\n    onCircuitChanged(clone)\n  }, [circuit, selection, onCircuitChanged])\n\n  const addWire = useCallback((from, to) => {\n    const clone = { ...circuit }\n\n    /*\n     * Function that takes in a pin, clones it and adds a connection if it is\n     * the from or to pin. Returns the pin otherwise.\n     */\n    const updatePin = (pin, isOutputPin) => {\n      if (isOutputPin || pin.connections.length === 0) {\n        if (pin.id === from) {\n          return { ...pin, connections: [...pin.connections, to] }\n        } else if (pin.id === to) {\n          return { ...pin, connections: [...pin.connections, from] }\n        }\n      }\n      return pin\n    }\n\n    /* Only update if the input pin has no connections. */\n    let shouldUpdate = false\n\n    let inputGateId, outputGateId\n\n    clone.gates = clone.gates.map((gate) => {\n      let hasPin = false\n      const inputs = gate.inputs.map((pin) => {\n        const r = updatePin(pin)\n        if (r !== pin) {\n          inputGateId = gate.id\n          hasPin = true\n        }\n        return r\n      })\n\n      /* If the gate has the pin, clone the gate. */\n      if (hasPin) {\n        shouldUpdate = true\n        return { ...gate, inputs }\n      } else {\n        return gate\n      }\n    })\n\n    if (shouldUpdate) {\n      /* Update output pin. */\n      clone.gates = clone.gates.map((gate) => {\n        let hasPin = false\n        const outputs = gate.outputs.map((pin) => {\n          const r = updatePin(pin, true)\n          if (r !== pin) {\n            outputGateId = gate.id\n            hasPin = true\n          }\n          return r\n        })\n\n        /* If the gate has the pin, clone it. */\n        if (hasPin) {\n          return { ...gate, outputs }\n        } else {\n          return gate\n        }\n      })\n\n      /* Only add the wire if the input and output are not on the same gate. */\n      if (inputGateId !== outputGateId) {\n        onCircuitChanged(clone)\n      }\n    }\n  }, [circuit, onCircuitChanged])\n\n  const onPinMouseDown = useCallback((e, pin, isOutputPin) => {\n    if (isEditable && e.button === 0) {\n      /* If the pin is an output pin, start dragging a wire from it. */\n      if (isOutputPin) {\n        setWireStartPin(pin.id)\n        setWireStartPinIsOutput(isOutputPin)\n      } else {\n        /*\n         * If the pin is an input pin and already has a connection, remove the\n         * connection and start dragging from the connected pin.\n         */\n        if (pin.connections.length > 0) {\n          const clone = { ...circuit }\n          clone.gates = clone.gates.map((gate) => {\n            const inIndex = gate.inputs.indexOf(pin)\n            const outIndex = gate.outputs.findIndex(\n              (output) => output.id === pin.connections[0])\n\n            if (inIndex !== -1) {\n              const gateClone = {\n                ...gate,\n                inputs: [...gate.inputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.inputs[inIndex] = { ...pin, connections: [] }\n\n              return gateClone\n            } else if (outIndex !== -1) {\n              const output = gate.outputs[outIndex]\n              const gateClone = {\n                ...gate,\n                outputs: [...gate.outputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.outputs[outIndex] = {\n                ...output,\n                connections: output.connections.filter((id) => id !== pin.id)\n              }\n\n              return gateClone\n            } else {\n              return gate\n            }\n          })\n\n          /* Update the circuit */\n          onCircuitChanged(clone)\n\n          setWireStartPin(pin.connections[0])\n          setWireStartPinIsOutput(true)\n        } else {\n          setWireStartPin(pin.id)\n          setWireStartPinIsOutput(isOutputPin)\n        }\n      }\n    }\n    e.stopPropagation()\n    e.preventDefault()\n  }, [\n    circuit,\n    isEditable,\n    setWireStartPin,\n    setWireStartPinIsOutput,\n    onCircuitChanged\n  ])\n\n  const onPinMouseUp = useCallback((e, pin, isOutputPin) => {\n    if (isEditable) {\n      /*\n       * Add a wire if the wire start pin is different from the wire\n       * end pin, and both of the pins are not output pins\n       */\n      if (wireStartPin !== null &&\n          wireStartPin !== pin.id &&\n          isOutputPin ^ wireStartPinIsOutput) {\n        addWire(wireStartPin, pin.id)\n        e.stopPropagation()\n        e.preventDefault()\n      }\n      setWireStartPin(null)\n    }\n  }, [isEditable, wireStartPin, wireStartPinIsOutput, addWire])\n\n  /*\n   * The total selection, including elements currently being selected as well as\n   * the previously selected elements.\n   */\n  const totalSelection = { ...props.selection, ...toBeAddedToSelection }\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    circuit.gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, circuit])\n\n  /*\n   * Add a mouseup event listener to the window. We need to do this in case the\n   * user drags outside the window.\n   */\n  useEffect(() => {\n    const onMouseUp = (e) => {\n      if (!isEditable) {\n        e.preventDefault()\n      } else if (e.button === 0) {\n        if (isDragging) {\n          onMove(moveAmount)\n          setIsDragging(false)\n          e.stopPropagation()\n        } else if (selectionStart) {\n          setToBeAddedToSelection({})\n          onSelectionChanged(totalSelection)\n        }\n        setSelectionStart(null)\n\n        if (wireStartPin !== null) {\n          setWireStartPin(null)\n        }\n        e.preventDefault()\n      }\n    }\n\n    window.addEventListener('mouseup', onMouseUp)\n    return () => window.removeEventListener('mouseup', onMouseUp)\n  })\n\n  useEffect(() => {\n    if (isEditable) {\n      const onMouseMove = (e) => {\n        if (isDragging) {\n          setMoveEnd([\n            e.clientX,\n            e.clientY\n          ])\n        }\n\n        if (!didDrag) {\n          setDidDrag(true)\n        }\n      }\n      window.addEventListener('mousemove', onMouseMove)\n      return () => window.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [isDragging, didDrag, isEditable])\n\n  return (\n    <Paper\n      elevation={3}\n      square\n      className={classes.page}\n      ref={ref}\n      onMouseDown={(e) => {\n        if (isEditable && e.button === 0) {\n          setSelectionStart([e.clientX, e.clientY])\n\n          /* Reset the selection if the user did not click shift. */\n          if (!e.shiftKey) {\n            onSelectionChanged({})\n          }\n        }\n\n        document.activeElement.blur()\n        e.preventDefault()\n      }}\n    >\n      {\n        isEditable && wireStartPin !== null && (\n          <PreviewWire\n            x0={pinPositions[wireStartPin].x}\n            y0={pinPositions[wireStartPin].y}\n            clientToPage={clientToPage}\n            isOutputPin={wireStartPinIsOutput}\n          />\n        )\n      }\n      <Circuit\n        page={props.page}\n        circuit={circuit}\n        editable={isEditable}\n        selection={totalSelection}\n        theme={theme}\n        moveAmount={moveAmount}\n        onPinMouseDown={onPinMouseDown}\n        onPinMouseUp={onPinMouseUp}\n        onGateClick={onGateClick}\n        onGateMouseDown={onGateMouseDown}\n        onUserInputChanged={onUserInputChanged}\n        simulation={simulation}\n      />\n      {\n        isEditable && selectionStart && (\n          <SelectionBox\n            selectionStart={selectionStart}\n            onSelectionChanged={onSelectionBoxChanged}\n          />\n        )\n      }\n    </Paper>\n  )\n})\n\nexport default Page\n","import React, { useState } from 'react'\n\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport Collapse from '@material-ui/core/Collapse'\n\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\n/**\n * A list item capable of being expanded or collapsed.\n */\nexport default function ListSection (props) {\n  const [isExpanded, setIsExpanded] = useState(true)\n  return (\n    <>\n      <ListItem button onClick={() => setIsExpanded(!isExpanded)}>\n        <ListItemIcon>\n          {\n            isExpanded\n              ? <ExpandLessIcon />\n              : <ExpandMoreIcon />\n          }\n        </ListItemIcon>\n        <ListItemText>{props.title}</ListItemText>\n      </ListItem>\n      <Collapse in={isExpanded}>\n        <ListItem>\n          {props.children}\n        </ListItem>\n      </Collapse>\n    </>\n  )\n}\n","/*\n * Utility functions\n */\n\n/** Helper function to tell if an object is primitive. */\nexport function isPrimitive (object) {\n  return object !== Object(object)\n}\n\n/** Helper function to compare objects. */\nexport function deepEquals (a, b) {\n  if (a === b) {\n    return true\n  } else if (isPrimitive(a) || isPrimitive(b)) {\n    return a === b\n  } else {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false\n    } else {\n      for (const key in a) {\n        if (!(key in b) || !deepEquals(a[key], b[key])) {\n          return false\n        }\n      }\n      return true\n    }\n  }\n}\n\n/*\n * Prompts the user to save the given text as the given filename.\n */\nexport const download = (filename, text) => {\n  var element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`)\n  element.setAttribute('download', filename)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\n/*\n * Prompts the user to upload a file. Returns a promise that resolves to the\n * text loaded from the file.\n */\nexport const upload = () => {\n  return new Promise((resolve, reject) => {\n    var element = document.createElement('input')\n    element.setAttribute('type', 'file')\n\n    element.style.display = 'none'\n    document.body.appendChild(element)\n\n    element.addEventListener(\n      'change',\n      function () {\n        this.files[0].text()\n          .then((data) => resolve(data))\n          .catch((error) => reject(error))\n      },\n      false)\n\n    element.click()\n\n    document.body.removeChild(element)\n  })\n}\n","import packageJson from '../package.json'\nimport { BehaviorSubject, combineLatest, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { deepEquals } from './utils'\n\n/*\n * An object mapping gate types to functions.\n */\nconst nextOutputFunctions = {\n  and: (gate, state) => [getInputs(gate, state).every((x) => x)],\n  or: (gate, state) => [getInputs(gate, state).some((x) => x)],\n  xor: (gate, state) => [\n    getInputs(gate, state).filter((x) => x).length % 2 !== 0\n  ],\n  constant: (gate, state) => [gate.value],\n  led: () => [],\n  text: () => [],\n  buffer: (gate, state) => getInputs(gate, state),\n  switch: (gate, state) => [Boolean(getUserInput(gate, state))],\n  sender: () => [],\n  receiver: (gate, state, circuit) => getInputs(\n    findSender(gate, circuit),\n    state\n  ),\n  mux: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const index = inputs\n      .slice(0, gate.n)\n      .reduce((t, c, i) => t + Number(c) * (1 << i), 0)\n    return [inputs[gate.n + index]]\n  },\n  demux: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const index = inputs\n      .slice(0, gate.n)\n      .reduce((t, c, i) => t + Number(c) * (1 << i), 0)\n    const outputs = new Array(1 << gate.n)\n    outputs.fill(false)\n    outputs[index] = inputs[gate.n]\n    return outputs\n  },\n  sevenSegment: () => [],\n  srLatch: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const s = inputs[2]\n    const e = inputs[1]\n    const r = inputs[0]\n\n    const q = outputs[1]\n\n    if (e && s && !r) {\n      return [false, true]\n    } else if (e && !s && r) {\n      return [true, false]\n    } else {\n      return [!q, q]\n    }\n  },\n  dLatch: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const d = inputs[1]\n    const e = inputs[0]\n\n    const q = outputs[1]\n    if (e) {\n      return [!d, d]\n    } else {\n      return [!q, q]\n    }\n  },\n  dFlipFlop: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const cPrev = state.prevState && getInputs(gate, state.prevState)[0]\n    const c = inputs[0]\n    const d = inputs[1]\n\n    const q = outputs[1]\n\n    const isRisingEdge = cPrev !== c && c === true\n\n    if (isRisingEdge) {\n      return [!d, d]\n    } else {\n      return [!q, q]\n    }\n  },\n  srDFlipFlop: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const r = inputs[0]\n    const cPrev = state.prevState && getInputs(gate, state.prevState)[1]\n    const c = inputs[1]\n    const d = inputs[2]\n    const s = inputs[3]\n\n    const q = outputs[1]\n\n    const isRisingEdge = cPrev !== c && c === true\n\n    /*\n     * Truth table taken from:\n     * https://en.wikipedia.org/wiki/Flip-flop_(electronics)\n     */\n    if (s && !r) {\n      return [false, true]\n    } else if (!s && r) {\n      return [true, false]\n    } else if (s && r) {\n      return [true, true]\n    } else if (isRisingEdge) {\n      return [!d, d]\n    } else {\n      return [!q, q]\n    }\n  }\n}\n\n/** Connect to logic pins by a wire. */\nfunction connect (a, b) {\n  a.connections.push(b.id)\n  b.connections.push(a.id)\n}\n\n/**\n * Creates a circuit with the given gates.\n */\nfunction circuit (gates) {\n  return {\n    gates\n  }\n}\n\n/**\n * Creates a logic pin. A pin may be inverted by setting its isInverted field.\n */\nfunction pin () {\n  return {\n    id: nextId(),\n    connections: []\n  }\n}\n\n/** Creates an and gate. */\nfunction andGate () {\n  return {\n    id: nextId(),\n    type: 'and',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an or gate. */\nfunction orGate () {\n  return {\n    id: nextId(),\n    type: 'or',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an xor gate. */\nfunction xorGate () {\n  return {\n    id: nextId(),\n    type: 'xor',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates a constant gate (for simulating ground or 1). */\nfunction constantGate (value) {\n  return {\n    id: nextId(),\n    type: 'constant',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()]),\n    value: value || false\n  }\n}\n\n/** Creates a switch gate that the user can interact with. */\nfunction switchGate () {\n  return {\n    id: nextId(),\n    type: 'switch',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an LED. */\nfunction led () {\n  return {\n    id: nextId(),\n    type: 'led',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/** Creates a buffer (a gate that simply passes its input to its output). */\nfunction buffer () {\n  return {\n    id: nextId(),\n    type: 'buffer',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a sender with the given label. A receiver with the same label will\n * receive the inputs of the sender.\n */\nfunction sender (label) {\n  return {\n    id: nextId(),\n    type: 'sender',\n    label: label || 'A',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/**\n * Creates a receiver with the given label. The receiver will have the same\n * input values as the sender with the given label.\n */\nfunction receiver (label) {\n  return {\n    id: nextId(),\n    type: 'receiver',\n    label: label || 'A',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a multiplexor with the given number of select lines. The first n\n * items in gate.inputs are the select lines (least significant bit first), the\n * next n^2 are the data lines. The number of select lines, n, is stored in the\n * n field of the returned object.\n */\nfunction mux (n) {\n  const inputs = []\n  for (let i = 0; i < n; i++) {\n    inputs.push(pin())\n  }\n  for (let i = 0; i < (1 << n); i++) {\n    inputs.push(pin())\n  }\n  return {\n    id: nextId(),\n    type: 'mux',\n    n,\n    inputs: Object.seal(inputs),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a demultiplexor with the given number of select lines. The first n\n * items in gates.inputs are the selectl ines (least significant bit first),\n * followed by the data line. The number of select lines, n, is stored in the n\n * field of the returned object. The returned gate has 2^n outputs.\n */\nfunction demux (n) {\n  const inputs = [pin()]\n  const outputs = []\n  for (let i = 0; i < n; i++) {\n    inputs.push(pin())\n  }\n  for (let i = 0; i < (1 << n); i++) {\n    outputs.push(pin())\n  }\n  return {\n    id: nextId(),\n    type: 'demux',\n    n,\n    inputs: Object.seal(inputs),\n    outputs: Object.seal(outputs)\n  }\n}\n\nfunction sevenSegment (n) {\n  return {\n    id: nextId(),\n    type: 'sevenSegment',\n    inputs: Object.seal([\n      pin(),\n      pin(),\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([])\n  }\n}\n\n/**\n * Creates a gated SR-latch component, where inputs[0] is R, inputs[1] is E,\n * inputs[2] is S, outputs[0] is !Q, outputs[1] is Q.\n */\nfunction srLatch () {\n  return {\n    id: nextId(),\n    type: 'srLatch',\n    inputs: Object.seal([\n      pin(),\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a D-latch, where inputs[0] is E, inputs[1] is D, outputs[0] is !Q,\n * outputs[1] is Q.\n */\nfunction dLatch () {\n  return {\n    id: nextId(),\n    type: 'dLatch',\n    inputs: Object.seal([\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a D-flip-flop, where inputs[0] is C, inputs[1] is D.\n */\nfunction dFlipFlop () {\n  return {\n    id: nextId(),\n    type: 'dFlipFlop',\n    inputs: Object.seal([\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a D-flip-flop with S and R pins, where inputs[0] is R, inputs[1] is\n * C, inputs[2] is D, inputs[3] is S.\n */\nfunction srDFlipFlop () {\n  return {\n    id: nextId(),\n    type: 'srDFlipFlop',\n    inputs: Object.seal([\n      pin(),\n      pin(),\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a text component, which displays text on the screen. It has a\n * text field, which contains the text to be displayed.\n */\nfunction text (string) {\n  return {\n    id: nextId(),\n    type: 'text',\n    inputs: Object.seal([]),\n    outputs: Object.seal([]),\n    text: string,\n    width: 2,\n    height: 0.5\n  }\n}\n\n/**\n * Computes a state object to represent the current state of the simulation for\n * the given circuit. If prevState is passed, returns the next state after the\n * given state.\n *\n * The state object is an object containing an outputs field, which is an object\n * that maps each pin ID to a boolean value. For example, if a pin with ID 2 has\n * an output of true, the state object would look something like this:\n * { outputs: { 2: true } }\n *\n * To calculate the inputs and outputs of individual gates, the getInputs and\n * getOutputs helper functions can be used.\n *\n * The input from the user (for example, whether a switch is switched or not) is\n * stored in the inputs field, that maps a gate ID to a user input object. The\n * format of the input depends on the gate itself.\n *\n * The state also keeps track of its state in the previous simulation frame,\n * stored in the prevState field of the state. This is only used in the flip\n * flop components to keep track of edge triggered events.\n */\nfunction nextState (circuit, prevState) {\n  const state = {\n    outputs: {},\n    inputs: {}\n  }\n\n  /* Copy the previous state if it's provided. */\n  if (prevState) {\n    state.prevState = { ...prevState }\n    delete state.prevState.prevState\n  }\n\n  if (prevState) {\n    for (const gate of circuit.gates) {\n      /* Calculate the next output. */\n      const nextOutputs = nextOutputFunctions[gate.type](\n        gate,\n        prevState,\n        circuit\n      )\n\n      for (let i = 0; i < nextOutputs.length; i++) {\n        state.outputs[gate.outputs[i].id] = (\n          nextOutputs[i] ^ gate.outputs[i].isInverted) === 1\n      }\n    }\n\n    Object.assign(state.inputs, prevState.inputs)\n  } else {\n    /* Initialize all outputs to false. */\n    for (const gate of circuit.gates) {\n      for (const pin of gate.outputs) {\n        state.outputs[pin.id] = false\n      }\n    }\n  }\n\n  return state\n}\n\n/**\n * Returns true if the given simulation states are the same.\n */\nfunction statesEqual (a, b) {\n  return deepEquals(a, b)\n}\n\n/**\n * Returns true if the given state changed from its previous state.\n */\nfunction stateChanged (state) {\n  if (!state) {\n    return true\n  } else {\n    const { prevState, ...currentState } = state\n    return !deepEquals(prevState, currentState)\n  }\n}\n\n/**\n * Returns the sender gate for the given receiver gate.\n */\nfunction findSender (receiver, circuit) {\n  return circuit.gates.find(\n    (gate) => gate.type === 'sender' && gate.label === receiver.label\n  )\n}\n\n/**\n * Returns a list of input booleans for the gate given the current simulation\n * state.\n */\nfunction getInputs (gate, state) {\n  return gate.inputs\n    .map((pin) => (state.outputs[pin.connections[0]] ^ pin.isInverted) === 1)\n}\n\n/**\n * Returns a list of output booleans for the gate given the current simulation\n * state.\n */\nfunction getOutputs (gate, state) {\n  return gate.outputs.map((pin) => state.outputs[pin.id])\n}\n\n/**\n * Returns the user input for the gate given the current simulation state.\n */\nfunction getUserInput (gate, state) {\n  return state.inputs[gate.id]\n}\n\n/**\n * Sets the user input for the gate for the current simulation state.\n */\nfunction setUserInput (gate, state, value) {\n  state.inputs[gate.id] = value\n}\n\n/**\n * Skip forward n simulation states given a circuit, n, and the (optional)\n * current state. This function simply calls nextState(circuit, state) n times.\n */\nfunction fastForward (circuit, n, state) {\n  for (let i = 0; i < n; i++) {\n    state = nextState(circuit, state)\n  }\n  return state\n}\n\n/*\n * Function to return a unique id. This should only be used within this JS file.\n * The ID wraps around to 0 once Number.MAX_SAFE_INTEGER is reached. This is\n * assumed to be okay since Number.MAX_SAFE_INTEGER is so large.\n */\nlet currentId = 0\nfunction nextId () {\n  if (currentId >= Number.MAX_SAFE_INTEGER) {\n    currentId = 0\n  }\n\n  return currentId++\n}\n\n/*\n * This function renumbers the IDs of the given circuit so that there are no\n * collisions. This should be called any time a circuit is loaded to avoid\n * collisions. It returns the circuit.\n */\nfunction renumber (circuit) {\n  const clone = { ...circuit }\n  let maxId = currentId\n\n  const calcNewId = (id) => currentId < (Number.MAX_SAFE_INTEGER - id)\n    ? id + currentId\n    : (id - Number.MAX_SAFE_INTEGER) + currentId\n\n  const updateId = (object) => {\n    const clone = {\n      ...object,\n      id: calcNewId(object.id)\n    }\n    if (clone.id > maxId) {\n      maxId = clone.id\n    }\n\n    if (clone.connections) {\n      clone.connections = clone.connections.map(calcNewId)\n    }\n    return clone\n  }\n\n  clone.gates = clone.gates.map((gate) => {\n    const r = updateId(gate)\n    r.inputs = r.inputs.map(updateId)\n    r.outputs = r.outputs.map(updateId)\n    return r\n  })\n\n  currentId = maxId + 1\n\n  return clone\n}\n\n/**\n * Create an object containing the IDs of all valid pins for the given gates.\n */\nconst getValidPins = (gates) => (\n  Object.fromEntries(gates.reduce(\n    (t, gate) => t.concat(\n      gate.inputs.map((pin) => pin.id),\n      gate.outputs.map((pin) => pin.id)),\n    []\n  ).map((id) => [id, true]))\n)\n\n/**\n * Returns a new list of gates from the given list of gates with the\n * connections to invalid pins removed.\n */\nconst removeInvalidConnections = (gates) => {\n  const validPins = getValidPins(gates)\n\n  /* Remove all connections that point to a deleted pin. */\n  return gates.map((gate) => {\n    const gateClone = { ...gate }\n    const updatePin = (pin) => {\n      return {\n        ...pin,\n        connections: pin.connections.filter((id) => validPins[id])\n      }\n    }\n\n    gateClone.inputs = gateClone.inputs.map(updatePin)\n    gateClone.outputs = gateClone.outputs.map(updatePin)\n    return gateClone\n  })\n}\n\n/**\n * Returns a list of all the labels that are used by 2 or more senders in the\n * given list of gates, sorted alphabetically. This is useful as an error check\n * to make sure there are no duplicate senders.\n */\nconst getDuplicateSenderLabels = (gates) => {\n  const senderCounts = {}\n\n  gates.forEach((gate) => {\n    if (gate.type === 'sender') {\n      senderCounts[gate.label] = (senderCounts[gate.label] || 0) + 1\n    }\n  })\n\n  return Object.entries(senderCounts)\n    .filter((x) => x[1] > 1)\n    .map((x) => x[0])\n    .sort()\n}\n\n/**\n * Stores the project in a string. The project can be loaded using the\n * loadProject function.\n */\nconst dumpProject = (circuit, currentPage) => {\n  return JSON.stringify({\n    version: packageJson.version,\n    circuit,\n    currentPage\n  })\n}\n\n/**\n * Loads the project from a string. Returns an object with the circuit in the\n * circuit field, the current page in the currentPage field, and the Flux Logic\n * version in the version field.\n */\nconst loadProject = (data) => {\n  return JSON.parse(data)\n}\n\n/**\n * Creates a simulation with the given properties.\n *\n * @param {Circuit} props.circuit - The circuit to run the simulation for.\n * @param {State} props.state - The initial state of the simulation.\n */\nfunction simulation (props) {\n  const { state: initialState, circuit } = props\n  let state = initialState\n  const stateSubject = new BehaviorSubject(state)\n  const pinSubjects = new Map()\n  const outputSubjects = new Map()\n  const inputSubjects = new Map()\n  const userInputs = new Map()\n  const userInputsSubscriptions = new Map()\n\n  const getPinOutput = (id, state) => state ? state.outputs[id] : false\n\n  stateSubject.subscribe(state => {\n    pinSubjects.forEach((subject, pinId) => {\n      /* Emit for pins that changed. */\n      if (\n        getPinOutput(pinId, state) !== getPinOutput(pinId, state.prevState)\n      ) {\n        subject.next(getPinOutput(pinId, state))\n      }\n    })\n  })\n\n  /*\n   * Creates a user input subject if it does not exist already and returns it.\n   */\n  const getUserInput = (gate) => {\n    if (!userInputs.has(gate.id)) {\n      const subject = new BehaviorSubject()\n      userInputs.set(gate.id, subject)\n      subject.subscribe(value => {\n        state = nextState(circuit, state)\n        setUserInput(gate, state, value)\n        stateSubject.next(state)\n      })\n    }\n    return userInputs.get(gate.id)\n  }\n\n  const getPin = pinId => {\n    if (!pinSubjects.has(pinId)) {\n      pinSubjects.set(\n        pinId,\n        new BehaviorSubject(getPinOutput(pinId, state))\n      )\n    }\n    return pinSubjects.get(pinId)\n  }\n\n  return {\n    /**\n     * Returns an observable representing getOutputs(gate, currentState).\n     */\n    getOutputs (gate) {\n      if (!outputSubjects.has(gate.id)) {\n        const gatePinSubjects = gate.inputs.map(pin => getPin(pin.id))\n        outputSubjects.set(gate.id, combineLatest(gatePinSubjects))\n      }\n      return outputSubjects.get(gate.id)\n    },\n\n    /**\n     * Returns an observable representing getInputs(gate, currentState).\n     */\n    getInputs (gate) {\n      if (!inputSubjects.has(gate.id)) {\n        const gatePinSubjects = (\n          gate.inputs\n            .map(pin => (\n              pin.connections[0] ? getPin(pin.connections[0]) : of(false)\n            )).map(observable => (\n              observable.pipe(map(x => (x ^ pin.isInverted) === 1))\n            ))\n        )\n        inputSubjects.set(gate.id, combineLatest(gatePinSubjects))\n      }\n      return inputSubjects.get(gate.id)\n    },\n\n    /**\n     * Returns an observable for the current state.\n     */\n    getState () {\n      return stateSubject.asObservable()\n    },\n\n    /**\n     * Advances the simulation one step.\n     */\n    nextState () {\n      if (stateChanged(state)) {\n        state = nextState(circuit, state)\n        stateSubject.next(state)\n      }\n    },\n\n    /**\n     * Advances the simulation multiple steps.\n     */\n    fastForward (n) {\n      for (let i = 0; i < n; i++) {\n        if (stateChanged(state)) {\n          state = nextState(circuit, state)\n          stateSubject.next(state)\n        } else {\n          break\n        }\n      }\n    },\n\n    /**\n     * Sets the source for the user inputs to the given gate as the given\n     * observable. If there was already a source, it is replaced.\n     */\n    setUserInput (gate, observable) {\n      if (userInputsSubscriptions.has(gate.id)) {\n        userInputsSubscriptions.get(gate.id).unsubscribe()\n      }\n      userInputsSubscriptions.set(\n        gate.id,\n        observable.subscribe((...args) => {\n          getUserInput(gate).next(...args)\n        })\n      )\n    },\n\n    getUserInput (gate, value) {\n      return getUserInput(gate).asObservable()\n    }\n  }\n}\n\nexport {\n  /* Simulation. */\n  nextState,\n  getOutputs,\n  getInputs,\n  getUserInput,\n  setUserInput,\n  fastForward,\n  statesEqual,\n  stateChanged,\n\n  /* Circuit creation. */\n  renumber,\n  connect,\n  circuit,\n  andGate,\n  orGate,\n  xorGate,\n  constantGate,\n  switchGate,\n  sender,\n  receiver,\n  led,\n  buffer,\n  pin,\n  mux,\n  demux,\n  sevenSegment,\n  srLatch,\n  dLatch,\n  srDFlipFlop,\n  dFlipFlop,\n  text,\n  simulation,\n\n  /* Utils. */\n  removeInvalidConnections,\n  getValidPins,\n  findSender,\n  getDuplicateSenderLabels,\n\n  /* Saving and loading. */\n  loadProject,\n  dumpProject\n}\n","import React from 'react'\n\nimport Tooltip from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport List from '@material-ui/core/List'\n\nimport ListSection from './ListSection'\n\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SenderSvg from './assets/sender.svg'\nimport ReceiverSvg from './assets/receiver.svg'\nimport MuxSvg from './assets/mux.svg'\nimport DemuxSvg from './assets/demux.svg'\nimport SevenSegmentSvg from './assets/seven-segment.svg'\nimport SrLatchSvg from './assets/sr-latch.svg'\nimport DLatchSvg from './assets/d-latch.svg'\nimport DFlipFlopSvg from './assets/d-flip-flop.svg'\nimport SrDFlipFlopSvg from './assets/sr-d-flip-flop.svg'\nimport TextSvg from './assets/text.svg'\n\nimport PinInvertedSvg from './assets/pin-inverted.svg'\n\nimport Wire from './Wire'\n\nimport * as logic from './logic'\n\nfunction PaletteItem (props) {\n  return (\n    <Grid item xs={3}>\n      <Tooltip title={`Add ${props.text}`}>\n        <Button onClick={props.onClick}>\n          <div\n            style={{\n              position: 'relative',\n              width: '0.5in',\n              height: '0.5in',\n              overflow: 'hidden'\n            }}\n          >\n            {\n              props.inverted && (\n                <Wire\n                  x0={0.25}\n                  y0={0.25}\n                  x1={0.5 - 0.0625}\n                  y1={0.25}\n                />\n              )\n            }\n\n            {\n              props.inverted && (\n                <img\n                  src={PinInvertedSvg}\n                  alt=''\n                  style={{\n                    position: 'absolute',\n                    left: `${0.5 - 0.125}in`,\n                    top: `${0.25 - 0.0625}in`\n                  }}\n                />\n              )\n            }\n\n            <img\n              src={props.svg}\n              alt=''\n              style={{\n                position: 'absolute',\n                left: props.inverted ? '-0.0625in' : 0,\n                top: 0\n              }}\n            />\n          </div>\n        </Button>\n      </Tooltip>\n    </Grid>\n  )\n}\n\n/**\n * A palette for placing components.\n * Props:\n *     - onSelect(factory)\n *           A callback called when the user selects an item. The factory\n *           parameter is a function that constructs a new logic gate.\n */\nconst Palette = React.memo((props) => {\n  const invert = (gate) => {\n    gate.outputs[0].isInverted = true\n    return gate\n  }\n  return (\n    <List>\n      <ListSection title='Basic Gates'>\n        <Grid container>\n          <PaletteItem\n            svg={AndGateSvg}\n            text='AND gate'\n            onClick={() => props.onSelect(logic.andGate)}\n          />\n          <PaletteItem\n            svg={AndGateSvg}\n            text='NAND gate'\n            onClick={() => props.onSelect(() => invert(logic.andGate()))}\n            inverted\n          />\n          <PaletteItem\n            svg={OrGateSvg}\n            text='OR gate'\n            onClick={() => props.onSelect(logic.orGate)}\n          />\n          <PaletteItem\n            svg={OrGateSvg}\n            text='NOR gate'\n            onClick={() => props.onSelect(() => invert(logic.orGate()))}\n            inverted\n          />\n          <PaletteItem\n            svg={XorGateSvg}\n            text='XOR gate'\n            onClick={() => props.onSelect(logic.xorGate)}\n          />\n          <PaletteItem\n            svg={ZeroGateSvg}\n            text='ground'\n            onClick={() => props.onSelect(() => logic.constantGate(false))}\n          />\n          <PaletteItem\n            svg={OneGateSvg}\n            text='+1'\n            onClick={() => props.onSelect(() => logic.constantGate(true))}\n          />\n          <PaletteItem\n            svg={BufferGateSvg}\n            text='buffer'\n            onClick={() => props.onSelect(() => logic.buffer())}\n          />\n          <PaletteItem\n            svg={BufferGateSvg}\n            text='inverter'\n            onClick={() => props.onSelect(() => invert(logic.buffer()))}\n            inverted\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Input/Output'>\n        <Grid container>\n          <PaletteItem\n            svg={LedSvg}\n            text='LED'\n            onClick={() => props.onSelect(() => logic.led())}\n          />\n          <PaletteItem\n            svg={SevenSegmentSvg}\n            text='7-segment display'\n            onClick={() => props.onSelect(logic.sevenSegment)}\n          />\n          <PaletteItem\n            svg={SwitchOffSvg}\n            text='switch'\n            onClick={() => props.onSelect(logic.switchGate)}\n          />\n          <PaletteItem\n            svg={SenderSvg}\n            text='sender'\n            onClick={() => props.onSelect(logic.sender)}\n          />\n          <PaletteItem\n            svg={ReceiverSvg}\n            text='receiver'\n            onClick={() => props.onSelect(logic.receiver)}\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Mux/Demux'>\n        <Grid container>\n          <PaletteItem\n            svg={MuxSvg}\n            text='2 to 1 mux'\n            onClick={() => props.onSelect(() => logic.mux(1))}\n          />\n          <PaletteItem\n            svg={MuxSvg}\n            text='4 to 1 mux'\n            onClick={() => props.onSelect(() => logic.mux(2))}\n          />\n          <PaletteItem\n            svg={DemuxSvg}\n            text='1 to 2 demux'\n            onClick={() => props.onSelect(() => logic.demux(1))}\n          />\n          <PaletteItem\n            svg={DemuxSvg}\n            text='1 to 4 demux'\n            onClick={() => props.onSelect(() => logic.demux(2))}\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Flip-Flops and Latches'>\n        <Grid container>\n          <PaletteItem\n            svg={SrLatchSvg}\n            text='gated SR-latch'\n            onClick={() => props.onSelect(logic.srLatch)}\n          />\n          <PaletteItem\n            svg={DLatchSvg}\n            text='D-latch'\n            onClick={() => props.onSelect(logic.dLatch)}\n          />\n          <PaletteItem\n            svg={DFlipFlopSvg}\n            text='D-flip-flop'\n            onClick={() => props.onSelect(logic.dFlipFlop)}\n          />\n          <PaletteItem\n            svg={SrDFlipFlopSvg}\n            text='SR-D-flip-flop'\n            onClick={() => props.onSelect(logic.srDFlipFlop)}\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Other'>\n        <Grid container>\n          <PaletteItem\n            svg={TextSvg}\n            text='text'\n            onClick={() => props.onSelect(() => logic.text('Text'))}\n          />\n        </Grid>\n      </ListSection>\n    </List>\n  )\n})\n\nexport default Palette\n","import React, { useState, useEffect, useMemo } from 'react'\n\nimport * as logic from './logic'\n\n/* Icons. */\nimport DeleteIcon from '@material-ui/icons/Delete'\n\n/* Material UI components. */\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport ListSection from './ListSection'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  evenlySpaced: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}))\n\nfunction PinProperties (props) {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        <Tooltip title='Invert pin'>\n          <Checkbox\n            checked={Boolean(props.pin.isInverted)}\n            onChange={(e) => {\n              const clone = { ...props.pin }\n              if (e.target.checked) {\n                clone.isInverted = true\n              } else {\n                delete clone.isInverted\n              }\n              props.onChange(clone)\n            }}\n          />\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText> {props.label || `Pin ${props.index + 1}`} </ListItemText>\n      {\n        props.deletable && (\n          <Button\n            onClick={props.onPinDeleted}\n          >\n            <DeleteIcon />\n          </Button>\n        )\n      }\n    </ListItem>\n  )\n}\n\n/**\n * A react component for the inspector. The inspector allows the user to modify\n * the properties of each logic gate through a forms-style user interface.\n */\nexport default function Inspector (props) {\n  const { circuit, selection } = props\n  const classes = useStyles()\n\n  const selectedGates = useMemo(\n    () => circuit.gates.filter((gate) => selection[gate.id]),\n    [circuit, selection]\n  )\n\n  const minX = useMemo(\n    () => selectedGates.reduce((min, gate) => Math.min(min, gate.x), Infinity),\n    [selectedGates]\n  )\n\n  const minY = useMemo(\n    () => selectedGates.reduce((min, gate) => Math.min(min, gate.y), Infinity),\n    [selectedGates]\n  )\n\n  const sharedLabel = useMemo(\n    () => selectedGates.reduce((label, gate) =>\n      label === undefined\n        ? gate.label || ''\n        : (gate.label === label && gate.label !== undefined ? label : ''),\n    undefined) || '',\n    [selectedGates]\n  )\n\n  const allHaveLabels = useMemo(\n    () => selectedGates.every((gate) => gate.label !== undefined),\n    [selectedGates]\n  )\n\n  const [x, setX] = useState(0)\n  const [y, setY] = useState(0)\n  const [label, setLabel] = useState('')\n\n  useEffect(() => {\n    setX(minX)\n    setY(minY)\n  }, [minX, minY])\n\n  useEffect(() => {\n    setLabel(sharedLabel)\n  }, [sharedLabel])\n\n  const updateGates = (callback) => {\n    const clone = { ...circuit }\n    clone.gates = circuit.gates.map((gate) => {\n      if (selection[gate.id]) {\n        return callback(gate)\n      } else {\n        return gate\n      }\n    })\n    props.onCircuitChanged(clone)\n  }\n\n  const updatePin = (index, pin, isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = [...gateClone.outputs]\n      gateClone.outputs[index] = pin\n    } else {\n      gateClone.inputs = [...gateClone.inputs]\n      gateClone.inputs[index] = pin\n    }\n    props.onCircuitChanged(clone)\n  }\n\n  const addPin = (isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = [...gateClone.outputs, logic.pin()]\n    } else {\n      gateClone.inputs = [...gateClone.inputs, logic.pin()]\n    }\n    props.onCircuitChanged(clone)\n  }\n\n  const deletePin = (index, isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = gateClone.outputs.filter((v, i) => i !== index)\n    } else {\n      gateClone.inputs = gateClone.inputs.filter((v, i) => i !== index)\n    }\n\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n\n    props.onCircuitChanged(clone)\n  }\n\n  const alignX = () => {\n    const clone = { ...circuit }\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, x: minX }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const alignY = () => {\n    const clone = { ...circuit }\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, y: minY }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const distributeX = () => {\n    const clone = { ...circuit }\n    const order = [...selectedGates].sort((a, b) => a.x - b.x)\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, x: order.indexOf(gate) * 0.75 + minX }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const distributeY = () => {\n    const clone = { ...circuit }\n    const order = [...selectedGates].sort((a, b) => a.y - b.y)\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, y: order.indexOf(gate) * 0.5 + minY }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const gate = selectedGates[0]\n\n  /* Properties only editable for a single gate. */\n  const [text, setText] = useState('')\n  const [width, setWidth] = useState(0)\n  const [height, setHeight] = useState(0)\n\n  useEffect(() => {\n    if (gate) {\n      setText(gate.text || '')\n      setWidth(gate.width || 0)\n      setHeight(gate.height || 0)\n    }\n  }, [gate])\n\n  if (selectedGates.length === 0) {\n    return (\n      <Box p={3}>\n        <Typography variant='body1'>\n          Make a selection, then its properties will be available here.\n        </Typography>\n      </Box>\n    )\n  } else {\n    const isLogicGate = (\n      gate.type === 'and' ||\n      gate.type === 'or' ||\n      gate.type === 'xor')\n\n    const inputProps = (\n      <ListSection title='Inputs'>\n        <List>\n          {\n            gate.inputs.map((pin, i) =>\n              <PinProperties\n                key={i}\n                index={i}\n                pin={pin}\n                label={\n                  gate.type === 'mux' &&\n                    (i < gate.n ? `Select ${i + 1}` : `Data ${i - gate.n + 1}`)\n                }\n                onChange={(newPin) => updatePin(i, newPin, false)}\n                onPinDeleted={() => deletePin(i, false)}\n                deletable={gate.inputs.length > 2 && isLogicGate}\n              />\n            )\n          }\n          {\n            isLogicGate &&\n        (gate.inputs.length < 4) &&\n        (\n          <ListItem>\n            <Button\n              fullWidth\n              onClick={() => addPin(false)}\n            >\n              Add Pin\n            </Button>\n          </ListItem>\n        )\n          }\n        </List>\n      </ListSection>\n    )\n\n    const outputProps = (\n      <ListSection title='Outputs'>\n        <List>\n          {\n            gate.outputs.map((pin, i) =>\n              <PinProperties\n                key={i}\n                index={i}\n                pin={pin}\n                onChange={(newPin) => updatePin(i, newPin, true)}\n                onPinDeleted={() => deletePin(i, true)}\n              />\n            )\n          }\n        </List>\n      </ListSection>\n    )\n\n    const textProps = (\n      <ListSection title='Text'>\n        <TextField\n          multiline\n          fullWidth\n          label='Text'\n          variant='filled'\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onBlur={(e) => {\n            if (e.target.value.length > 0) {\n              updateGates((gate) => ({\n                ...gate,\n                text: e.target.value\n              }))\n            }\n          }}\n        />\n      </ListSection>\n    )\n\n    const sizeProps = (\n      <ListSection title='Size'>\n        <Box class={classes.evenlySpaced}>\n          <TextField\n            fullWidth\n            label='Width'\n            variant='filled'\n            value={width}\n            onChange={(e) => setWidth(e.target.value)}\n            onBlur={(e) => {\n              if (!isNaN(e.target.value)) {\n                updateGates((gate) => ({\n                  ...gate,\n                  width: Number(e.target.value)\n                }))\n              }\n            }}\n          />\n\n          <TextField\n            fullWidth\n            label='Height'\n            variant='filled'\n            onChange={(e) => setHeight(e.target.value)}\n            value={height}\n            onBlur={(e) => {\n              if (!isNaN(e.target.value)) {\n                updateGates((gate) => ({\n                  ...gate,\n                  height: Number(e.target.value)\n                }))\n              }\n            }}\n          />\n        </Box>\n      </ListSection>\n    )\n\n    /* Properties only editable for an individual gate. */\n    const gateProps = (\n      <>\n        {gate.inputs.length > 0 && inputProps}\n        {gate.outputs.length > 0 && outputProps}\n        {gate.width !== undefined && gate.height !== undefined && sizeProps}\n        {gate.text !== undefined && textProps}\n      </>\n    )\n\n    const positionProps = (\n      <ListSection title='Position'>\n        <Box class={classes.evenlySpaced}>\n          <TextField\n            fullWidth\n            label='X'\n            variant='filled'\n            value={x}\n            onChange={(e) => setX(e.target.value)}\n            onBlur={(e) => {\n              if (!isNaN(e.target.value)) {\n                updateGates((gate) => ({\n                  ...gate,\n                  x: Number(e.target.value) - minX + gate.x\n                }))\n              }\n            }}\n          />\n\n          <TextField\n            fullWidth\n            label='Y'\n            variant='filled'\n            onChange={(e) => setY(e.target.value)}\n            value={y}\n            onBlur={(e) => {\n              if (!isNaN(e.target.value)) {\n                updateGates((gate) => ({\n                  ...gate,\n                  y: Number(e.target.value) - minY + gate.y\n                }))\n              }\n            }}\n          />\n\n          {\n            selectedGates.length > 1 && (\n              <>\n                <ButtonGroup\n                  fullWidth\n                >\n                  <Button onClick={alignX}>\n                    Align X\n                  </Button>\n                  <Button onClick={alignY}>\n                    Align Y\n                  </Button>\n                </ButtonGroup>\n                <ButtonGroup\n                  fullWidth\n                >\n                  <Button onClick={distributeX}>\n                    Distribute X\n                  </Button>\n                  <Button onClick={distributeY}>\n                    Distribute Y\n                  </Button>\n                </ButtonGroup>\n              </>\n            )\n          }\n        </Box>\n      </ListSection>\n    )\n\n    const labelProps = (\n      <>\n        <ListSection title='Label'>\n          <TextField\n            fullWidth\n            label='Label'\n            variant='filled'\n            value={label}\n            onChange={(e) => setLabel(e.target.value)}\n            onBlur={(e) => {\n              if (e.target.value.length > 0) {\n                updateGates((gate) => ({\n                  ...gate,\n                  label: e.target.value\n                }))\n              }\n            }}\n          />\n        </ListSection>\n      </>\n    )\n\n    return (\n      <form noValidate>\n        <List>\n          {positionProps}\n          {allHaveLabels && labelProps}\n          {selectedGates.length === 1 && gateProps}\n        </List>\n      </form>\n    )\n  }\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nimport ReactMarkdown from 'react-markdown'\n\nimport Wire from './Wire'\n\nconst useStyles = makeStyles((theme) => ({\n  selectedGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    background: fade(theme.palette.primary.main, 0.3),\n    borderRadius: '4px',\n    cursor: 'move'\n  },\n\n  gate: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  pin: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  editableGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.15)\n    }\n  },\n\n  editablePin: {\n    position: 'absolute',\n    margin: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.3)\n    }\n  },\n\n  label: {\n    position: 'relative',\n    transform: 'translate(-50%, -50%)',\n    textAlign: 'center',\n    width: '1in',\n    top: '-.1in',\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component representing a single logic gate.\n */\nexport const LogicGateContainer = (props) => {\n  /*\n   * The object responsible for placing the pins and choosing the SVGs. Note\n   * that this is not related to the material-ui theme.\n   */\n  const theme = props.theme\n\n  const classes = useStyles()\n\n  /* The position of the gate. */\n  const x = props.x\n  const y = props.y\n\n  const width = theme.getWidth(props.gate)\n  const height = theme.getHeight(props.gate)\n\n  /* The positions of the pins. */\n  const pinPositions = theme.getPinPositions(props.gate, x, y)\n\n  const isSelected = props.selected\n\n  const Pin = (pinProps) => (\n    <img\n      alt=''\n      src={theme.getPinSvg(pinProps.pin)}\n      onMouseDown={\n        (e) => props.onPinMouseDown(e, pinProps.pin, pinProps.isOutput)\n      }\n      onMouseUp={\n        (e) => props.onPinMouseUp(e, pinProps.pin, pinProps.isOutput)\n      }\n      style={{\n        left: `${pinPositions[pinProps.pin.id].x - x - 0.0625}in`,\n        top: `${pinPositions[pinProps.pin.id].y - y - 0.0625}in`\n      }}\n      className={props.editable ? classes.editablePin : classes.pin}\n    />\n  )\n\n  return (\n    <div\n      style={{\n        left: `${x}in`,\n        top: `${y}in`,\n        width: `${width}in`,\n        height: `${height}in`\n      }}\n      className={\n        props.editable\n          ? (isSelected ? classes.selectedGate : classes.editableGate)\n          : classes.gate\n      }\n    >\n\n      {\n        /* Input pin wires */\n        props.gate.outputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={(pinPositions[pin.id].x1 || pinPositions[pin.id].x - 0.25) - x}\n            y1={(pinPositions[pin.id].y1 || pinPositions[pin.id].y) - y}\n          />)\n      }\n\n      {\n        /* Output pin wires */\n        props.gate.inputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={(pinPositions[pin.id].x1 || pinPositions[pin.id].x + 0.25) - x}\n            y1={(pinPositions[pin.id].y1 || pinPositions[pin.id].y) - y}\n          />)\n      }\n\n      {\n        /* The gate itself */\n        props.children\n      }\n\n      {\n        props.gate.label && (\n          <p\n            className={classes.label}\n            style={{ left: `${theme.getWidth(props.gate) / 2}in` }}\n          >\n            {props.gate.label}\n          </p>\n        )\n      }\n\n      {\n        /* Input pins */\n        props.gate.inputs.map((pin) =>\n          <Pin pin={pin} isOutput={false} key={pin.id} />\n        )\n      }\n\n      {\n        /* Output pins */\n        props.gate.outputs.map((pin) =>\n          <Pin pin={pin} isOutput key={pin.id} />\n        )\n      }\n    </div>\n  )\n}\n\nexport const LogicGate = React.memo((props) => (\n  <LogicGateContainer {...props}>\n    <img\n      alt={props.gate.type}\n      src={props.svg}\n      style={{ position: 'absolute' }}\n      onClick={(e) => props.onGateClick(e, props.gate)}\n      onMouseDown={(e) => props.onGateMouseDown(e, props.gate)}\n    />\n  </LogicGateContainer>\n))\n\nexport const Text = React.memo((props) => (\n  <LogicGateContainer {...props}>\n    <div\n      onClick={(e) => props.onGateClick(e, props.gate)}\n      onMouseDown={(e) => props.onGateMouseDown(e, props.gate)}\n      style={{\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: '100%',\n        height: '100%'\n      }}\n    >\n      <ReactMarkdown>\n        {props.gate.text}\n      </ReactMarkdown>\n    </div>\n  </LogicGateContainer>\n))\n","/*\n * Themes are responsible for determining the images to use for each logic gate,\n * as well as the position of the pins.\n */\n\nimport React, { useState, useEffect } from 'react'\n\nimport { BehaviorSubject } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { useSubscription } from './hooks'\n\n/* SVGs */\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OpenPinSvg from './assets/open-pin.svg'\nimport OpenPinInvertedSvg from './assets/open-pin-inverted.svg'\nimport PinSvg from './assets/pin.svg'\nimport PinInvertedSvg from './assets/pin-inverted.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport LedGlowSvg from './assets/led-glow.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SwitchOnSvg from './assets/switch-on.svg'\nimport SenderSvg from './assets/sender.svg'\nimport ReceiverSvg from './assets/receiver.svg'\nimport MuxSvg from './assets/mux.svg'\nimport DemuxSvg from './assets/demux.svg'\nimport SrLatchSvg from './assets/sr-latch.svg'\nimport DLatchSvg from './assets/d-latch.svg'\nimport DFlipFlopSvg from './assets/d-flip-flop.svg'\nimport SrDFlipFlopSvg from './assets/sr-d-flip-flop.svg'\n\nimport SevenSegmentSvg from './assets/seven-segment.svg'\nimport SevenSegment0Svg from './assets/seven-segment-0.svg'\nimport SevenSegment1Svg from './assets/seven-segment-1.svg'\nimport SevenSegment2Svg from './assets/seven-segment-2.svg'\nimport SevenSegment3Svg from './assets/seven-segment-3.svg'\nimport SevenSegment4Svg from './assets/seven-segment-4.svg'\nimport SevenSegment5Svg from './assets/seven-segment-5.svg'\nimport SevenSegment6Svg from './assets/seven-segment-6.svg'\nimport SevenSegment7Svg from './assets/seven-segment-7.svg'\nimport SevenSegment8Svg from './assets/seven-segment-8.svg'\nimport SevenSegment9Svg from './assets/seven-segment-9.svg'\nimport SevenSegment10Svg from './assets/seven-segment-10.svg'\nimport SevenSegment11Svg from './assets/seven-segment-11.svg'\nimport SevenSegment12Svg from './assets/seven-segment-12.svg'\nimport SevenSegment13Svg from './assets/seven-segment-13.svg'\nimport SevenSegment14Svg from './assets/seven-segment-14.svg'\nimport SevenSegment15Svg from './assets/seven-segment-15.svg'\n\nimport { LogicGate, Text } from './LogicGate'\n\nconst sevenSegmentSvgs = [\n  SevenSegment0Svg,\n  SevenSegment1Svg,\n  SevenSegment2Svg,\n  SevenSegment3Svg,\n  SevenSegment4Svg,\n  SevenSegment5Svg,\n  SevenSegment6Svg,\n  SevenSegment7Svg,\n  SevenSegment8Svg,\n  SevenSegment9Svg,\n  SevenSegment10Svg,\n  SevenSegment11Svg,\n  SevenSegment12Svg,\n  SevenSegment13Svg,\n  SevenSegment14Svg,\n  SevenSegment15Svg\n]\n\nfunction Switch (props) {\n  const [isOn, setIsOn] = useState(false)\n  const { gate, simulation } = props\n  const subject = new BehaviorSubject(isOn)\n\n  useEffect(() => {\n    if (simulation) {\n      simulation.setUserInput(gate, subject)\n      const subscription = subject.subscribe(x => {\n        setIsOn(x)\n      })\n      return () => subscription.unsubscribe()\n    } else {\n      setIsOn(false)\n    }\n  }, [subject, simulation, gate])\n\n  return (\n    <LogicGate\n      svg={isOn ? SwitchOnSvg : SwitchOffSvg}\n      {...props}\n      onGateClick={() => {\n        if (simulation) {\n          subject.next(!isOn)\n        }\n      }}\n    />\n  )\n}\n\nfunction Led (props) {\n  const { gate, simulation } = props\n  const isGlowing = useSubscription((\n    simulation && simulation.getInputs(gate).pipe(map(x => x[0]))\n  ))\n\n  return (\n    <LogicGate\n      svg={(isGlowing && simulation) ? LedGlowSvg : LedSvg}\n      {...props}\n    />\n  )\n}\n\nfunction SevenSegment (props) {\n  const { gate, simulation } = props\n  const toNumber = x => (\n    x.reduce((a, c, i) => a + Number(c) * (1 << i))\n  )\n  const value = useSubscription(\n    simulation && simulation.getInputs(gate).pipe(map(toNumber))\n  )\n  return (\n    <LogicGate\n      svg={\n        simulation\n          ? sevenSegmentSvgs[value]\n          : SevenSegmentSvg\n      }\n      {...props}\n    />\n  )\n}\n\nconst defaultThemeComponents = {\n  and: (props) => <LogicGate {...props} svg={AndGateSvg} />,\n  or: (props) => <LogicGate svg={OrGateSvg} {...props} />,\n  xor: (props) => <LogicGate svg={XorGateSvg} {...props} />,\n  buffer: (props) => <LogicGate svg={BufferGateSvg} {...props} />,\n  led: (props) => <Led {...props} />,\n  constant: (props) => (\n    <LogicGate\n      svg={props.gate.value ? OneGateSvg : ZeroGateSvg}\n      {...props}\n    />\n  ),\n  switch: (props) => <Switch {...props} />,\n  sender: (props) => <LogicGate svg={SenderSvg} {...props} />,\n  receiver: (props) => <LogicGate svg={ReceiverSvg} {...props} />,\n  mux: (props) => <LogicGate svg={MuxSvg} {...props} />,\n  demux: (props) => <LogicGate svg={DemuxSvg} {...props} />,\n  sevenSegment: (props) => <SevenSegment {...props} />,\n  srLatch: (props) => <LogicGate svg={SrLatchSvg} {...props} />,\n  dLatch: (props) => <LogicGate svg={DLatchSvg} {...props} />,\n  dFlipFlop: (props) => <LogicGate svg={DFlipFlopSvg} {...props} />,\n  srDFlipFlop: (props) => <LogicGate svg={SrDFlipFlopSvg} {...props} />,\n  text: (props) => <Text {...props} />\n}\n\nconst defaultTheme = {\n  /* Returns an SVG for the given pin. */\n  getPinSvg: (pin) => (\n    pin.connections.length === 0\n      ? (pin.isInverted\n        ? OpenPinInvertedSvg\n        : OpenPinSvg)\n      : (pin.isInverted\n        ? PinInvertedSvg\n        : PinSvg)),\n\n  getGateComponent (gate) {\n    return defaultThemeComponents[gate.type]\n  },\n\n  /*\n   * Returns an object mapping a pin ID to a pin position. Each key maps a pin\n   * ID to an object with an x and y field. The object may also have a x1 and y1\n   * field, which represents where the wire connecting the pin to the gate\n   * should go.\n   */\n  getPinPositions (gate, x, y, state) {\n    const distribute = (index, length) => (index - (length - 1) / 2) /\n        Math.max(length - 1, 1)\n\n    /* Maps a pin ID to a position */\n    if (gate.type === 'mux' || gate.type === 'demux') {\n      const ret = {}\n      gate.inputs.forEach((pin, index) => {\n        if (index < gate.n) {\n          const pinX = x + 0.25 - distribute(index, gate.n) * 0.075\n          ret[pin.id] = {\n            x: pinX,\n            y: y + 0.5,\n            x1: pinX,\n            y1: y + 0.25\n          }\n        } else {\n          ret[pin.id] = {\n            x: x,\n            y: y + 0.25 - distribute(\n              index - gate.n,\n              gate.inputs.length - gate.n) * 0.225\n          }\n        }\n      })\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - distribute(index, gate.outputs.length) * 0.225\n        }\n      })\n      return ret\n    } else if (gate.type === 'srDFlipFlop') {\n      const ret = {}\n      const r = gate.inputs[0]\n      const c = gate.inputs[1]\n      const d = gate.inputs[2]\n      const s = gate.inputs[3]\n\n      const f = (pin, index) => {\n        ret[pin.id] = {\n          x: x,\n          y: y + 0.25 - distribute(index, 2) * 0.225\n        }\n      }\n\n      f(c, 0)\n      f(d, 1)\n\n      ret[s.id] = {\n        x: x + 0.25,\n        y: y - 0.05,\n        x1: x + 0.25,\n        y1: y\n      }\n\n      ret[r.id] = {\n        x: x + 0.25,\n        y: y + 0.55,\n        x1: x + 0.25,\n        y1: y\n      }\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - distribute(index, gate.outputs.length) * 0.225\n        }\n      })\n\n      return ret\n    } else {\n      const ret = {}\n\n      gate.inputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x,\n          y: y + 0.25 - distribute(index, gate.inputs.length) * 0.225\n        }\n      })\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - distribute(index, gate.outputs.length) * 0.225\n        }\n      })\n\n      return ret\n    }\n  },\n\n  getWidth (gate, state) {\n    return gate.width || 0.5\n  },\n\n  getHeight (gate, state) {\n    return gate.height || 0.5\n  }\n}\n\nexport {\n  defaultTheme\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\n\n/* Material UI components. */\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Container from '@material-ui/core/Container'\nimport Drawer from '@material-ui/core/Drawer'\nimport Typography from '@material-ui/core/Typography'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Box from '@material-ui/core/Box'\nimport Fade from '@material-ui/core/Fade'\n\n/* Icons. */\nimport StopIcon from '@material-ui/icons/Stop'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport RedoIcon from '@material-ui/icons/Redo'\nimport UndoIcon from '@material-ui/icons/Undo'\nimport HelpIcon from '@material-ui/icons/Help'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\n/* Editor components. */\nimport Page from './Page'\nimport Palette from './Palette'\nimport Inspector from './Inspector'\n\n/* Logic components. */\nimport * as logic from './logic'\nimport { defaultTheme } from './themes'\n\nimport { upload, download } from './utils'\n\nimport { useUndoable } from './hooks'\n\nconst drawerWidth = 320\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  menuButtonGroup: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerContent: {\n    width: drawerWidth,\n    overflowX: 'hidden'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\nfunction PageChanger (props) {\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const classes = useStyles()\n\n  const onClose = () => setAnchorEl(null)\n  const onClick = (e) => setAnchorEl(e.currentTarget)\n\n  const menuItems = []\n  for (let i = 0; i <= props.pageCount; i++) {\n    menuItems.push(\n      <MenuItem\n        key={i}\n        onClick={() => {\n          props.onChangedPage(i)\n          onClose()\n        }}\n      >\n        Page {i + 1}\n      </MenuItem>\n    )\n  }\n\n  return (\n    <>\n      <Tooltip title='Change page'>\n        <Button\n          aria-controls='simple-menu'\n          aria-haspopup='true'\n          aria-label='change page'\n          className={classes.menuButton}\n          color='inherit'\n          onClick={onClick}\n        >\n          Page {1 + props.page}\n          <ExpandMoreIcon />\n        </Button>\n      </Tooltip>\n\n      <Menu\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClose}\n        anchorEl={anchorEl}\n      >\n        {menuItems}\n      </Menu>\n    </>\n  )\n}\n\nfunction TabPanel (props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <Fade\n      in={value === index}\n    >\n      <div\n        role='tabpanel'\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box>\n            {children}\n          </Box>\n        )}\n      </div>\n    </Fade>\n  )\n}\n\nfunction App () {\n  const [circuit, setCircuit, undo, redo] = useUndoable(() => logic.circuit([]))\n  const [selection, setSelection] = useState(false)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [copiedGates, setCopiedGates] = useState(null)\n  const [contextMenuPos, setContextMenuPos] = useState(null)\n  const [currentPage, setCurrentPage] = useState(0)\n  const [pageCount, setPageCount] = useState(1)\n  const [tab, setTab] = useState(0)\n  const [simulation, setSimulation] = useState(null)\n\n  /* For opening and closing the error snackbar. */\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  /* Refs used for calculating the center of the page. */\n  const appBarRef = useRef()\n  const pageRef = useRef()\n\n  const classes = useStyles()\n\n  const closeContextMenu = () => setContextMenuPos(null)\n\n  const downloadProject = () => {\n    download('circuit.json', logic.dumpProject(circuit, currentPage))\n  }\n\n  const uploadProject = () =>\n    upload()\n      .then(logic.loadProject)\n      .then((data) => {\n        setCircuit(logic.renumber(data.circuit))\n\n        const maxPage = data.circuit.gates.reduce(\n          (maxPage, gate) => gate.page ? Math.max(maxPage, gate.page) : maxPage,\n          0\n        )\n\n        const page = data.currentPage || 0\n\n        /* Set the number of pages available to the user. */\n        setPageCount(Math.max(page, maxPage + 1))\n\n        /* Goto the first page, or the current page that was saved. */\n        setCurrentPage(page)\n      })\n      .catch((error) => {\n        setErrorMessage(\"Uh oh! We weren't able to load that file.\")\n        console.error(error)\n      })\n\n  const selectAll = () => {\n    setSelection(\n      Object.fromEntries(\n        circuit.gates\n          .filter((gate) => (gate.page || 0) === currentPage)\n          .map((gate) => [gate.id, true]))\n    )\n    closeContextMenu()\n  }\n\n  const copy = () => {\n    /* Copy the selection. */\n    setCopiedGates(\n      logic.removeInvalidConnections(\n        circuit.gates.filter((gate) => selection[gate.id])\n      )\n    )\n    closeContextMenu()\n  }\n\n  const paste = () => {\n    if (copiedGates) {\n      /* Renumber the circuit so we have no ID collisions. */\n      const clone = logic.renumber(circuit)\n      /* Append the copied gates to the circuit. */\n      clone.gates = [\n        ...clone.gates,\n        ...copiedGates.map((gate) => ({\n          ...gate,\n          page: currentPage\n        }))\n      ]\n      setCircuit(clone)\n    }\n    closeContextMenu()\n  }\n\n  const onPaletteSelect = useCallback((factory) => {\n    /* Clone the circuit. */\n    const clone = { ...circuit }\n    clone.gates = [...clone.gates]\n\n    /* Place the gate. */\n    const gate = factory()\n    clone.gates.push(gate)\n\n    /* Calculate the gate position. */\n    const appBarRect = appBarRef.current.getBoundingClientRect()\n    const pageRect = pageRef.current.getBoundingClientRect()\n\n    gate.x = ((appBarRect.width + drawerWidth) / 2 -\n      pageRect.left) / 96\n    gate.y = (\n      (window.innerHeight + appBarRect.height) / 2 -\n      pageRect.top) / 96\n\n    gate.page = currentPage\n\n    /* Update with the new circuit. */\n    setCircuit(clone)\n  }, [appBarRef, pageRef, circuit, currentPage, setCircuit])\n\n  const onPlayButtonClicked = () => {\n    if (!isPlaying) {\n      /* Check for repeated senders. */\n      const duplicates = logic.getDuplicateSenderLabels(circuit.gates)\n\n      if (duplicates.length === 0) {\n        setSimulation(logic.simulation({ circuit }))\n        setIsPlaying(true)\n      } else {\n        setErrorMessage(\n          `Uh oh! Multiple senders for labels: ${duplicates.join(', ')}`\n        )\n      }\n    } else {\n      setSimulation(null)\n      setIsPlaying(false)\n    }\n  }\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => simulation.fastForward(10), 16)\n      return () => clearInterval(interval)\n    }\n  }, [simulation, isPlaying])\n\n  const deleteSelection = () => {\n    const clone = { ...circuit }\n\n    /* Remove the selected gates. */\n    clone.gates = clone.gates.filter((gate) => !selection[gate.id])\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n    setCircuit(clone)\n\n    /* Clear selection. */\n    setSelection({})\n  }\n\n  const cut = () => {\n    copy()\n    deleteSelection()\n    closeContextMenu()\n  }\n\n  const changePage = (page) => {\n    if (page >= 0) {\n      setCurrentPage(page)\n      if (page >= pageCount) {\n        setPageCount(page + 1)\n      }\n    }\n  }\n\n  /* Attach key bindings to document body. */\n  useEffect(() => {\n    const onKeyDown = (e) => {\n      if (e.target === document.body) {\n        const uppercase = e.key.toUpperCase()\n\n        let isValidShortcut = true\n        if (e.getModifierState('Control')) {\n          if (uppercase === 'C') {\n            copy()\n          } else if (uppercase === 'V') {\n            paste()\n          } else if (uppercase === 'X') {\n            cut()\n          } else if (uppercase === 'A') {\n            selectAll()\n          } else if (uppercase === 'Z') {\n            undo()\n          } else if (uppercase === 'Y') {\n            redo()\n          } else {\n            isValidShortcut = false\n          }\n        } else if (e.key === 'Delete') {\n          deleteSelection()\n        } else if (uppercase === 'P') {\n          onPlayButtonClicked()\n        } else if (!isNaN(e.key)) {\n          changePage(Number(e.key) - 1)\n        } else if (e.key === '+') {\n          changePage(currentPage + 1)\n        } else if (e.key === '-') {\n          changePage(currentPage - 1)\n        } else {\n          isValidShortcut = false\n        }\n\n        if (isValidShortcut) {\n          e.preventDefault()\n        }\n      }\n    }\n    document.body.addEventListener('keydown', onKeyDown)\n    return () => document.body.removeEventListener('keydown', onKeyDown)\n  })\n\n  return (\n    <div\n      className={classes.root}\n      onContextMenu={(event) => {\n        event.preventDefault()\n        setContextMenuPos([event.clientX - 2, event.clientY - 4])\n      }}\n    >\n      <CssBaseline />\n\n      <Drawer variant='persistent' className={classes.drawer} open>\n        <Toolbar />\n        <div\n          className={classes.drawerContent}\n        >\n          <Tabs\n            onChange={(e, value) => setTab(value)}\n            value={tab}\n            variant='fullWidth'\n          >\n            <Tab label='Palette' />\n            <Tab label='Properties' />\n          </Tabs>\n          <TabPanel value={tab} index={0}>\n            <Palette\n              onSelect={onPaletteSelect}\n            />\n          </TabPanel>\n          <TabPanel value={tab} index={1}>\n            <Inspector\n              circuit={circuit}\n              selection={selection}\n              onCircuitChanged={(circuit) => setCircuit(circuit)}\n            />\n          </TabPanel>\n        </div>\n      </Drawer>\n\n      <AppBar position='fixed' className={classes.appBar} ref={appBarRef}>\n        <Toolbar>\n\n          <Typography variant='h6' className={classes.title}>Flux Logic</Typography>\n\n          <PageChanger\n            page={currentPage}\n            pageCount={pageCount}\n            onChangedPage={changePage}\n          />\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Upload project'>\n              <Button\n                aria-label='upload'\n                onClick={uploadProject}\n              >\n                <CloudUploadIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Download project'>\n              <Button\n                aria-label='download'\n                onClick={downloadProject}\n              >\n                <CloudDownloadIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Undo'>\n              <Button aria-label='undo' onClick={undo}>\n                <UndoIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Redo'>\n              <Button aria-label='redo' onClick={redo}>\n                <RedoIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <Tooltip title={isPlaying ? 'Stop simulation' : 'Start simulation'}>\n            <Button\n              aria-label={isPlaying ? 'stop' : 'start'}\n              onClick={onPlayButtonClicked}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              {\n                isPlaying ? <StopIcon /> : <PlayIcon />\n              }\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Delete selection'>\n            <Button\n              aria-label='delete'\n              onClick={deleteSelection}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <DeleteIcon />\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Help'>\n            <Button\n              aria-label='help'\n              className={classes.menuButton}\n              color='inherit'\n              onClick={() => {\n                window.open(\n                  'https://github.com/tcannon686/fluxlogic#usage',\n                  '_blank')\n              }}\n            >\n              <HelpIcon />\n            </Button>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n\n      <Toolbar />\n      <main className={classes.content}>\n        <Toolbar />\n        <Container>\n          <Page\n            page={currentPage}\n            circuit={circuit}\n            theme={defaultTheme}\n            ref={pageRef}\n            selection={selection}\n            simulation={simulation}\n            onSelectionChanged={(selection) => {\n              setSelection(selection)\n            }}\n            onCircuitChanged={(circuit) => {\n              setCircuit(circuit)\n            }}\n            onUserInputChanged={(gate, value) => {\n              simulation.setUserInput(gate, value)\n            }}\n            editable={!simulation}\n          />\n        </Container>\n      </main>\n      <Snackbar\n        open={errorMessage !== null}\n        autoHideDuration={10000}\n        onClose={() => { setErrorMessage(null) }}\n        message={errorMessage}\n      />\n      <Menu\n        keepMounted\n        open={contextMenuPos !== null}\n        onClose={closeContextMenu}\n        anchorReference='anchorPosition'\n        anchorPosition={\n          contextMenuPos && { left: contextMenuPos[0], top: contextMenuPos[1] }\n        }\n      >\n        <MenuItem onClick={cut}>Cut</MenuItem>\n        <MenuItem onClick={copy}>Copy</MenuItem>\n        <MenuItem onClick={paste}>Paste</MenuItem>\n        <MenuItem onClick={selectAll}>Select all</MenuItem>\n      </Menu>\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-env serviceworker */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#5f5fc4',\n      main: '#283593',\n      dark: '#001064',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#ffbd45',\n      main: '#fb8c00',\n      dark: '#c25e00',\n      contrastText: '#fff'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap' />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/and-gate.b39df76c.svg\";","module.exports = __webpack_public_path__ + \"static/media/or-gate.ce29e395.svg\";","module.exports = __webpack_public_path__ + \"static/media/buffer-gate.96d07f6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/mux.148e9d2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/demux.7b2120ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/xor-gate.12bb51fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/one-gate.ac34b99c.svg\";","module.exports = __webpack_public_path__ + \"static/media/zero-gate.d126f49d.svg\";","module.exports = __webpack_public_path__ + \"static/media/led.788936c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-off.b1ab986c.svg\";","module.exports = __webpack_public_path__ + \"static/media/sender.737fb0fa.svg\";"],"sourceRoot":""}