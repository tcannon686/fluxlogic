{"version":3,"sources":["assets/text.svg","assets/open-pin.svg","assets/open-pin-inverted.svg","assets/pin.svg","assets/led-glow.svg","assets/switch-on.svg","assets/seven-segment-0.svg","assets/seven-segment-1.svg","assets/seven-segment-2.svg","assets/seven-segment-3.svg","assets/seven-segment-4.svg","assets/seven-segment-5.svg","assets/seven-segment-6.svg","assets/seven-segment-7.svg","assets/seven-segment-8.svg","assets/seven-segment-9.svg","assets/seven-segment-10.svg","assets/seven-segment-11.svg","assets/seven-segment-12.svg","assets/seven-segment-13.svg","assets/seven-segment-14.svg","assets/seven-segment-15.svg","sim.worker.js","logic.js","Wire.js","hooks.js","Circuit.js","SelectionBox.js","Page.js","ListSection.js","Palette.js","Inspector.js","LogicGate.js","themes.js","App.js","utils.js","serviceWorker.js","index.js","assets/and-gate.svg","assets/or-gate.svg","assets/led.svg","assets/buffer-gate.svg","assets/switch-off.svg","assets/mux.svg","assets/demux.svg","assets/xor-gate.svg","assets/one-gate.svg","assets/zero-gate.svg","assets/sender.svg","assets/receiver.svg","assets/seven-segment.svg","assets/sr-latch.svg","assets/d-latch.svg","assets/d-flip-flop.svg","assets/sr-d-flip-flop.svg","assets/pin-inverted.svg"],"names":["module","exports","addMethods","methods","w","Worker","name","pin","id","nextId","connections","andGate","type","inputs","outputs","Object","seal","orGate","xorGate","constantGate","value","switchGate","buffer","sender","label","receiver","mux","n","i","push","demux","sevenSegment","srLatch","dLatch","dFlipFlop","srDFlipFlop","getInputs","gate","state","map","isInverted","getUserInput","currentId","Number","MAX_SAFE_INTEGER","renumber","circuit","clone","maxId","calcNewId","updateId","object","gates","r","removeInvalidConnections","validPins","fromEntries","reduce","t","concat","getValidPins","gateClone","updatePin","filter","loadProject","data","JSON","parse","Wire","props","x0","y0","x1","y1","curve","Math","min","abs","padding","l","c0","c1","width","height","d","viewBox","style","position","left","top","pointerEvents","stroke","strokeWidth","fill","useRefCallback","callback","ref","useRef","memoizedCallback","useCallback","current","useEffect","Circuit","theme","isEditable","editable","page","useMemo","undefined","selection","moveAmount","simState","pinPositions","positions","forEach","x","y","assign","getPinPositions","onGateClick","onGateMouseDown","onPinMouseUp","onPinMouseDown","key","Component","getGateComponent","selected","useStyles","makeStyles","selectionBox","background","fade","palette","primary","main","SelectionBox","useState","selectionStart","selectionEnd","setSelectionEnd","onSelectionChanged","classes","onMouseMove","e","end","clientX","clientY","max","document","addEventListener","removeEventListener","className","PreviewWire","setEnd","clientToPage","isOutputPin","Page","React","forwardRef","onCircuitChanged","onUserInputChanged","setSelectionStart","toBeAddedToSelection","setToBeAddedToSelection","isDragging","setIsDragging","didDrag","setDidDrag","moveStart","setMoveStart","moveEnd","setMoveEnd","wireStartPin","setWireStartPin","wireStartPinIsOutput","setWireStartPinIsOutput","coord","bounds","getBoundingClientRect","button","newSelection","shiftKey","stopPropagation","logic","isSelectionEmpty","keys","length","preventDefault","onMove","addWire","from","to","inputGateId","outputGateId","shouldUpdate","hasPin","inIndex","indexOf","outIndex","findIndex","output","totalSelection","onMouseUp","window","Paper","elevation","square","onMouseDown","activeElement","blur","ul","br","a","b","getWidth","getHeight","isOverlapping","ListSection","isExpanded","setIsExpanded","ListItem","onClick","ListItemIcon","ListItemText","title","Collapse","in","children","PaletteItem","Grid","item","xs","text","Button","overflow","inverted","src","PinInvertedSvg","alt","svg","Palette","memo","invert","List","container","AndGateSvg","onSelect","OrGateSvg","XorGateSvg","ZeroGateSvg","OneGateSvg","BufferGateSvg","LedSvg","SevenSegmentSvg","SwitchOffSvg","SenderSvg","ReceiverSvg","MuxSvg","DemuxSvg","SrLatchSvg","DLatchSvg","DFlipFlopSvg","SrDFlipFlopSvg","TextSvg","string","evenlySpaced","margin","spacing","PinProperties","Tooltip","Checkbox","checked","Boolean","onChange","target","index","deletable","onPinDeleted","Inspector","selectedGates","minX","Infinity","minY","sharedLabel","allHaveLabels","every","setX","setY","setLabel","updateGates","isOutput","deletePin","v","setText","setWidth","setHeight","Box","p","Typography","variant","isLogicGate","inputProps","newPin","fullWidth","addPin","outputProps","textProps","TextField","multiline","onBlur","sizeProps","isNaN","gateProps","positionProps","class","ButtonGroup","order","sort","labelProps","noValidate","selectedGate","borderRadius","cursor","editableGate","editablePin","transform","textAlign","LogicGateContainer","isSelected","Pin","pinProps","getPinSvg","LogicGate","Text","sevenSegmentSvgs","SevenSegment0Svg","SevenSegment1Svg","SevenSegment2Svg","SevenSegment3Svg","SevenSegment4Svg","SevenSegment5Svg","SevenSegment6Svg","SevenSegment7Svg","SevenSegment8Svg","SevenSegment9Svg","SevenSegment10Svg","SevenSegment11Svg","SevenSegment12Svg","SevenSegment13Svg","SevenSegment14Svg","SevenSegment15Svg","defaultThemeComponents","and","or","xor","led","LedGlowSvg","constant","switch","SwitchOnSvg","c","defaultTheme","OpenPinInvertedSvg","OpenPinSvg","PinSvg","distribute","ret","pinX","s","f","root","display","appBar","zIndex","drawer","menuButton","marginRight","menuButtonGroup","hide","flexShrink","drawerContent","overflowX","content","flexGrow","PageChanger","anchorEl","setAnchorEl","onClose","menuItems","MenuItem","onChangedPage","pageCount","aria-controls","aria-haspopup","aria-label","color","currentTarget","Menu","keepMounted","open","TabPanel","other","Fade","role","aria-labelledby","App","present","setPresent","past","setPast","future","setFuture","undo","slice","redo","setState","splice","useUndoable","setCircuit","setSelection","setSimState","isPlaying","setIsPlaying","copiedGates","setCopiedGates","contextMenuPos","setContextMenuPos","currentPage","setCurrentPage","setPageCount","tab","setTab","simWorker","SimWorker","errorMessage","setErrorMessage","appBarRef","pageRef","closeContextMenu","selectAll","copy","paste","onPaletteSelect","factory","appBarRect","pageRect","innerHeight","onPlayButtonClicked","stopSimulation","duplicates","senderCounts","entries","startSimulation","join","shouldLoop","loop","getState","then","deleteSelection","cut","changePage","onKeyDown","body","uppercase","toUpperCase","isValidShortcut","getModifierState","onContextMenu","event","CssBaseline","Drawer","Toolbar","Tabs","Tab","AppBar","Promise","resolve","reject","element","createElement","setAttribute","appendChild","this","files","catch","error","click","removeChild","maxPage","console","filename","encodeURIComponent","download","stringify","version","packageJson","Container","setUserInput","Snackbar","autoHideDuration","message","anchorReference","anchorPosition","location","hostname","match","createMuiTheme","light","dark","contrastText","secondary","ReactDOM","render","StrictMode","rel","href","ThemeProvider","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31a946e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/text.ede21a5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin.402b8aa6.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin-inverted.fb8a5ebb.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.4c8eaca6.svg\";","module.exports = __webpack_public_path__ + \"static/media/led-glow.ff1875d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-on.37d11db0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-0.04852a4c.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-1.6fd25c65.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-2.7208f433.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-3.8b8ca250.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-4.a18e6dce.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-5.25404539.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-6.f740952a.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-7.43f06495.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-8.4c14e783.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-9.50519141.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-10.b8869da5.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-11.4982a3e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-12.37b243f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-13.82ababea.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-14.a8711f2b.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment-15.8f26ba8c.svg\";","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"startSimulation\",\"getState\",\"stopSimulation\",\"setUserInput\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"d7c5e2e18a2ec0baaa66.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import packageJson from '../package.json'\n\n/*\n * An object mapping gate types to functions.\n */\nconst nextOutputFunctions = {\n  and: (gate, state) => [getInputs(gate, state).every((x) => x)],\n  or: (gate, state) => [getInputs(gate, state).some((x) => x)],\n  xor: (gate, state) => [\n    getInputs(gate, state).filter((x) => x).length % 2 !== 0\n  ],\n  constant: (gate, state) => [gate.value],\n  led: () => [],\n  text: () => [],\n  buffer: (gate, state) => getInputs(gate, state),\n  switch: (gate, state) => [Boolean(getUserInput(gate, state))],\n  sender: () => [],\n  receiver: (gate, state, circuit) => getInputs(\n    findSender(gate, circuit),\n    state\n  ),\n  mux: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const index = inputs\n      .slice(0, gate.n)\n      .reduce((t, c, i) => t + Number(c) * (1 << i), 0)\n    return [inputs[gate.n + index]]\n  },\n  demux: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const index = inputs\n      .slice(0, gate.n)\n      .reduce((t, c, i) => t + Number(c) * (1 << i), 0)\n    const outputs = new Array(1 << gate.n)\n    outputs.fill(false)\n    outputs[index] = inputs[gate.n]\n    return outputs\n  },\n  sevenSegment: () => [],\n  srLatch: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const s = inputs[2]\n    const e = inputs[1]\n    const r = inputs[0]\n\n    const q = outputs[1]\n\n    if (e && s && !r) {\n      return [false, true]\n    } else if (e && !s && r) {\n      return [true, false]\n    } else {\n      return [!q, q]\n    }\n  },\n  dLatch: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const d = inputs[1]\n    const e = inputs[0]\n\n    const q = outputs[1]\n    if (e) {\n      return [!d, d]\n    } else {\n      return [!q, q]\n    }\n  },\n  dFlipFlop: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const cPrev = state.prevState && getInputs(gate, state.prevState)[0]\n    const c = inputs[0]\n    const d = inputs[1]\n\n    const q = outputs[1]\n\n    const isRisingEdge = cPrev !== c && c === true\n\n    if (isRisingEdge) {\n      return [!d, d]\n    } else {\n      return [!q, q]\n    }\n  },\n  srDFlipFlop: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const outputs = getOutputs(gate, state)\n\n    const r = inputs[0]\n    const cPrev = state.prevState && getInputs(gate, state.prevState)[1]\n    const c = inputs[1]\n    const d = inputs[2]\n    const s = inputs[3]\n\n    const q = outputs[1]\n\n    const isRisingEdge = cPrev !== c && c === true\n\n    /*\n     * Truth table taken from:\n     * https://en.wikipedia.org/wiki/Flip-flop_(electronics)\n     */\n    if (s && !r) {\n      return [false, true]\n    } else if (!s && r) {\n      return [true, false]\n    } else if (s && r) {\n      return [true, true]\n    } else if (isRisingEdge) {\n      return [!d, d]\n    } else {\n      return [!q, q]\n    }\n  }\n}\n\n/** Connect to logic pins by a wire. */\nfunction connect (a, b) {\n  a.connections.push(b.id)\n  b.connections.push(a.id)\n}\n\n/**\n * Creates a circuit with the given gates.\n */\nfunction circuit (gates) {\n  return {\n    gates\n  }\n}\n\n/**\n * Creates a logic pin. A pin may be inverted by setting its isInverted field.\n */\nfunction pin () {\n  return {\n    id: nextId(),\n    connections: []\n  }\n}\n\n/** Creates an and gate. */\nfunction andGate () {\n  return {\n    id: nextId(),\n    type: 'and',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an or gate. */\nfunction orGate () {\n  return {\n    id: nextId(),\n    type: 'or',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an xor gate. */\nfunction xorGate () {\n  return {\n    id: nextId(),\n    type: 'xor',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates a constant gate (for simulating ground or 1). */\nfunction constantGate (value) {\n  return {\n    id: nextId(),\n    type: 'constant',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()]),\n    value: value || false\n  }\n}\n\n/** Creates a switch gate that the user can interact with. */\nfunction switchGate () {\n  return {\n    id: nextId(),\n    type: 'switch',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an LED. */\nfunction led () {\n  return {\n    id: nextId(),\n    type: 'led',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/** Creates a buffer (a gate that simply passes its input to its output). */\nfunction buffer () {\n  return {\n    id: nextId(),\n    type: 'buffer',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a sender with the given label. A receiver with the same label will\n * receive the inputs of the sender.\n */\nfunction sender (label) {\n  return {\n    id: nextId(),\n    type: 'sender',\n    label: label || 'A',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/**\n * Creates a receiver with the given label. The receiver will have the same\n * input values as the sender with the given label.\n */\nfunction receiver (label) {\n  return {\n    id: nextId(),\n    type: 'receiver',\n    label: label || 'A',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a multiplexor with the given number of select lines. The first n\n * items in gate.inputs are the select lines (least significant bit first), the\n * next n^2 are the data lines. The number of select lines, n, is stored in the\n * n field of the returned object.\n */\nfunction mux (n) {\n  const inputs = []\n  for (let i = 0; i < n; i++) {\n    inputs.push(pin())\n  }\n  for (let i = 0; i < (1 << n); i++) {\n    inputs.push(pin())\n  }\n  return {\n    id: nextId(),\n    type: 'mux',\n    n,\n    inputs: Object.seal(inputs),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a demultiplexor with the given number of select lines. The first n\n * items in gates.inputs are the selectl ines (least significant bit first),\n * followed by the data line. The number of select lines, n, is stored in the n\n * field of the returned object. The returned gate has 2^n outputs.\n */\nfunction demux (n) {\n  const inputs = [pin()]\n  const outputs = []\n  for (let i = 0; i < n; i++) {\n    inputs.push(pin())\n  }\n  for (let i = 0; i < (1 << n); i++) {\n    outputs.push(pin())\n  }\n  return {\n    id: nextId(),\n    type: 'demux',\n    n,\n    inputs: Object.seal(inputs),\n    outputs: Object.seal(outputs)\n  }\n}\n\nfunction sevenSegment (n) {\n  return {\n    id: nextId(),\n    type: 'sevenSegment',\n    inputs: Object.seal([\n      pin(),\n      pin(),\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([])\n  }\n}\n\n/**\n * Creates a gated SR-latch component, where inputs[0] is R, inputs[1] is E,\n * inputs[2] is S, outputs[0] is !Q, outputs[1] is Q.\n */\nfunction srLatch () {\n  return {\n    id: nextId(),\n    type: 'srLatch',\n    inputs: Object.seal([\n      pin(),\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a D-latch, where inputs[0] is E, inputs[1] is D, outputs[0] is !Q,\n * outputs[1] is Q.\n */\nfunction dLatch () {\n  return {\n    id: nextId(),\n    type: 'dLatch',\n    inputs: Object.seal([\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a D-flip-flop, where inputs[0] is C, inputs[1] is D.\n */\nfunction dFlipFlop () {\n  return {\n    id: nextId(),\n    type: 'dFlipFlop',\n    inputs: Object.seal([\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a D-flip-flop with S and R pins, where inputs[0] is R, inputs[1] is\n * C, inputs[2] is D, inputs[3] is S.\n */\nfunction srDFlipFlop () {\n  return {\n    id: nextId(),\n    type: 'srDFlipFlop',\n    inputs: Object.seal([\n      pin(),\n      pin(),\n      pin(),\n      pin()\n    ]),\n    outputs: Object.seal([\n      pin(),\n      pin()\n    ])\n  }\n}\n\n/**\n * Creates a text component, which displays text on the screen. It has a\n * text field, which contains the text to be displayed.\n */\nfunction text (string) {\n  return {\n    id: nextId(),\n    type: 'text',\n    inputs: Object.seal([]),\n    outputs: Object.seal([]),\n    text: string,\n    width: 2,\n    height: 0.5\n  }\n}\n\n/**\n * Computes a state object to represent the current state of the simulation for\n * the given circuit. If prevState is passed, returns the next state after the\n * given state.\n *\n * The state object is an object containing an outputs field, which is an object\n * that maps each pin ID to a boolean value. For example, if a pin with ID 2 has\n * an output of true, the state object would look something like this:\n * { outputs: { 2: true } }\n *\n * To calculate the inputs and outputs of individual gates, the getInputs and\n * getOutputs helper functions can be used.\n *\n * The input from the user (for example, whether a switch is switched or not) is\n * stored in the inputs field, that maps a gate ID to a user input object. The\n * format of the input depends on the gate itself.\n *\n * The state also keeps track of its state in the previous simulation frame,\n * stored in the prevState field of the state. This is only used in the flip\n * flop components to keep track of edge triggered events.\n */\nfunction nextState (circuit, prevState) {\n  const state = {\n    outputs: {},\n    inputs: {}\n  }\n\n  /* Copy the previous state if it's provided. */\n  if (prevState) {\n    state.prevState = { ...prevState }\n    delete state.prevState.prevState\n  }\n\n  if (prevState) {\n    for (const gate of circuit.gates) {\n      /* Calculate the next output. */\n      const nextOutputs = nextOutputFunctions[gate.type](\n        gate,\n        prevState,\n        circuit\n      )\n\n      for (let i = 0; i < nextOutputs.length; i++) {\n        state.outputs[gate.outputs[i].id] = (\n          nextOutputs[i] ^ gate.outputs[i].isInverted) === 1\n      }\n    }\n\n    Object.assign(state.inputs, prevState.inputs)\n  } else {\n    /* Initialize all outputs to false. */\n    for (const gate of circuit.gates) {\n      for (const pin of gate.outputs) {\n        state.outputs[pin.id] = false\n      }\n    }\n  }\n\n  return state\n}\n\n/**\n * Returns the sender gate for the given receiver gate.\n */\nfunction findSender (receiver, circuit) {\n  return circuit.gates.find(\n    (gate) => gate.type === 'sender' && gate.label === receiver.label\n  )\n}\n\n/**\n * Returns a list of input booleans for the gate given the current simulation\n * state.\n */\nfunction getInputs (gate, state) {\n  return gate.inputs\n    .map((pin) => (state.outputs[pin.connections[0]] ^ pin.isInverted) === 1)\n}\n\n/**\n * Returns a list of output booleans for the gate given the current simulation\n * state.\n */\nfunction getOutputs (gate, state) {\n  return gate.outputs.map((pin) => state.outputs[pin.id])\n}\n\n/**\n * Returns the user input for the gate given the current simulation state.\n */\nfunction getUserInput (gate, state) {\n  return state.inputs[gate.id]\n}\n\n/**\n * Sets the user input for the gate for the current simulation state.\n */\nfunction setUserInput (gate, state, value) {\n  state.inputs[gate.id] = value\n}\n\n/**\n * Skip forward n simulation states given a circuit, n, and the (optional)\n * current state. This function simply calls nextState(circuit, state) n times.\n */\nfunction fastForward (circuit, n, state) {\n  for (let i = 0; i < n; i++) {\n    state = nextState(circuit, state)\n  }\n  return state\n}\n\n/*\n * Function to return a unique id. This should only be used within this JS file.\n * The ID wraps around to 0 once Number.MAX_SAFE_INTEGER is reached. This is\n * assumed to be okay since Number.MAX_SAFE_INTEGER is so large.\n */\nlet currentId = 0\nfunction nextId () {\n  if (currentId >= Number.MAX_SAFE_INTEGER) {\n    currentId = 0\n  }\n\n  return currentId++\n}\n\n/*\n * This function renumbers the IDs of the given circuit so that there are no\n * collisions. This should be called any time a circuit is loaded to avoid\n * collisions. It returns the circuit.\n */\nfunction renumber (circuit) {\n  const clone = { ...circuit }\n  let maxId = currentId\n\n  const calcNewId = (id) => currentId < (Number.MAX_SAFE_INTEGER - id)\n    ? id + currentId\n    : (id - Number.MAX_SAFE_INTEGER) + currentId\n\n  const updateId = (object) => {\n    const clone = {\n      ...object,\n      id: calcNewId(object.id)\n    }\n    if (clone.id > maxId) {\n      maxId = clone.id\n    }\n\n    if (clone.connections) {\n      clone.connections = clone.connections.map(calcNewId)\n    }\n    return clone\n  }\n\n  clone.gates = clone.gates.map((gate) => {\n    const r = updateId(gate)\n    r.inputs = r.inputs.map(updateId)\n    r.outputs = r.outputs.map(updateId)\n    return r\n  })\n\n  currentId = maxId + 1\n\n  return clone\n}\n\n/**\n * Create an object containing the IDs of all valid pins for the given gates.\n */\nconst getValidPins = (gates) => (\n  Object.fromEntries(gates.reduce(\n    (t, gate) => t.concat(\n      gate.inputs.map((pin) => pin.id),\n      gate.outputs.map((pin) => pin.id)),\n    []\n  ).map((id) => [id, true]))\n)\n\n/**\n * Returns a new list of gates from the given list of gates with the\n * connections to invalid pins removed.\n */\nconst removeInvalidConnections = (gates) => {\n  const validPins = getValidPins(gates)\n\n  /* Remove all connections that point to a deleted pin. */\n  return gates.map((gate) => {\n    const gateClone = { ...gate }\n    const updatePin = (pin) => {\n      return {\n        ...pin,\n        connections: pin.connections.filter((id) => validPins[id])\n      }\n    }\n\n    gateClone.inputs = gateClone.inputs.map(updatePin)\n    gateClone.outputs = gateClone.outputs.map(updatePin)\n    return gateClone\n  })\n}\n\n/**\n * Returns a list of all the labels that are used by 2 or more senders in the\n * given list of gates, sorted alphabetically. This is useful as an error check\n * to make sure there are no duplicate senders.\n */\nconst getDuplicateSenderLabels = (gates) => {\n  const senderCounts = {}\n\n  gates.forEach((gate) => {\n    if (gate.type === 'sender') {\n      senderCounts[gate.label] = (senderCounts[gate.label] || 0) + 1\n    }\n  })\n\n  return Object.entries(senderCounts)\n    .filter((x) => x[1] > 1)\n    .map((x) => x[0])\n    .sort()\n}\n\n/**\n * Stores the project in a string. The project can be loaded using the\n * loadProject function.\n */\nconst dumpProject = (circuit, currentPage) => {\n  return JSON.stringify({\n    version: packageJson.version,\n    circuit,\n    currentPage\n  })\n}\n\n/**\n * Loads the project from a string. Returns an object with the circuit in the\n * circuit field, the current page in the currentPage field, and the Flux Logic\n * version in the version field.\n */\nconst loadProject = (data) => {\n  return JSON.parse(data)\n}\n\nexport {\n  /* Simulation. */\n  nextState,\n  getOutputs,\n  getInputs,\n  getUserInput,\n  setUserInput,\n  fastForward,\n\n  /* Circuit creation. */\n  renumber,\n  connect,\n  circuit,\n  andGate,\n  orGate,\n  xorGate,\n  constantGate,\n  switchGate,\n  sender,\n  receiver,\n  led,\n  buffer,\n  pin,\n  mux,\n  demux,\n  sevenSegment,\n  srLatch,\n  dLatch,\n  srDFlipFlop,\n  dFlipFlop,\n  text,\n\n  /* Utils. */\n  removeInvalidConnections,\n  getValidPins,\n  findSender,\n  getDuplicateSenderLabels,\n\n  /* Saving and loading. */\n  loadProject,\n  dumpProject\n}\n","import React from 'react'\n\nfunction Wire (props) {\n  const x0 = Number(props.x0)\n  const y0 = Number(props.y0)\n  const x1 = Number(props.x1)\n  const y1 = Number(props.y1)\n\n  const curve = Math.min(Math.abs(y1 - y0), Math.abs(x1 - x0))\n  const padding = 0.1 + (x1 < x0 ? curve * 0.25 : 0)\n\n  const l = Math.min(x0, x1) - padding\n  const t = Math.min(y0, y1) - padding\n\n  const c0 = x0 - l + curve\n  const c1 = x1 - l - curve\n\n  const width = Math.abs(x1 - x0) + padding * 2\n  const height = Math.abs(y1 - y0) + padding * 2\n\n  const d = `M ${x0 - l} ${y0 - t} ` +\n            `C ${c0} ${y0 - t}, ${c1} ${y1 - t}, ${x1 - l} ${y1 - t}`\n\n  return (\n    <svg\n      width={`${width}in`}\n      height={`${height}in`}\n      viewBox={`0 0 ${width} ${height}`}\n      style={{\n        position: 'absolute',\n        left: `${l}in`,\n        top: `${t}in`,\n        pointerEvents: 'none'\n      }}\n    >\n      <path\n        d={d}\n        stroke='black' strokeWidth='0.01' fill='transparent'\n      />\n    </svg>\n  )\n}\n\nexport default Wire\n","import { useRef, useEffect, useCallback, useState } from 'react'\n\n/**\n * Creates a callback function that calls the given callback by reference. This\n * is useful when multiple components need to use the same callback, and you\n * don't want to trigger a rerender of all the components when the callback\n * changes. Returns the memoized callback.\n */\nexport const useRefCallback = (callback) => {\n  const ref = useRef(null)\n  const memoizedCallback = useCallback(\n    (...args) => ref.current(...args),\n    []\n  )\n\n  useEffect(() => {\n    ref.current = callback\n  }, [callback])\n\n  return memoizedCallback\n}\n\nexport const useUndoable = (state, max) => {\n  const [present, setPresent] = useState(state)\n  const [past, setPast] = useState([])\n  const [future, setFuture] = useState([])\n\n  const undo = useCallback(() => {\n    const canUndo = past.length > 0\n    if (canUndo) {\n      setFuture([present, ...future])\n      setPresent(past[0])\n      setPast(past.slice(1))\n    }\n  }, [present, past, future, setPresent, setPast, setFuture])\n\n  const redo = useCallback(() => {\n    const canRedo = future.length > 0\n    if (canRedo) {\n      setPast([present, ...past])\n      setPresent(future[0])\n      setFuture(future.slice(1))\n    }\n  }, [present, past, future, setPresent, setPast, setFuture])\n\n  const setState = useCallback((state) => {\n    setPast([present, ...past].splice(-(max || 1000)))\n    setPresent(state)\n    setFuture([])\n  }, [present, past, setPresent, setPast, setFuture, max])\n\n  return [present, setState, undo, redo]\n}\n","import React, { useMemo } from 'react'\nimport { useRefCallback } from './hooks'\n\nimport Wire from './Wire'\n\n/**\n * React component used to hold a circuit.\n */\nexport default function Circuit (props) {\n  const theme = props.theme\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  const selection = props.selection\n  const moveAmount = props.moveAmount\n\n  const simState = props.simState\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, gates])\n\n  const onGateClick = useRefCallback(props.onGateClick)\n  const onGateMouseDown = useRefCallback(props.onGateMouseDown)\n\n  const onPinMouseUp = useRefCallback(props.onPinMouseUp)\n  const onPinMouseDown = useRefCallback(props.onPinMouseDown)\n\n  return (\n    <>\n      {\n        /* Wires */\n        gates.map(\n          (gate) => gate.inputs\n            .filter((pin) => pin.connections[0])\n            .map((pin) =>\n              <Wire\n                key={`${pin.id}-${pin.connections[0].id}`}\n                x0={pinPositions[pin.connections[0]].x}\n                y0={pinPositions[pin.connections[0]].y}\n                x1={pinPositions[pin.id].x}\n                y1={pinPositions[pin.id].y}\n              />))\n      }\n\n      {\n        /* Gates */\n        gates.map((gate) => {\n          const x = (gate.x || 0) +\n            (props.selection[gate.id] ? moveAmount[0] : 0)\n          const y = (gate.y || 0) +\n            (props.selection[gate.id] ? moveAmount[1] : 0)\n\n          const Component = theme.getGateComponent(gate)\n\n          return (\n            <Component\n              simState={simState}\n              gate={gate}\n              x={x}\n              y={y}\n              key={gate.id}\n              theme={theme}\n              selected={selection[gate.id]}\n              editable={isEditable}\n              onGateClick={onGateClick}\n              onGateMouseDown={onGateMouseDown}\n              onPinMouseDown={onPinMouseDown}\n              onPinMouseUp={onPinMouseUp}\n            />\n          )\n        })\n      }\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nconst useStyles = makeStyles((theme) => ({\n  selectionBox: {\n    position: 'fixed',\n    background: fade(theme.palette.primary.main, 0.3),\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component for a selection box dragged by the user.\n */\nfunction SelectionBox (props) {\n  const [selectionEnd, setSelectionEnd] = useState(props.selectionStart)\n\n  const selectionStart = props.selectionStart\n  const onSelectionChanged = props.onSelectionChanged\n\n  const classes = useStyles()\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      const end = [e.clientX, e.clientY]\n      setSelectionEnd(end)\n      onSelectionChanged(\n        [\n          Math.min(selectionStart[0], end[0]),\n          Math.min(selectionStart[1], end[1])\n        ],\n        [\n          Math.max(selectionStart[0], end[0]),\n          Math.max(selectionStart[1], end[1])\n        ])\n    }\n\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [selectionStart, onSelectionChanged])\n\n  const hasMoved = (\n    selectionEnd[0] !== props.selectionStart[0] &&\n    selectionEnd[1] !== props.selectionStart[1])\n\n  /*\n   * The selection box should only be visible after the user moves their mouse.\n   */\n  return hasMoved && (\n    <div\n      className={classes.selectionBox} style={{\n        left: Math.min(props.selectionStart[0], selectionEnd[0]),\n        top: Math.min(props.selectionStart[1], selectionEnd[1]),\n        width: Math.abs(selectionEnd[0] - props.selectionStart[0]),\n        height: Math.abs(selectionEnd[1] - props.selectionStart[1])\n      }}\n    />\n  )\n}\n\nexport default SelectionBox\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\n\nimport * as logic from './logic'\n\nimport Wire from './Wire'\nimport Circuit from './Circuit'\nimport SelectionBox from './SelectionBox'\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    width: '8.5in',\n    height: '11in',\n    position: 'relative'\n  }\n}))\n\n/*\n * A react component for the wire currently being dragged by the user.\n */\nfunction PreviewWire (props) {\n  const [end, setEnd] = useState([props.x0, props.y0])\n\n  const clientToPage = props.clientToPage\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      setEnd(clientToPage([e.clientX, e.clientY]))\n    }\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [clientToPage])\n\n  if (props.isOutputPin) {\n    return (\n      <Wire x0={props.x0} y0={props.y0} x1={end[0]} y1={end[1]} />\n    )\n  } else {\n    return (\n      <Wire x1={props.x0} y1={props.y0} x0={end[0]} y0={end[1]} />\n    )\n  }\n}\n\nconst Page = React.forwardRef((props, ref) => {\n  const selection = props.selection\n  const theme = props.theme\n\n  const simState = props.simState\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  const onCircuitChanged = props.onCircuitChanged\n\n  const onSelectionChanged = props.onSelectionChanged\n  const onUserInputChanged = props.onUserInputChanged\n\n  const classes = useStyles()\n\n  const [selectionStart, setSelectionStart] = useState(null)\n\n  /* Object containing IDs of gates currently being selected. */\n  const [toBeAddedToSelection, setToBeAddedToSelection] = useState({})\n\n  /* Whether or not the selected items are being dragged. */\n  const [isDragging, setIsDragging] = useState(false)\n\n  /*\n   * Whether or not the selected items were dragged (to prevent the click event\n   * from being fired after a drag.\n   */\n  const [didDrag, setDidDrag] = useState(false)\n\n  /* The start and end positions of the drag in client coordinates. */\n  const [moveStart, setMoveStart] = useState([0, 0])\n  const [moveEnd, setMoveEnd] = useState([0, 0])\n\n  const [wireStartPin, setWireStartPin] = useState(null)\n\n  /* Whether or not the pin being dragged from is an output pin. */\n  const [wireStartPinIsOutput, setWireStartPinIsOutput] = useState(false)\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  /* The amount to move teh selected components in page coordinates. */\n  const moveAmount = isDragging\n    ? [\n      (moveEnd[0] - moveStart[0]) / 96,\n      (moveEnd[1] - moveStart[1]) / 96\n    ]\n    : [0, 0]\n\n  /*\n   * Function to convert from client coordianates to coordinates on the page.\n   */\n  const clientToPage = (coord) => {\n    const bounds = ref.current.getBoundingClientRect()\n    return [\n      (coord[0] - bounds.left) / 96,\n      (coord[1] - bounds.top) / 96\n    ]\n  }\n\n  /* Called when the bounds of the selection box changes. */\n  const onSelectionBoxChanged = (ul, br) => {\n    /* Calculate the selection on the page. */\n\n    const a = clientToPage(ul)\n    const b = clientToPage(br)\n\n    let clone = null\n\n    /* Determine if any items were added to the selection. */\n    gates.forEach((gate) => {\n      const width = props.theme.getWidth(gate)\n      const height = props.theme.getHeight(gate)\n\n      const isOverlapping = (\n        gate.x >= a[0] && gate.y >= a[1] &&\n        gate.x + width <= b[0] && gate.y + height <= b[1])\n\n      if (isOverlapping && !toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        clone[gate.id] = true\n      } else if (!isOverlapping && toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        delete clone[gate.id]\n      }\n    })\n\n    if (clone) {\n      setToBeAddedToSelection(clone)\n    }\n  }\n\n  const onGateClick = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      if (!didDrag) {\n        const newSelection = {}\n        if (e.shiftKey) {\n          Object.assign(newSelection, selection)\n        }\n        newSelection[gate.id] = !newSelection[gate.id]\n        onSelectionChanged(newSelection)\n        e.stopPropagation()\n      }\n    } else if (simState != null) {\n      if (gate.type === 'switch') {\n        onUserInputChanged(gate, !logic.getUserInput(gate, simState))\n      }\n    }\n  }, [\n    selection,\n    isEditable,\n    didDrag,\n    onSelectionChanged,\n    onUserInputChanged,\n    simState\n  ])\n\n  const onGateMouseDown = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      const isSelectionEmpty = Object.keys(selection).length === 0\n\n      setMoveStart([e.clientX, e.clientY])\n      setMoveEnd([e.clientX, e.clientY])\n      setDidDrag(false)\n\n      /* If no gates have been selected, select the gate. */\n      if (isSelectionEmpty) {\n        onSelectionChanged({ [gate.id]: true })\n      }\n\n      if (selection[gate.id] || isSelectionEmpty) {\n        setIsDragging(true)\n      }\n      e.stopPropagation()\n    }\n    e.preventDefault()\n  }, [\n    isEditable,\n    selection,\n    setMoveStart,\n    setMoveEnd,\n    setDidDrag,\n    onSelectionChanged\n  ])\n\n  const onMove = useCallback((moveAmount) => {\n    const clone = { ...circuit }\n    clone.gates = clone.gates.map((gate) => {\n      if (selection[gate.id]) {\n        /* Copy the gate. */\n        gate = { ...gate }\n        gate.x += moveAmount[0]\n        gate.y += moveAmount[1]\n      }\n      return gate\n    })\n    onCircuitChanged(clone)\n  }, [circuit, selection, onCircuitChanged])\n\n  const addWire = useCallback((from, to) => {\n    const clone = { ...circuit }\n\n    /*\n     * Function that takes in a pin, clones it and adds a connection if it is\n     * the from or to pin. Returns the pin otherwise.\n     */\n    const updatePin = (pin, isOutputPin) => {\n      if (isOutputPin || pin.connections.length === 0) {\n        if (pin.id === from) {\n          return { ...pin, connections: [...pin.connections, to] }\n        } else if (pin.id === to) {\n          return { ...pin, connections: [...pin.connections, from] }\n        }\n      }\n      return pin\n    }\n\n    /* Only update if the input pin has no connections. */\n    let shouldUpdate = false\n\n    let inputGateId, outputGateId\n\n    clone.gates = clone.gates.map((gate) => {\n      let hasPin = false\n      const inputs = gate.inputs.map((pin) => {\n        const r = updatePin(pin)\n        if (r !== pin) {\n          inputGateId = gate.id\n          hasPin = true\n        }\n        return r\n      })\n\n      /* If the gate has the pin, clone the gate. */\n      if (hasPin) {\n        shouldUpdate = true\n        return { ...gate, inputs }\n      } else {\n        return gate\n      }\n    })\n\n    if (shouldUpdate) {\n      /* Update output pin. */\n      clone.gates = clone.gates.map((gate) => {\n        let hasPin = false\n        const outputs = gate.outputs.map((pin) => {\n          const r = updatePin(pin, true)\n          if (r !== pin) {\n            outputGateId = gate.id\n            hasPin = true\n          }\n          return r\n        })\n\n        /* If the gate has the pin, clone it. */\n        if (hasPin) {\n          return { ...gate, outputs }\n        } else {\n          return gate\n        }\n      })\n\n      /* Only add the wire if the input and output are not on the same gate. */\n      if (inputGateId !== outputGateId) {\n        onCircuitChanged(clone)\n      }\n    }\n  }, [circuit, onCircuitChanged])\n\n  const onPinMouseDown = useCallback((e, pin, isOutputPin) => {\n    if (isEditable && e.button === 0) {\n      /* If the pin is an output pin, start dragging a wire from it. */\n      if (isOutputPin) {\n        setWireStartPin(pin.id)\n        setWireStartPinIsOutput(isOutputPin)\n      } else {\n        /*\n         * If the pin is an input pin and already has a connection, remove the\n         * connection and start dragging from the connected pin.\n         */\n        if (pin.connections.length > 0) {\n          const clone = { ...circuit }\n          clone.gates = clone.gates.map((gate) => {\n            const inIndex = gate.inputs.indexOf(pin)\n            const outIndex = gate.outputs.findIndex(\n              (output) => output.id === pin.connections[0])\n\n            if (inIndex !== -1) {\n              const gateClone = {\n                ...gate,\n                inputs: [...gate.inputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.inputs[inIndex] = { ...pin, connections: [] }\n\n              return gateClone\n            } else if (outIndex !== -1) {\n              const output = gate.outputs[outIndex]\n              const gateClone = {\n                ...gate,\n                outputs: [...gate.outputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.outputs[outIndex] = {\n                ...output,\n                connections: output.connections.filter((id) => id !== pin.id)\n              }\n\n              return gateClone\n            } else {\n              return gate\n            }\n          })\n\n          /* Update the circuit */\n          onCircuitChanged(clone)\n\n          setWireStartPin(pin.connections[0])\n          setWireStartPinIsOutput(true)\n        } else {\n          setWireStartPin(pin.id)\n          setWireStartPinIsOutput(isOutputPin)\n        }\n      }\n    }\n    e.stopPropagation()\n    e.preventDefault()\n  }, [\n    circuit,\n    isEditable,\n    setWireStartPin,\n    setWireStartPinIsOutput,\n    onCircuitChanged\n  ])\n\n  const onPinMouseUp = useCallback((e, pin, isOutputPin) => {\n    if (isEditable) {\n      /*\n       * Add a wire if the wire start pin is different from the wire\n       * end pin, and both of the pins are not output pins\n       */\n      if (wireStartPin !== null &&\n          wireStartPin !== pin.id &&\n          isOutputPin ^ wireStartPinIsOutput) {\n        addWire(wireStartPin, pin.id)\n        e.stopPropagation()\n        e.preventDefault()\n      }\n      setWireStartPin(null)\n    }\n  }, [isEditable, wireStartPin, wireStartPinIsOutput, addWire])\n\n  /*\n   * The total selection, including elements currently being selected as well as\n   * the previously selected elements.\n   */\n  const totalSelection = { ...props.selection, ...toBeAddedToSelection }\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    circuit.gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, circuit])\n\n  /*\n   * Add a mouseup event listener to the window. We need to do this in case the\n   * user drags outside the window.\n   */\n  useEffect(() => {\n    const onMouseUp = (e) => {\n      if (!isEditable) {\n        e.preventDefault()\n      } else if (e.button === 0) {\n        if (isDragging) {\n          onMove(moveAmount)\n          setIsDragging(false)\n          e.stopPropagation()\n        } else if (selectionStart) {\n          setToBeAddedToSelection({})\n          onSelectionChanged(totalSelection)\n        }\n        setSelectionStart(null)\n\n        if (wireStartPin !== null) {\n          setWireStartPin(null)\n        }\n        e.preventDefault()\n      }\n    }\n\n    window.addEventListener('mouseup', onMouseUp)\n    return () => window.removeEventListener('mouseup', onMouseUp)\n  })\n\n  useEffect(() => {\n    if (isEditable) {\n      const onMouseMove = (e) => {\n        if (isDragging) {\n          setMoveEnd([\n            e.clientX,\n            e.clientY\n          ])\n        }\n\n        if (!didDrag) {\n          setDidDrag(true)\n        }\n      }\n      window.addEventListener('mousemove', onMouseMove)\n      return () => window.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [isDragging, didDrag, isEditable])\n\n  return (\n    <Paper\n      elevation={3}\n      square\n      className={classes.page}\n      ref={ref}\n      onMouseDown={(e) => {\n        if (isEditable && e.button === 0) {\n          setSelectionStart([e.clientX, e.clientY])\n\n          /* Reset the selection if the user did not click shift. */\n          if (!e.shiftKey) {\n            onSelectionChanged({})\n          }\n        }\n\n        document.activeElement.blur()\n        e.preventDefault()\n      }}\n    >\n      {\n        isEditable && wireStartPin !== null && (\n          <PreviewWire\n            x0={pinPositions[wireStartPin].x}\n            y0={pinPositions[wireStartPin].y}\n            clientToPage={clientToPage}\n            isOutputPin={wireStartPinIsOutput}\n          />\n        )\n      }\n      <Circuit\n        page={props.page}\n        circuit={circuit}\n        editable={isEditable}\n        selection={totalSelection}\n        theme={theme}\n        moveAmount={moveAmount}\n        onPinMouseDown={onPinMouseDown}\n        onPinMouseUp={onPinMouseUp}\n        onGateClick={onGateClick}\n        onGateMouseDown={onGateMouseDown}\n        simState={simState}\n      />\n      {\n        isEditable && selectionStart && (\n          <SelectionBox\n            selectionStart={selectionStart}\n            onSelectionChanged={onSelectionBoxChanged}\n          />\n        )\n      }\n    </Paper>\n  )\n})\n\nexport default Page\n","import React, { useState } from 'react'\n\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport Collapse from '@material-ui/core/Collapse'\n\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\n/**\n * A list item capable of being expanded or collapsed.\n */\nexport default function ListSection (props) {\n  const [isExpanded, setIsExpanded] = useState(true)\n  return (\n    <>\n      <ListItem button onClick={() => setIsExpanded(!isExpanded)}>\n        <ListItemIcon>\n          {\n            isExpanded\n              ? <ExpandLessIcon />\n              : <ExpandMoreIcon />\n          }\n        </ListItemIcon>\n        <ListItemText>{props.title}</ListItemText>\n      </ListItem>\n      <Collapse in={isExpanded}>\n        <ListItem>\n          {props.children}\n        </ListItem>\n      </Collapse>\n    </>\n  )\n}\n","import React from 'react'\n\nimport Tooltip from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport List from '@material-ui/core/List'\n\nimport ListSection from './ListSection'\n\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SenderSvg from './assets/sender.svg'\nimport ReceiverSvg from './assets/receiver.svg'\nimport MuxSvg from './assets/mux.svg'\nimport DemuxSvg from './assets/demux.svg'\nimport SevenSegmentSvg from './assets/seven-segment.svg'\nimport SrLatchSvg from './assets/sr-latch.svg'\nimport DLatchSvg from './assets/d-latch.svg'\nimport DFlipFlopSvg from './assets/d-flip-flop.svg'\nimport SrDFlipFlopSvg from './assets/sr-d-flip-flop.svg'\nimport TextSvg from './assets/text.svg'\n\nimport PinInvertedSvg from './assets/pin-inverted.svg'\n\nimport Wire from './Wire'\n\nimport * as logic from './logic'\n\nfunction PaletteItem (props) {\n  return (\n    <Grid item xs={3}>\n      <Tooltip title={`Add ${props.text}`}>\n        <Button onClick={props.onClick}>\n          <div\n            style={{\n              position: 'relative',\n              width: '0.5in',\n              height: '0.5in',\n              overflow: 'hidden'\n            }}\n          >\n            {\n              props.inverted && (\n                <Wire\n                  x0={0.25}\n                  y0={0.25}\n                  x1={0.5 - 0.0625}\n                  y1={0.25}\n                />\n              )\n            }\n\n            {\n              props.inverted && (\n                <img\n                  src={PinInvertedSvg}\n                  alt=''\n                  style={{\n                    position: 'absolute',\n                    left: `${0.5 - 0.125}in`,\n                    top: `${0.25 - 0.0625}in`\n                  }}\n                />\n              )\n            }\n\n            <img\n              src={props.svg}\n              alt=''\n              style={{\n                position: 'absolute',\n                left: props.inverted ? '-0.0625in' : 0,\n                top: 0\n              }}\n            />\n          </div>\n        </Button>\n      </Tooltip>\n    </Grid>\n  )\n}\n\n/**\n * A palette for placing components.\n * Props:\n *     - onSelect(factory)\n *           A callback called when the user selects an item. The factory\n *           parameter is a function that constructs a new logic gate.\n */\nconst Palette = React.memo((props) => {\n  const invert = (gate) => {\n    gate.outputs[0].isInverted = true\n    return gate\n  }\n  return (\n    <List>\n      <ListSection title='Basic Gates'>\n        <Grid container>\n          <PaletteItem\n            svg={AndGateSvg}\n            text='AND gate'\n            onClick={() => props.onSelect(logic.andGate)}\n          />\n          <PaletteItem\n            svg={AndGateSvg}\n            text='NAND gate'\n            onClick={() => props.onSelect(() => invert(logic.andGate()))}\n            inverted\n          />\n          <PaletteItem\n            svg={OrGateSvg}\n            text='OR gate'\n            onClick={() => props.onSelect(logic.orGate)}\n          />\n          <PaletteItem\n            svg={OrGateSvg}\n            text='NOR gate'\n            onClick={() => props.onSelect(() => invert(logic.orGate()))}\n            inverted\n          />\n          <PaletteItem\n            svg={XorGateSvg}\n            text='XOR gate'\n            onClick={() => props.onSelect(logic.xorGate)}\n          />\n          <PaletteItem\n            svg={ZeroGateSvg}\n            text='ground'\n            onClick={() => props.onSelect(() => logic.constantGate(false))}\n          />\n          <PaletteItem\n            svg={OneGateSvg}\n            text='+1'\n            onClick={() => props.onSelect(() => logic.constantGate(true))}\n          />\n          <PaletteItem\n            svg={BufferGateSvg}\n            text='buffer'\n            onClick={() => props.onSelect(() => logic.buffer())}\n          />\n          <PaletteItem\n            svg={BufferGateSvg}\n            text='inverter'\n            onClick={() => props.onSelect(() => invert(logic.buffer()))}\n            inverted\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Input/Output'>\n        <Grid container>\n          <PaletteItem\n            svg={LedSvg}\n            text='LED'\n            onClick={() => props.onSelect(() => logic.led())}\n          />\n          <PaletteItem\n            svg={SevenSegmentSvg}\n            text='7-segment display'\n            onClick={() => props.onSelect(logic.sevenSegment)}\n          />\n          <PaletteItem\n            svg={SwitchOffSvg}\n            text='switch'\n            onClick={() => props.onSelect(logic.switchGate)}\n          />\n          <PaletteItem\n            svg={SenderSvg}\n            text='sender'\n            onClick={() => props.onSelect(logic.sender)}\n          />\n          <PaletteItem\n            svg={ReceiverSvg}\n            text='receiver'\n            onClick={() => props.onSelect(logic.receiver)}\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Mux/Demux'>\n        <Grid container>\n          <PaletteItem\n            svg={MuxSvg}\n            text='2 to 1 mux'\n            onClick={() => props.onSelect(() => logic.mux(1))}\n          />\n          <PaletteItem\n            svg={MuxSvg}\n            text='4 to 1 mux'\n            onClick={() => props.onSelect(() => logic.mux(2))}\n          />\n          <PaletteItem\n            svg={DemuxSvg}\n            text='1 to 2 demux'\n            onClick={() => props.onSelect(() => logic.demux(1))}\n          />\n          <PaletteItem\n            svg={DemuxSvg}\n            text='1 to 4 demux'\n            onClick={() => props.onSelect(() => logic.demux(2))}\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Flip-Flops and Latches'>\n        <Grid container>\n          <PaletteItem\n            svg={SrLatchSvg}\n            text='gated SR-latch'\n            onClick={() => props.onSelect(logic.srLatch)}\n          />\n          <PaletteItem\n            svg={DLatchSvg}\n            text='D-latch'\n            onClick={() => props.onSelect(logic.dLatch)}\n          />\n          <PaletteItem\n            svg={DFlipFlopSvg}\n            text='D-flip-flop'\n            onClick={() => props.onSelect(logic.dFlipFlop)}\n          />\n          <PaletteItem\n            svg={SrDFlipFlopSvg}\n            text='SR-D-flip-flop'\n            onClick={() => props.onSelect(logic.srDFlipFlop)}\n          />\n        </Grid>\n      </ListSection>\n      <ListSection title='Other'>\n        <Grid container>\n          <PaletteItem\n            svg={TextSvg}\n            text='text'\n            onClick={() => props.onSelect(() => logic.text('Text'))}\n          />\n        </Grid>\n      </ListSection>\n    </List>\n  )\n})\n\nexport default Palette\n","import React, { useState, useEffect, useMemo } from 'react'\n\nimport * as logic from './logic'\n\n/* Icons. */\nimport DeleteIcon from '@material-ui/icons/Delete'\n\n/* Material UI components. */\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport ListSection from './ListSection'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  evenlySpaced: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}))\n\nfunction PinProperties (props) {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        <Tooltip title='Invert pin'>\n          <Checkbox\n            checked={Boolean(props.pin.isInverted)}\n            onChange={(e) => {\n              const clone = { ...props.pin }\n              if (e.target.checked) {\n                clone.isInverted = true\n              } else {\n                delete clone.isInverted\n              }\n              props.onChange(clone)\n            }}\n          />\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText> {props.label || `Pin ${props.index + 1}`} </ListItemText>\n      {\n        props.deletable && (\n          <Button\n            onClick={props.onPinDeleted}\n          >\n            <DeleteIcon />\n          </Button>\n        )\n      }\n    </ListItem>\n  )\n}\n\n/**\n * A react component for the inspector. The inspector allows the user to modify\n * the properties of each logic gate through a forms-style user interface.\n */\nexport default function Inspector (props) {\n  const { circuit, selection } = props\n  const classes = useStyles()\n\n  const selectedGates = useMemo(\n    () => circuit.gates.filter((gate) => selection[gate.id]),\n    [circuit, selection]\n  )\n\n  const minX = useMemo(\n    () => selectedGates.reduce((min, gate) => Math.min(min, gate.x), Infinity),\n    [selectedGates]\n  )\n\n  const minY = useMemo(\n    () => selectedGates.reduce((min, gate) => Math.min(min, gate.y), Infinity),\n    [selectedGates]\n  )\n\n  const sharedLabel = useMemo(\n    () => selectedGates.reduce((label, gate) =>\n      label === undefined\n        ? gate.label || ''\n        : (gate.label === label && gate.label !== undefined ? label : ''),\n    undefined) || '',\n    [selectedGates]\n  )\n\n  const allHaveLabels = useMemo(\n    () => selectedGates.every((gate) => gate.label !== undefined),\n    [selectedGates]\n  )\n\n  const [x, setX] = useState(0)\n  const [y, setY] = useState(0)\n  const [label, setLabel] = useState('')\n\n  useEffect(() => {\n    setX(minX)\n    setY(minY)\n  }, [minX, minY])\n\n  useEffect(() => {\n    setLabel(sharedLabel)\n  }, [sharedLabel])\n\n  const updateGates = (callback) => {\n    const clone = { ...circuit }\n    clone.gates = circuit.gates.map((gate) => {\n      if (selection[gate.id]) {\n        return callback(gate)\n      } else {\n        return gate\n      }\n    })\n    props.onCircuitChanged(clone)\n  }\n\n  const updatePin = (index, pin, isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = [...gateClone.outputs]\n      gateClone.outputs[index] = pin\n    } else {\n      gateClone.inputs = [...gateClone.inputs]\n      gateClone.inputs[index] = pin\n    }\n    props.onCircuitChanged(clone)\n  }\n\n  const addPin = (isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = [...gateClone.outputs, logic.pin()]\n    } else {\n      gateClone.inputs = [...gateClone.inputs, logic.pin()]\n    }\n    props.onCircuitChanged(clone)\n  }\n\n  const deletePin = (index, isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = gateClone.outputs.filter((v, i) => i !== index)\n    } else {\n      gateClone.inputs = gateClone.inputs.filter((v, i) => i !== index)\n    }\n\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n\n    props.onCircuitChanged(clone)\n  }\n\n  const alignX = () => {\n    const clone = { ...circuit }\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, x: minX }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const alignY = () => {\n    const clone = { ...circuit }\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, y: minY }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const distributeX = () => {\n    const clone = { ...circuit }\n    const order = [...selectedGates].sort((a, b) => a.x - b.x)\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, x: order.indexOf(gate) * 0.75 + minX }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const distributeY = () => {\n    const clone = { ...circuit }\n    const order = [...selectedGates].sort((a, b) => a.y - b.y)\n    clone.gates = circuit.gates.map((gate) =>\n      selection[gate.id]\n        ? { ...gate, y: order.indexOf(gate) * 0.5 + minY }\n        : gate)\n    props.onCircuitChanged(clone)\n  }\n\n  const gate = selectedGates[0]\n\n  /* Properties only editable for a single gate. */\n  const [text, setText] = useState('')\n  const [width, setWidth] = useState(0)\n  const [height, setHeight] = useState(0)\n\n  useEffect(() => {\n    if (gate) {\n      setText(gate.text || '')\n      setWidth(gate.width || 0)\n      setHeight(gate.height || 0)\n    }\n  }, [gate])\n\n  if (selectedGates.length === 0) {\n    return (\n      <Box p={3}>\n        <Typography variant='body1'>\n          Make a selection, then its properties will be available here.\n        </Typography>\n      </Box>\n    )\n  } else {\n    const isLogicGate = (\n      gate.type === 'and' ||\n      gate.type === 'or' ||\n      gate.type === 'xor')\n\n    const inputProps = (\n      <ListSection title='Inputs'>\n        <List>\n          {\n            gate.inputs.map((pin, i) =>\n              <PinProperties\n                key={i}\n                index={i}\n                pin={pin}\n                label={\n                  gate.type === 'mux' &&\n                    (i < gate.n ? `Select ${i + 1}` : `Data ${i - gate.n + 1}`)\n                }\n                onChange={(newPin) => updatePin(i, newPin, false)}\n                onPinDeleted={() => deletePin(i, false)}\n                deletable={gate.inputs.length > 2 && isLogicGate}\n              />\n            )\n          }\n          {\n            isLogicGate &&\n        (gate.inputs.length < 4) &&\n        (\n          <ListItem>\n            <Button\n              fullWidth\n              onClick={() => addPin(false)}\n            >\n              Add Pin\n            </Button>\n          </ListItem>\n        )\n          }\n        </List>\n      </ListSection>\n    )\n\n    const outputProps = (\n      <ListSection title='Outputs'>\n        <List>\n          {\n            gate.outputs.map((pin, i) =>\n              <PinProperties\n                key={i}\n                index={i}\n                pin={pin}\n                onChange={(newPin) => updatePin(i, newPin, true)}\n                onPinDeleted={() => deletePin(i, true)}\n              />\n            )\n          }\n        </List>\n      </ListSection>\n    )\n\n    const textProps = (\n      <ListSection title='Text'>\n        <TextField\n          multiline\n          fullWidth\n          label='Text'\n          variant='filled'\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onBlur={(e) => {\n            if (e.target.value.length > 0) {\n              updateGates((gate) => ({\n                ...gate,\n                text: e.target.value\n              }))\n            }\n          }}\n        />\n      </ListSection>\n    )\n\n    const sizeProps = (\n      <ListSection title='Size'>\n        <TextField\n          fullWidth\n          label='Width'\n          variant='filled'\n          value={width}\n          onChange={(e) => setWidth(e.target.value)}\n          onBlur={(e) => {\n            if (!isNaN(e.target.value)) {\n              updateGates((gate) => ({\n                ...gate,\n                width: Number(e.target.value)\n              }))\n            }\n          }}\n        />\n\n        <TextField\n          fullWidth\n          label='Height'\n          variant='filled'\n          onChange={(e) => setHeight(e.target.value)}\n          value={height}\n          onBlur={(e) => {\n            if (!isNaN(e.target.value)) {\n              updateGates((gate) => ({\n                ...gate,\n                height: Number(e.target.value)\n              }))\n            }\n          }}\n        />\n      </ListSection>\n    )\n\n    /* Properties only editable for an individual gate. */\n    const gateProps = (\n      <>\n        {gate.inputs.length > 0 && inputProps}\n        {gate.outputs.length > 0 && outputProps}\n        {gate.width !== undefined && gate.height !== undefined && sizeProps}\n        {gate.text !== undefined && textProps}\n      </>\n    )\n\n    const positionProps = (\n      <ListSection title='Position'>\n        <Box class={classes.evenlySpaced}>\n          <TextField\n            fullWidth\n            label='X'\n            variant='filled'\n            value={x}\n            onChange={(e) => setX(e.target.value)}\n            onBlur={(e) => {\n              if (!isNaN(e.target.value)) {\n                updateGates((gate) => ({\n                  ...gate,\n                  x: Number(e.target.value) - minX + gate.x\n                }))\n              }\n            }}\n          />\n\n          <TextField\n            fullWidth\n            label='Y'\n            variant='filled'\n            onChange={(e) => setY(e.target.value)}\n            value={y}\n            onBlur={(e) => {\n              if (!isNaN(e.target.value)) {\n                updateGates((gate) => ({\n                  ...gate,\n                  y: Number(e.target.value) - minY + gate.y\n                }))\n              }\n            }}\n          />\n\n          {\n            selectedGates.length > 1 && (\n              <>\n                <ButtonGroup\n                  fullWidth\n                >\n                  <Button onClick={alignX}>\n                    Align X\n                  </Button>\n                  <Button onClick={alignY}>\n                    Align Y\n                  </Button>\n                </ButtonGroup>\n                <ButtonGroup\n                  fullWidth\n                >\n                  <Button onClick={distributeX}>\n                    Distribute X\n                  </Button>\n                  <Button onClick={distributeY}>\n                    Distribute Y\n                  </Button>\n                </ButtonGroup>\n              </>\n            )\n          }\n        </Box>\n      </ListSection>\n    )\n\n    const labelProps = (\n      <>\n        <ListSection title='Label'>\n          <TextField\n            fullWidth\n            label='Label'\n            variant='filled'\n            value={label}\n            onChange={(e) => setLabel(e.target.value)}\n            onBlur={(e) => {\n              if (e.target.value.length > 0) {\n                updateGates((gate) => ({\n                  ...gate,\n                  label: e.target.value\n                }))\n              }\n            }}\n          />\n        </ListSection>\n      </>\n    )\n\n    return (\n      <form noValidate>\n        <List>\n          {positionProps}\n          {allHaveLabels && labelProps}\n          {selectedGates.length === 1 && gateProps}\n        </List>\n      </form>\n    )\n  }\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nimport ReactMarkdown from 'react-markdown'\n\nimport Wire from './Wire'\n\nconst useStyles = makeStyles((theme) => ({\n  selectedGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    background: fade(theme.palette.primary.main, 0.3),\n    borderRadius: '4px',\n    cursor: 'move'\n  },\n\n  gate: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  pin: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  editableGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.15)\n    }\n  },\n\n  editablePin: {\n    position: 'absolute',\n    margin: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.3)\n    }\n  },\n\n  label: {\n    position: 'relative',\n    transform: 'translate(-50%, -50%)',\n    textAlign: 'center',\n    width: '1in',\n    top: '-.1in',\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component representing a single logic gate.\n */\nexport const LogicGateContainer = (props) => {\n  /*\n   * The object responsible for placing the pins and choosing the SVGs. Note\n   * that this is not related to the material-ui theme.\n   */\n  const theme = props.theme\n\n  const classes = useStyles()\n\n  /* The position of the gate. */\n  const x = props.x\n  const y = props.y\n\n  const width = theme.getWidth(props.gate)\n  const height = theme.getHeight(props.gate)\n\n  /* The positions of the pins. */\n  const pinPositions = theme.getPinPositions(props.gate, x, y)\n\n  const isSelected = props.selected\n\n  const Pin = (pinProps) => (\n    <img\n      alt=''\n      src={theme.getPinSvg(pinProps.pin)}\n      onMouseDown={\n        (e) => props.onPinMouseDown(e, pinProps.pin, pinProps.isOutput)\n      }\n      onMouseUp={\n        (e) => props.onPinMouseUp(e, pinProps.pin, pinProps.isOutput)\n      }\n      style={{\n        left: `${pinPositions[pinProps.pin.id].x - x - 0.0625}in`,\n        top: `${pinPositions[pinProps.pin.id].y - y - 0.0625}in`\n      }}\n      className={props.editable ? classes.editablePin : classes.pin}\n    />\n  )\n\n  return (\n    <div\n      style={{\n        left: `${x}in`,\n        top: `${y}in`,\n        width: `${width}in`,\n        height: `${height}in`\n      }}\n      className={\n        props.editable\n          ? (isSelected ? classes.selectedGate : classes.editableGate)\n          : classes.gate\n      }\n    >\n\n      {\n        /* Input pin wires */\n        props.gate.outputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={(pinPositions[pin.id].x1 || pinPositions[pin.id].x - 0.25) - x}\n            y1={(pinPositions[pin.id].y1 || pinPositions[pin.id].y) - y}\n          />)\n      }\n\n      {\n        /* Output pin wires */\n        props.gate.inputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={(pinPositions[pin.id].x1 || pinPositions[pin.id].x + 0.25) - x}\n            y1={(pinPositions[pin.id].y1 || pinPositions[pin.id].y) - y}\n          />)\n      }\n\n      {\n        /* The gate itself */\n        props.children\n      }\n\n      {\n        props.gate.label && (\n          <p\n            className={classes.label}\n            style={{ left: `${theme.getWidth(props.gate) / 2}in` }}\n          >\n            {props.gate.label}\n          </p>\n        )\n      }\n\n      {\n        /* Input pins */\n        props.gate.inputs.map((pin) =>\n          <Pin pin={pin} isOutput={false} key={pin.id} />\n        )\n      }\n\n      {\n        /* Output pins */\n        props.gate.outputs.map((pin) =>\n          <Pin pin={pin} isOutput key={pin.id} />\n        )\n      }\n    </div>\n  )\n}\n\nexport const LogicGate = React.memo((props) => (\n  <LogicGateContainer {...props}>\n    <img\n      alt={props.gate.type}\n      src={props.svg}\n      style={{ position: 'absolute' }}\n      onClick={(e) => props.onGateClick(e, props.gate)}\n      onMouseDown={(e) => props.onGateMouseDown(e, props.gate)}\n    />\n  </LogicGateContainer>\n))\n\nexport const Text = React.memo((props) => (\n  <LogicGateContainer {...props}>\n    <div\n      onClick={(e) => props.onGateClick(e, props.gate)}\n      onMouseDown={(e) => props.onGateMouseDown(e, props.gate)}\n      style={{\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: '100%',\n        height: '100%'\n      }}\n    >\n      <ReactMarkdown>\n        {props.gate.text}\n      </ReactMarkdown>\n    </div>\n  </LogicGateContainer>\n))\n","/*\n * Themes are responsible for determining the images to use for each logic gate,\n * as well as the position of the pins.\n */\n\nimport * as logic from './logic'\nimport React from 'react'\n\n/* SVGs */\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OpenPinSvg from './assets/open-pin.svg'\nimport OpenPinInvertedSvg from './assets/open-pin-inverted.svg'\nimport PinSvg from './assets/pin.svg'\nimport PinInvertedSvg from './assets/pin-inverted.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport LedGlowSvg from './assets/led-glow.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SwitchOnSvg from './assets/switch-on.svg'\nimport SenderSvg from './assets/sender.svg'\nimport ReceiverSvg from './assets/receiver.svg'\nimport MuxSvg from './assets/mux.svg'\nimport DemuxSvg from './assets/demux.svg'\nimport SrLatchSvg from './assets/sr-latch.svg'\nimport DLatchSvg from './assets/d-latch.svg'\nimport DFlipFlopSvg from './assets/d-flip-flop.svg'\nimport SrDFlipFlopSvg from './assets/sr-d-flip-flop.svg'\n\nimport SevenSegmentSvg from './assets/seven-segment.svg'\nimport SevenSegment0Svg from './assets/seven-segment-0.svg'\nimport SevenSegment1Svg from './assets/seven-segment-1.svg'\nimport SevenSegment2Svg from './assets/seven-segment-2.svg'\nimport SevenSegment3Svg from './assets/seven-segment-3.svg'\nimport SevenSegment4Svg from './assets/seven-segment-4.svg'\nimport SevenSegment5Svg from './assets/seven-segment-5.svg'\nimport SevenSegment6Svg from './assets/seven-segment-6.svg'\nimport SevenSegment7Svg from './assets/seven-segment-7.svg'\nimport SevenSegment8Svg from './assets/seven-segment-8.svg'\nimport SevenSegment9Svg from './assets/seven-segment-9.svg'\nimport SevenSegment10Svg from './assets/seven-segment-10.svg'\nimport SevenSegment11Svg from './assets/seven-segment-11.svg'\nimport SevenSegment12Svg from './assets/seven-segment-12.svg'\nimport SevenSegment13Svg from './assets/seven-segment-13.svg'\nimport SevenSegment14Svg from './assets/seven-segment-14.svg'\nimport SevenSegment15Svg from './assets/seven-segment-15.svg'\n\nimport { LogicGate, Text } from './LogicGate'\n\nconst sevenSegmentSvgs = [\n  SevenSegment0Svg,\n  SevenSegment1Svg,\n  SevenSegment2Svg,\n  SevenSegment3Svg,\n  SevenSegment4Svg,\n  SevenSegment5Svg,\n  SevenSegment6Svg,\n  SevenSegment7Svg,\n  SevenSegment8Svg,\n  SevenSegment9Svg,\n  SevenSegment10Svg,\n  SevenSegment11Svg,\n  SevenSegment12Svg,\n  SevenSegment13Svg,\n  SevenSegment14Svg,\n  SevenSegment15Svg\n]\n\nconst defaultThemeComponents = {\n  and: (props) => <LogicGate {...props} svg={AndGateSvg} />,\n  or: (props) => <LogicGate svg={OrGateSvg} {...props} />,\n  xor: (props) => <LogicGate svg={XorGateSvg} {...props} />,\n  buffer: (props) => <LogicGate svg={BufferGateSvg} {...props} />,\n  led: (props) => (\n    <LogicGate\n      svg={\n        props.simState\n          ? (logic.getInputs(props.gate, props.simState)[0]\n            ? LedGlowSvg\n            : LedSvg)\n          : LedSvg\n      }\n      {...props}\n    />\n  ),\n  constant: (props) => (\n    <LogicGate\n      svg={props.gate.value ? OneGateSvg : ZeroGateSvg}\n      {...props}\n    />\n  ),\n  switch: (props) => (\n    <LogicGate\n      svg={\n        props.simState\n          ? (logic.getUserInput(props.gate, props.simState)\n            ? SwitchOnSvg\n            : SwitchOffSvg)\n          : SwitchOffSvg\n      }\n      {...props}\n    />\n  ),\n  sender: (props) => <LogicGate svg={SenderSvg} {...props} />,\n  receiver: (props) => <LogicGate svg={ReceiverSvg} {...props} />,\n  mux: (props) => <LogicGate svg={MuxSvg} {...props} />,\n  demux: (props) => <LogicGate svg={DemuxSvg} {...props} />,\n  sevenSegment: (props) => (\n    <LogicGate\n      svg={\n        props.simState\n          ? sevenSegmentSvgs[\n            logic.getInputs(props.gate, props.simState)\n              .reduce((a, c, i) => a + Number(c) * (1 << i))\n          ]\n          : SevenSegmentSvg\n      }\n      {...props}\n    />\n  ),\n  srLatch: (props) => <LogicGate svg={SrLatchSvg} {...props} />,\n  dLatch: (props) => <LogicGate svg={DLatchSvg} {...props} />,\n  dFlipFlop: (props) => <LogicGate svg={DFlipFlopSvg} {...props} />,\n  srDFlipFlop: (props) => <LogicGate svg={SrDFlipFlopSvg} {...props} />,\n  text: (props) => <Text {...props} />\n}\n\nconst defaultTheme = {\n  /* Returns an SVG for the given pin. */\n  getPinSvg: (pin) => (\n    pin.connections.length === 0\n      ? (pin.isInverted\n        ? OpenPinInvertedSvg\n        : OpenPinSvg)\n      : (pin.isInverted\n        ? PinInvertedSvg\n        : PinSvg)),\n\n  getGateComponent (gate) {\n    return defaultThemeComponents[gate.type]\n  },\n\n  /*\n   * Returns an object mapping a pin ID to a pin position. Each key maps a pin\n   * ID to an object with an x and y field. The object may also have a x1 and y1\n   * field, which represents where the wire connecting the pin to the gate\n   * should go.\n   */\n  getPinPositions (gate, x, y, state) {\n    const distribute = (index, length) => (index - (length - 1) / 2) /\n        Math.max(length - 1, 1)\n\n    /* Maps a pin ID to a position */\n    if (gate.type === 'mux' || gate.type === 'demux') {\n      const ret = {}\n      gate.inputs.forEach((pin, index) => {\n        if (index < gate.n) {\n          const pinX = x + 0.25 - distribute(index, gate.n) * 0.075\n          ret[pin.id] = {\n            x: pinX,\n            y: y + 0.5,\n            x1: pinX,\n            y1: y + 0.25\n          }\n        } else {\n          ret[pin.id] = {\n            x: x,\n            y: y + 0.25 - distribute(\n              index - gate.n,\n              gate.inputs.length - gate.n) * 0.225\n          }\n        }\n      })\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - distribute(index, gate.outputs.length) * 0.225\n        }\n      })\n      return ret\n    } else if (gate.type === 'srDFlipFlop') {\n      const ret = {}\n      const r = gate.inputs[0]\n      const c = gate.inputs[1]\n      const d = gate.inputs[2]\n      const s = gate.inputs[3]\n\n      const f = (pin, index) => {\n        ret[pin.id] = {\n          x: x,\n          y: y + 0.25 - distribute(index, 2) * 0.225\n        }\n      }\n\n      f(c, 0)\n      f(d, 1)\n\n      ret[s.id] = {\n        x: x + 0.25,\n        y: y - 0.05,\n        x1: x + 0.25,\n        y1: y\n      }\n\n      ret[r.id] = {\n        x: x + 0.25,\n        y: y + 0.55,\n        x1: x + 0.25,\n        y1: y\n      }\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - distribute(index, gate.outputs.length) * 0.225\n        }\n      })\n\n      return ret\n    } else {\n      const ret = {}\n\n      gate.inputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x,\n          y: y + 0.25 - distribute(index, gate.inputs.length) * 0.225\n        }\n      })\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - distribute(index, gate.outputs.length) * 0.225\n        }\n      })\n\n      return ret\n    }\n  },\n\n  getWidth (gate, state) {\n    return gate.width || 0.5\n  },\n\n  getHeight (gate, state) {\n    return gate.height || 0.5\n  }\n}\n\nexport {\n  defaultTheme\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\n\n/* Material UI components. */\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Container from '@material-ui/core/Container'\nimport Drawer from '@material-ui/core/Drawer'\nimport Typography from '@material-ui/core/Typography'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Box from '@material-ui/core/Box'\nimport Fade from '@material-ui/core/Fade'\n\n/* Icons. */\nimport StopIcon from '@material-ui/icons/Stop'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport RedoIcon from '@material-ui/icons/Redo'\nimport UndoIcon from '@material-ui/icons/Undo'\nimport HelpIcon from '@material-ui/icons/Help'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\n/* Editor components. */\nimport Page from './Page'\nimport Palette from './Palette'\nimport Inspector from './Inspector'\n\n/* Logic components. */\nimport * as logic from './logic'\nimport { defaultTheme } from './themes'\n\nimport { upload, download } from './utils'\n\nimport { useUndoable } from './hooks'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport SimWorker from 'workerize-loader!./sim.worker'\n\nconst drawerWidth = 320\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  menuButtonGroup: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerContent: {\n    width: drawerWidth,\n    overflowX: 'hidden'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\nfunction PageChanger (props) {\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const classes = useStyles()\n\n  const onClose = () => setAnchorEl(null)\n  const onClick = (e) => setAnchorEl(e.currentTarget)\n\n  const menuItems = []\n  for (let i = 0; i <= props.pageCount; i++) {\n    menuItems.push(\n      <MenuItem\n        key={i}\n        onClick={() => {\n          props.onChangedPage(i)\n          onClose()\n        }}\n      >\n        Page {i + 1}\n      </MenuItem>\n    )\n  }\n\n  return (\n    <>\n      <Tooltip title='Change page'>\n        <Button\n          aria-controls='simple-menu'\n          aria-haspopup='true'\n          aria-label='change page'\n          className={classes.menuButton}\n          color='inherit'\n          onClick={onClick}\n        >\n          Page {1 + props.page}\n          <ExpandMoreIcon />\n        </Button>\n      </Tooltip>\n\n      <Menu\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClose}\n        anchorEl={anchorEl}\n      >\n        {menuItems}\n      </Menu>\n    </>\n  )\n}\n\nfunction TabPanel (props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <Fade\n      in={value === index}\n    >\n      <div\n        role='tabpanel'\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box>\n            {children}\n          </Box>\n        )}\n      </div>\n    </Fade>\n  )\n}\n\nfunction App () {\n  const [circuit, setCircuit, undo, redo] = useUndoable(() => logic.circuit([]))\n  const [selection, setSelection] = useState(false)\n  const [simState, setSimState] = useState(null)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [copiedGates, setCopiedGates] = useState(null)\n  const [contextMenuPos, setContextMenuPos] = useState(null)\n  const [currentPage, setCurrentPage] = useState(0)\n  const [pageCount, setPageCount] = useState(1)\n  const [tab, setTab] = useState(0)\n\n  const simWorker = useRef(new SimWorker())\n\n  /* For opening and closing the error snackbar. */\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  /* Refs used for calculating the center of the page. */\n  const appBarRef = useRef()\n  const pageRef = useRef()\n\n  const classes = useStyles()\n\n  const closeContextMenu = () => setContextMenuPos(null)\n\n  const downloadProject = () => {\n    download('circuit.json', logic.dumpProject(circuit, currentPage))\n  }\n\n  const uploadProject = () =>\n    upload()\n      .then(logic.loadProject)\n      .then((data) => {\n        setCircuit(logic.renumber(data.circuit))\n\n        const maxPage = data.circuit.gates.reduce(\n          (maxPage, gate) => gate.page ? Math.max(maxPage, gate.page) : maxPage,\n          0\n        )\n\n        const page = data.currentPage || 0\n\n        /* Set the number of pages available to the user. */\n        setPageCount(Math.max(page, maxPage + 1))\n\n        /* Goto the first page, or the current page that was saved. */\n        setCurrentPage(page)\n      })\n      .catch((error) => {\n        setErrorMessage(\"Uh oh! We weren't able to load that file.\")\n        console.error(error)\n      })\n\n  const selectAll = () => {\n    setSelection(\n      Object.fromEntries(\n        circuit.gates\n          .filter((gate) => (gate.page || 0) === currentPage)\n          .map((gate) => [gate.id, true]))\n    )\n    closeContextMenu()\n  }\n\n  const copy = () => {\n    /* Copy the selection. */\n    setCopiedGates(\n      logic.removeInvalidConnections(\n        circuit.gates.filter((gate) => selection[gate.id])\n      )\n    )\n    closeContextMenu()\n  }\n\n  const paste = () => {\n    if (copiedGates) {\n      /* Renumber the circuit so we have no ID collisions. */\n      const clone = logic.renumber(circuit)\n      /* Append the copied gates to the circuit. */\n      clone.gates = [\n        ...clone.gates,\n        ...copiedGates.map((gate) => ({\n          ...gate,\n          page: currentPage\n        }))\n      ]\n      setCircuit(clone)\n    }\n    closeContextMenu()\n  }\n\n  const onPaletteSelect = useCallback((factory) => {\n    /* Clone the circuit. */\n    const clone = { ...circuit }\n    clone.gates = [...clone.gates]\n\n    /* Place the gate. */\n    const gate = factory()\n    clone.gates.push(gate)\n\n    /* Calculate the gate position. */\n    const appBarRect = appBarRef.current.getBoundingClientRect()\n    const pageRect = pageRef.current.getBoundingClientRect()\n\n    gate.x = ((appBarRect.width + drawerWidth) / 2 -\n      pageRect.left) / 96\n    gate.y = (\n      (window.innerHeight + appBarRect.height) / 2 -\n      pageRect.top) / 96\n\n    gate.page = currentPage\n\n    /* Update with the new circuit. */\n    setCircuit(clone)\n  }, [appBarRef, pageRef, circuit, currentPage, setCircuit])\n\n  const onPlayButtonClicked = () => {\n    if (!isPlaying) {\n      /* Check for repeated senders. */\n      const duplicates = logic.getDuplicateSenderLabels(circuit.gates)\n\n      if (duplicates.length === 0) {\n        simWorker.current.startSimulation(circuit)\n        setIsPlaying(true)\n      } else {\n        setErrorMessage(\n          `Uh oh! Multiple senders for labels: ${duplicates.join(', ')}`\n        )\n      }\n    } else {\n      simWorker.current.stopSimulation()\n      setIsPlaying(false)\n    }\n  }\n\n  useEffect(() => {\n    let shouldLoop = isPlaying\n\n    const loop = (state) => {\n      if (shouldLoop) {\n        setSimState(state)\n        simWorker.current.getState().then(loop)\n      } else {\n        setSimState(null)\n      }\n    }\n    loop(null)\n\n    return () => { shouldLoop = false }\n  }, [isPlaying])\n\n  const deleteSelection = () => {\n    const clone = { ...circuit }\n\n    /* Remove the selected gates. */\n    clone.gates = clone.gates.filter((gate) => !selection[gate.id])\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n    setCircuit(clone)\n\n    /* Clear selection. */\n    setSelection({})\n  }\n\n  const cut = () => {\n    copy()\n    deleteSelection()\n    closeContextMenu()\n  }\n\n  const changePage = (page) => {\n    if (page >= 0) {\n      setCurrentPage(page)\n      if (page >= pageCount) {\n        setPageCount(page + 1)\n      }\n    }\n  }\n\n  /* Attach key bindings to document body. */\n  useEffect(() => {\n    const onKeyDown = (e) => {\n      if (e.target === document.body) {\n        const uppercase = e.key.toUpperCase()\n\n        let isValidShortcut = true\n        if (e.getModifierState('Control')) {\n          if (uppercase === 'C') {\n            copy()\n          } else if (uppercase === 'V') {\n            paste()\n          } else if (uppercase === 'X') {\n            cut()\n          } else if (uppercase === 'A') {\n            selectAll()\n          } else if (uppercase === 'Z') {\n            undo()\n          } else if (uppercase === 'Y') {\n            redo()\n          } else {\n            isValidShortcut = false\n          }\n        } else if (e.key === 'Delete') {\n          deleteSelection()\n        } else if (uppercase === 'P') {\n          onPlayButtonClicked()\n        } else if (!isNaN(e.key)) {\n          changePage(Number(e.key) - 1)\n        } else if (e.key === '+') {\n          changePage(currentPage + 1)\n        } else if (e.key === '-') {\n          changePage(currentPage - 1)\n        } else {\n          isValidShortcut = false\n        }\n\n        if (isValidShortcut) {\n          e.preventDefault()\n        }\n      }\n    }\n    document.body.addEventListener('keydown', onKeyDown)\n    return () => document.body.removeEventListener('keydown', onKeyDown)\n  })\n\n  return (\n    <div\n      className={classes.root}\n      onContextMenu={(event) => {\n        event.preventDefault()\n        setContextMenuPos([event.clientX - 2, event.clientY - 4])\n      }}\n    >\n      <CssBaseline />\n\n      <Drawer variant='persistent' className={classes.drawer} open>\n        <Toolbar />\n        <div\n          className={classes.drawerContent}\n        >\n          <Tabs\n            onChange={(e, value) => setTab(value)}\n            value={tab}\n            variant='fullWidth'\n          >\n            <Tab label='Palette' />\n            <Tab label='Properties' />\n          </Tabs>\n          <TabPanel value={tab} index={0}>\n            <Palette\n              onSelect={onPaletteSelect}\n            />\n          </TabPanel>\n          <TabPanel value={tab} index={1}>\n            <Inspector\n              circuit={circuit}\n              selection={selection}\n              onCircuitChanged={(circuit) => setCircuit(circuit)}\n            />\n          </TabPanel>\n        </div>\n      </Drawer>\n\n      <AppBar position='fixed' className={classes.appBar} ref={appBarRef}>\n        <Toolbar>\n\n          <Typography variant='h6' className={classes.title}>Flux Logic</Typography>\n\n          <PageChanger\n            page={currentPage}\n            pageCount={pageCount}\n            onChangedPage={changePage}\n          />\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Upload project'>\n              <Button\n                aria-label='upload'\n                onClick={uploadProject}\n              >\n                <CloudUploadIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Download project'>\n              <Button\n                aria-label='download'\n                onClick={downloadProject}\n              >\n                <CloudDownloadIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Undo'>\n              <Button aria-label='undo' onClick={undo}>\n                <UndoIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Redo'>\n              <Button aria-label='redo' onClick={redo}>\n                <RedoIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <Tooltip title={isPlaying ? 'Stop simulation' : 'Start simulation'}>\n            <Button\n              aria-label={isPlaying ? 'stop' : 'start'}\n              onClick={onPlayButtonClicked}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              {\n                isPlaying ? <StopIcon /> : <PlayIcon />\n              }\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Delete selection'>\n            <Button\n              aria-label='delete'\n              onClick={deleteSelection}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <DeleteIcon />\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Help'>\n            <Button\n              aria-label='help'\n              className={classes.menuButton}\n              color='inherit'\n              onClick={() => {\n                window.open(\n                  'https://github.com/tcannon686/fluxlogic#usage',\n                  '_blank')\n              }}\n            >\n              <HelpIcon />\n            </Button>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n\n      <Toolbar />\n      <main className={classes.content}>\n        <Toolbar />\n        <Container>\n          <Page\n            page={currentPage}\n            circuit={circuit}\n            theme={defaultTheme}\n            ref={pageRef}\n            selection={selection}\n            simState={simState}\n            onSelectionChanged={(selection) => {\n              setSelection(selection)\n            }}\n            onCircuitChanged={(circuit) => {\n              setCircuit(circuit)\n            }}\n            onUserInputChanged={(gate, value) => {\n              simWorker.current.setUserInput(gate, value)\n            }}\n            editable={!simState}\n          />\n        </Container>\n      </main>\n      <Snackbar\n        open={errorMessage !== null}\n        autoHideDuration={10000}\n        onClose={() => { setErrorMessage(null) }}\n        message={errorMessage}\n      />\n      <Menu\n        keepMounted\n        open={contextMenuPos !== null}\n        onClose={closeContextMenu}\n        anchorReference='anchorPosition'\n        anchorPosition={\n          contextMenuPos && { left: contextMenuPos[0], top: contextMenuPos[1] }\n        }\n      >\n        <MenuItem onClick={cut}>Cut</MenuItem>\n        <MenuItem onClick={copy}>Copy</MenuItem>\n        <MenuItem onClick={paste}>Paste</MenuItem>\n        <MenuItem onClick={selectAll}>Select all</MenuItem>\n      </Menu>\n    </div>\n  )\n}\n\nexport default App\n","/*\n * Utility functions\n */\n\n/*\n * Prompts the user to save the given text as the given filename.\n */\nexport const download = (filename, text) => {\n  var element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`)\n  element.setAttribute('download', filename)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\n/*\n * Prompts the user to upload a file. Returns a promise that resolves to the\n * text loaded from the file.\n */\nexport const upload = () => {\n  return new Promise((resolve, reject) => {\n    var element = document.createElement('input')\n    element.setAttribute('type', 'file')\n\n    element.style.display = 'none'\n    document.body.appendChild(element)\n\n    element.addEventListener(\n      'change',\n      function () {\n        this.files[0].text()\n          .then((data) => resolve(data))\n          .catch((error) => reject(error))\n      },\n      false)\n\n    element.click()\n\n    document.body.removeChild(element)\n  })\n}\n","/* eslint-env serviceworker */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#5f5fc4',\n      main: '#283593',\n      dark: '#001064',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#ffbd45',\n      main: '#fb8c00',\n      dark: '#c25e00',\n      contrastText: '#fff'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap' />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/and-gate.b39df76c.svg\";","module.exports = __webpack_public_path__ + \"static/media/or-gate.ce29e395.svg\";","module.exports = __webpack_public_path__ + \"static/media/led.788936c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/buffer-gate.96d07f6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-off.b1ab986c.svg\";","module.exports = __webpack_public_path__ + \"static/media/mux.148e9d2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/demux.7b2120ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/xor-gate.12bb51fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/one-gate.ac34b99c.svg\";","module.exports = __webpack_public_path__ + \"static/media/zero-gate.d126f49d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sender.737fb0fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/receiver.34ee3b2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-segment.87ddfae3.svg\";","module.exports = __webpack_public_path__ + \"static/media/sr-latch.66255362.svg\";","module.exports = __webpack_public_path__ + \"static/media/d-latch.acbaf710.svg\";","module.exports = __webpack_public_path__ + \"static/media/d-flip-flop.57c93f76.svg\";","module.exports = __webpack_public_path__ + \"static/media/sr-d-flip-flop.2981b8c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-inverted.25b87449.svg\";"],"sourceRoot":""}