{"version":3,"sources":["logic.js","Wire.js","hooks.js","LogicGate.js","Circuit.js","SelectionBox.js","Page.js","Palette.js","Inspector.js","themes.js","App.js","utils.js","serviceWorker.js","index.js","assets/and-gate.svg","assets/or-gate.svg","assets/led.svg","assets/buffer-gate.svg","assets/switch-off.svg","assets/mux.svg","assets/demux.svg","assets/xor-gate.svg","assets/one-gate.svg","assets/zero-gate.svg","assets/sender.svg","assets/receiver.svg","assets/pin-inverted.svg","assets/open-pin.svg","assets/open-pin-inverted.svg","assets/pin.svg","assets/led-glow.svg","assets/switch-on.svg","sim.worker.js"],"names":["nextOutputFunctions","and","gate","state","getInputs","every","x","or","some","xor","filter","length","constant","value","led","buffer","switch","Boolean","getUserInput","sender","receiver","circuit","findSender","mux","inputs","index","slice","n","reduce","t","c","i","Number","demux","outputs","Array","fill","pin","id","nextId","connections","nextState","prevState","gates","nextOutputs","type","isInverted","Object","assign","find","label","map","currentId","MAX_SAFE_INTEGER","getValidPins","fromEntries","concat","getOutputs","setUserInput","fastForward","renumber","clone","maxId","calcNewId","updateId","object","r","connect","a","b","push","andGate","seal","orGate","xorGate","constantGate","switchGate","removeInvalidConnections","validPins","gateClone","updatePin","getDuplicateSenderLabels","senderCounts","forEach","entries","sort","Wire","props","x0","y0","x1","y1","curve","Math","min","abs","padding","l","c0","c1","width","height","d","viewBox","style","position","left","top","pointerEvents","stroke","strokeWidth","useRefCallback","callback","ref","useRef","memoizedCallback","useCallback","current","useEffect","useStyles","makeStyles","theme","selectedGate","background","fade","palette","primary","main","borderRadius","cursor","editableGate","editablePin","margin","transform","textAlign","LogicGate","React","memo","classes","y","getWidth","getHeight","pinPositions","getPinPositions","isSelected","selected","Pin","pinProps","alt","src","getPinSvg","onMouseDown","e","onPinMouseDown","isOutput","onMouseUp","onPinMouseUp","className","editable","key","svg","onClick","onGateClick","onGateMouseDown","Circuit","isEditable","page","useMemo","undefined","selection","moveAmount","simState","positions","getGateSvg","selectionBox","SelectionBox","useState","selectionStart","selectionEnd","setSelectionEnd","onSelectionChanged","onMouseMove","end","clientX","clientY","max","document","addEventListener","removeEventListener","PreviewWire","setEnd","clientToPage","isOutputPin","Page","forwardRef","onCircuitChanged","onUserInputChanged","setSelectionStart","toBeAddedToSelection","setToBeAddedToSelection","isDragging","setIsDragging","didDrag","setDidDrag","moveStart","setMoveStart","moveEnd","setMoveEnd","wireStartPin","setWireStartPin","wireStartPinIsOutput","setWireStartPinIsOutput","coord","bounds","getBoundingClientRect","button","newSelection","shiftKey","stopPropagation","logic","isSelectionEmpty","keys","preventDefault","onMove","addWire","from","to","inputGateId","outputGateId","shouldUpdate","hasPin","inIndex","indexOf","outIndex","findIndex","output","totalSelection","window","Paper","elevation","square","activeElement","blur","ul","br","isOverlapping","PaletteItem","Grid","item","xs","title","text","Button","overflow","inverted","PinInvertedSvg","Palette","invert","container","AndGateSvg","onSelect","OrGateSvg","XorGateSvg","ZeroGateSvg","OneGateSvg","BufferGateSvg","LedSvg","SwitchOffSvg","SenderSvg","ReceiverSvg","MuxSvg","DemuxSvg","form","spacing","PinProperties","ListItem","ListItemIcon","Tooltip","Checkbox","checked","onChange","target","ListItemText","deletable","onPinDeleted","Inspector","selectedGates","minX","Infinity","minY","sharedLabel","allHaveLabels","setX","setY","setLabel","updateGates","deletePin","v","Typography","variant","isLogicGate","gateProps","List","newPin","fullWidth","addPin","noValidate","TextField","onBlur","isNaN","disabled","defaultThemeSvgs","LedGlowSvg","SwitchOnSvg","defaultTheme","OpenPinInvertedSvg","OpenPinSvg","PinSvg","calcY","ret","root","display","appBar","zIndex","drawer","menuButton","marginRight","menuButtonGroup","hide","flexShrink","drawerContent","overflowX","content","flexGrow","PageChanger","anchorEl","setAnchorEl","onClose","menuItems","MenuItem","onChangedPage","pageCount","aria-controls","aria-haspopup","aria-label","color","currentTarget","Menu","keepMounted","open","TabPanel","children","other","Fade","in","role","aria-labelledby","Box","p","App","present","setPresent","past","setPast","future","setFuture","canUndo","canRedo","splice","useUndoable","setCircuit","undo","redo","setSelection","setSimState","isPlaying","setIsPlaying","copiedGates","setCopiedGates","contextMenuPos","setContextMenuPos","currentPage","setCurrentPage","setPageCount","tab","setTab","simWorker","SimWorker","errorMessage","setErrorMessage","appBarRef","createRef","pageRef","closeContextMenu","selectAll","copy","paste","onPlayButtonClicked","stopSimulation","duplicates","startSimulation","join","shouldLoop","loop","getState","then","deleteSelection","cut","changePage","onKeyDown","body","uppercase","toUpperCase","getModifierState","onContextMenu","event","CssBaseline","Drawer","Toolbar","Tabs","Tab","factory","appBarRect","pageRect","innerHeight","AppBar","ButtonGroup","Promise","resolve","reject","element","createElement","setAttribute","appendChild","this","files","JSON","parse","data","catch","error","click","removeChild","maxPage","console","filename","encodeURIComponent","stringify","download","version","packageJson","Container","Snackbar","autoHideDuration","message","anchorReference","anchorPosition","location","hostname","match","createMuiTheme","light","dark","contrastText","secondary","ReactDOM","render","StrictMode","rel","href","ThemeProvider","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","addMethods","methods","w","Worker","name"],"mappings":"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","file":"static/js/main.0b042109.chunk.js","sourcesContent":["/*\n * An object mapping gate types to functions.\n */\nconst nextOutputFunctions = {\n  and: (gate, state) => [getInputs(gate, state).every((x) => x)],\n  or: (gate, state) => [getInputs(gate, state).some((x) => x)],\n  xor: (gate, state) => [\n    getInputs(gate, state).filter((x) => x).length % 2 !== 0\n  ],\n  constant: (gate, state) => [gate.value],\n  led: () => [],\n  buffer: (gate, state) => getInputs(gate, state),\n  switch: (gate, state) => [Boolean(getUserInput(gate, state))],\n  sender: () => [],\n  receiver: (gate, state, circuit) => getInputs(\n    findSender(gate, circuit),\n    state\n  ),\n  mux: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const index = inputs\n      .slice(0, gate.n)\n      .reduce((t, c, i) => t + Number(c) * (1 << i), 0)\n    return [inputs[gate.n + index]]\n  },\n  demux: (gate, state) => {\n    const inputs = getInputs(gate, state)\n    const index = inputs\n      .slice(0, gate.n)\n      .reduce((t, c, i) => t + Number(c) * (1 << i), 0)\n    const outputs = new Array(1 << gate.n)\n    outputs.fill(false)\n    outputs[index] = inputs[gate.n]\n    return outputs\n  }\n}\n\n/** Connect to logic pins by a wire. */\nfunction connect (a, b) {\n  a.connections.push(b.id)\n  b.connections.push(a.id)\n}\n\n/**\n * Creates a circuit with the given gates.\n */\nfunction circuit (gates) {\n  return {\n    gates\n  }\n}\n\n/**\n * Creates a logic pin. A pin may be inverted by setting its isInverted field.\n */\nfunction pin () {\n  return {\n    id: nextId(),\n    connections: []\n  }\n}\n\n/** Creates an and gate. */\nfunction andGate () {\n  return {\n    id: nextId(),\n    type: 'and',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an or gate. */\nfunction orGate () {\n  return {\n    id: nextId(),\n    type: 'or',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an xor gate. */\nfunction xorGate () {\n  return {\n    id: nextId(),\n    type: 'xor',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates a constant gate (for simulating ground or 1). */\nfunction constantGate (value) {\n  return {\n    id: nextId(),\n    type: 'constant',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()]),\n    value: value || false\n  }\n}\n\n/** Creates a switch gate that the user can interact with. */\nfunction switchGate () {\n  return {\n    id: nextId(),\n    type: 'switch',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an LED. */\nfunction led () {\n  return {\n    id: nextId(),\n    type: 'led',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/** Creates a buffer (a gate that simply passes its input to its output). */\nfunction buffer () {\n  return {\n    id: nextId(),\n    type: 'buffer',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a sender with the given label. A receiver with the same label will\n * receive the inputs of the sender.\n */\nfunction sender (label) {\n  return {\n    id: nextId(),\n    type: 'sender',\n    label: label || 'A',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/**\n * Creates a receiver with the given label. The receiver will have the same\n * input values as the sender with the given label.\n */\nfunction receiver (label) {\n  return {\n    id: nextId(),\n    type: 'receiver',\n    label: label || 'A',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a multiplexor with the given number of select lines. The first n\n * items in gate.inputs are the select lines (least significant bit first), the\n * next n^2 are the data lines. The number of select lines, n, is stored in the\n * n field of the returned object.\n */\nfunction mux (n) {\n  const inputs = []\n  for (let i = 0; i < n; i++) {\n    inputs.push(pin())\n  }\n  for (let i = 0; i < (1 << n); i++) {\n    inputs.push(pin())\n  }\n  return {\n    id: nextId(),\n    type: 'mux',\n    n,\n    inputs: Object.seal(inputs),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Creates a demultiplexor with the given number of select lines. The first n\n * items in gates.inputs are the selectl ines (least significant bit first),\n * followed by the data line. The number of select lines, n, is stored in the n\n * field of the returned object. The returned gate has 2^n outputs.\n */\nfunction demux (n) {\n  const inputs = [pin()]\n  const outputs = []\n  for (let i = 0; i < n; i++) {\n    inputs.push(pin())\n  }\n  for (let i = 0; i < (1 << n); i++) {\n    outputs.push(pin())\n  }\n  return {\n    id: nextId(),\n    type: 'demux',\n    n,\n    inputs: Object.seal(inputs),\n    outputs: Object.seal(outputs)\n  }\n}\n\n/**\n * Computes a state object to represent the current state of the simulation for\n * the given circuit. If prevState is passed, returns the next state after the\n * given state.\n *\n * The state object is an object containing an outputs field, which is an object\n * that maps each pin ID to a boolean value. For example, if a pin with ID 2 has\n * an output of true, the state object would look something like this:\n * { outputs: { 2: true } }\n *\n * To calculate the inputs and outputs of individual gates, the getInputs and\n * getOutputs helper functions can be used.\n *\n * The input from the user (for example, whether a switch is switched or not) is\n * stored in the inputs field, that maps a gate ID to a user input object. The\n * format of the input depends on the gate itself.\n */\nfunction nextState (circuit, prevState) {\n  const state = { outputs: {}, inputs: {} }\n\n  if (prevState) {\n    for (const gate of circuit.gates) {\n      /* Calculate the next output. */\n      const nextOutputs = nextOutputFunctions[gate.type](\n        gate,\n        prevState,\n        circuit\n      )\n\n      for (let i = 0; i < nextOutputs.length; i++) {\n        state.outputs[gate.outputs[i].id] = (\n          nextOutputs[i] ^ gate.outputs[i].isInverted) === 1\n      }\n    }\n\n    Object.assign(state.inputs, prevState.inputs)\n  } else {\n    /* Initialize all outputs to false. */\n    for (const gate of circuit.gates) {\n      for (const pin of gate.outputs) {\n        state.outputs[pin.id] = false\n      }\n    }\n  }\n\n  return state\n}\n\n/**\n * Returns the sender gate for the given receiver gate.\n */\nfunction findSender (receiver, circuit) {\n  return circuit.gates.find(\n    (gate) => gate.type === 'sender' && gate.label === receiver.label\n  )\n}\n\n/**\n * Returns a list of input booleans for the gate given the current simulation\n * state.\n */\nfunction getInputs (gate, state) {\n  return gate.inputs\n    .map((pin) => (state.outputs[pin.connections[0]] ^ pin.isInverted) === 1)\n}\n\n/**\n * Returns a list of output booleans for the gate given the current simulation\n * state.\n */\nfunction getOutputs (gate, state) {\n  return gate.outputs.map((pin) => state.outputs[pin.id])\n}\n\n/**\n * Returns the user input for the gate given the current simulation state.\n */\nfunction getUserInput (gate, state) {\n  return state.inputs[gate.id]\n}\n\n/**\n * Sets the user input for the gate for the current simulation state.\n */\nfunction setUserInput (gate, state, value) {\n  state.inputs[gate.id] = value\n}\n\n/**\n * Skip forward n simulation states given a circuit, n, and the (optional)\n * current state. This function simply calls nextState(circuit, state) n times.\n */\nfunction fastForward (circuit, n, state) {\n  for (let i = 0; i < n; i++) {\n    state = nextState(circuit, state)\n  }\n  return state\n}\n\n/*\n * Function to return a unique id. This should only be used within this JS file.\n * The ID wraps around to 0 once Number.MAX_SAFE_INTEGER is reached. This is\n * assumed to be okay since Number.MAX_SAFE_INTEGER is so large.\n */\nlet currentId = 0\nfunction nextId () {\n  if (currentId >= Number.MAX_SAFE_INTEGER) {\n    currentId = 0\n  }\n\n  return currentId++\n}\n\n/*\n * This function renumbers the IDs of the given circuit so that there are no\n * collisions. This should be called any time a circuit is loaded to avoid\n * collisions. It returns the circuit.\n */\nfunction renumber (circuit) {\n  const clone = { ...circuit }\n  let maxId = currentId\n\n  const calcNewId = (id) => currentId < (Number.MAX_SAFE_INTEGER - id)\n    ? id + currentId\n    : (id - Number.MAX_SAFE_INTEGER) + currentId\n\n  const updateId = (object) => {\n    const clone = {\n      ...object,\n      id: calcNewId(object.id)\n    }\n    if (clone.id > maxId) {\n      maxId = clone.id\n    }\n\n    if (clone.connections) {\n      clone.connections = clone.connections.map(calcNewId)\n    }\n    return clone\n  }\n\n  clone.gates = clone.gates.map((gate) => {\n    const r = updateId(gate)\n    r.inputs = r.inputs.map(updateId)\n    r.outputs = r.outputs.map(updateId)\n    return r\n  })\n\n  currentId = maxId + 1\n\n  return clone\n}\n\n/**\n * Create an object containing the IDs of all valid pins for the given gates.\n */\nconst getValidPins = (gates) => (\n  Object.fromEntries(gates.reduce(\n    (t, gate) => t.concat(\n      gate.inputs.map((pin) => pin.id),\n      gate.outputs.map((pin) => pin.id)),\n    []\n  ).map((id) => [id, true]))\n)\n\n/**\n * Returns a new list of gates from the given list of gates with the\n * connections to invalid pins removed.\n */\nconst removeInvalidConnections = (gates) => {\n  const validPins = getValidPins(gates)\n\n  /* Remove all connections that point to a deleted pin. */\n  return gates.map((gate) => {\n    const gateClone = { ...gate }\n    const updatePin = (pin) => {\n      return {\n        ...pin,\n        connections: pin.connections.filter((id) => validPins[id])\n      }\n    }\n\n    gateClone.inputs = gateClone.inputs.map(updatePin)\n    gateClone.outputs = gateClone.outputs.map(updatePin)\n    return gateClone\n  })\n}\n\n/**\n * Returns a list of all the labels that are used by 2 or more senders in the\n * given list of gates, sorted alphabetically. This is useful as an error check\n * to make sure there are no duplicate senders.\n */\nconst getDuplicateSenderLabels = (gates) => {\n  const senderCounts = {}\n\n  gates.forEach((gate) => {\n    if (gate.type === 'sender') {\n      senderCounts[gate.label] = (senderCounts[gate.label] || 0) + 1\n    }\n  })\n\n  return Object.entries(senderCounts)\n    .filter((x) => x[1] > 1)\n    .map((x) => x[0])\n    .sort()\n}\n\nexport default {\n  /* Simulation. */\n  nextState,\n  getOutputs,\n  getInputs,\n  getUserInput,\n  setUserInput,\n  fastForward,\n\n  /* Circuit creation. */\n  renumber,\n  connect,\n  circuit,\n  andGate,\n  orGate,\n  xorGate,\n  constantGate,\n  switchGate,\n  sender,\n  receiver,\n  led,\n  buffer,\n  pin,\n  mux,\n  demux,\n\n  /* Utils. */\n  removeInvalidConnections,\n  getValidPins,\n  findSender,\n  getDuplicateSenderLabels\n}\n","import React from 'react'\n\nfunction Wire (props) {\n  const x0 = Number(props.x0)\n  const y0 = Number(props.y0)\n  const x1 = Number(props.x1)\n  const y1 = Number(props.y1)\n\n  const curve = Math.min(Math.abs(y1 - y0), Math.abs(x1 - x0))\n  const padding = 0.1 + (x1 < x0 ? curve * 0.25 : 0)\n\n  const l = Math.min(x0, x1) - padding\n  const t = Math.min(y0, y1) - padding\n\n  const c0 = x0 - l + curve\n  const c1 = x1 - l - curve\n\n  const width = Math.abs(x1 - x0) + padding * 2\n  const height = Math.abs(y1 - y0) + padding * 2\n\n  const d = `M ${x0 - l} ${y0 - t} ` +\n            `C ${c0} ${y0 - t}, ${c1} ${y1 - t}, ${x1 - l} ${y1 - t}`\n\n  return (\n    <svg\n      width={`${width}in`}\n      height={`${height}in`}\n      viewBox={`0 0 ${width} ${height}`}\n      style={{\n        position: 'absolute',\n        left: `${l}in`,\n        top: `${t}in`,\n        pointerEvents: 'none'\n      }}\n    >\n      <path\n        d={d}\n        stroke='black' strokeWidth='0.01' fill='transparent'\n      />\n    </svg>\n  )\n}\n\nexport default Wire\n","import { useRef, useEffect, useCallback, useState } from 'react'\n\n/**\n * Creates a callback function that calls the given callback by reference. This\n * is useful when multiple components need to use the same callback, and you\n * don't want to trigger a rerender of all the components when the callback\n * changes. Returns the memoized callback.\n */\nexport const useRefCallback = (callback) => {\n  const ref = useRef(null)\n  const memoizedCallback = useCallback(\n    (...args) => ref.current(...args),\n    []\n  )\n\n  useEffect(() => {\n    ref.current = callback\n  }, [callback])\n\n  return memoizedCallback\n}\n\nexport const useUndoable = (state, max) => {\n  const [present, setPresent] = useState(state)\n  const [past, setPast] = useState([])\n  const [future, setFuture] = useState([])\n\n  const canUndo = past.length > 0\n  const canRedo = future.length > 0\n\n  const undo = () => {\n    if (canUndo) {\n      setFuture([present, ...future])\n      setPresent(past[0])\n      setPast(past.slice(1))\n    }\n  }\n\n  const redo = () => {\n    if (canRedo) {\n      setPast([present, ...past])\n      setPresent(future[0])\n      setFuture(future.slice(1))\n    }\n  }\n\n  const setState = (state) => {\n    setPast([present, ...past].splice(-(max || 1000)))\n    setPresent(state)\n    setFuture([])\n  }\n\n  return [present, setState, undo, redo]\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nimport Wire from './Wire'\n\nconst useStyles = makeStyles((theme) => ({\n  selectedGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    background: fade(theme.palette.primary.main, 0.3),\n    borderRadius: '4px',\n    cursor: 'move'\n  },\n\n  gate: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  pin: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  editableGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.15)\n    }\n  },\n\n  editablePin: {\n    position: 'absolute',\n    margin: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      background: fade(theme.palette.primary.main, 0.3)\n    }\n  },\n\n  label: {\n    position: 'relative',\n    transform: 'translate(-50%, -50%)',\n    textAlign: 'center',\n    width: '1in',\n    top: '-.1in',\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component representing a single logic gate.\n */\nconst LogicGate = React.memo((props) => {\n  /*\n   * The object responsible for placing the pins and choosing the SVGs. Note\n   * that this is not related to the material-ui theme.\n   */\n  const theme = props.theme\n\n  const classes = useStyles()\n\n  /* The position of the gate. */\n  const x = props.x\n  const y = props.y\n\n  const width = theme.getWidth(props.gate)\n  const height = theme.getHeight(props.gate)\n\n  /* The positions of the pins. */\n  const pinPositions = theme.getPinPositions(props.gate, x, y)\n\n  const isSelected = props.selected\n\n  const Pin = (pinProps) => (\n    <img\n      alt=''\n      src={theme.getPinSvg(pinProps.pin)}\n      onMouseDown={\n        (e) => props.onPinMouseDown(e, pinProps.pin, pinProps.isOutput)\n      }\n      onMouseUp={\n        (e) => props.onPinMouseUp(e, pinProps.pin, pinProps.isOutput)\n      }\n      style={{\n        left: `${pinPositions[pinProps.pin.id].x - x - 0.0625}in`,\n        top: `${pinPositions[pinProps.pin.id].y - y - 0.0625}in`\n      }}\n      className={props.editable ? classes.editablePin : classes.pin}\n    />\n  )\n\n  return (\n    <div\n      style={{\n        left: `${x}in`,\n        top: `${y}in`,\n        width: `${width}in`,\n        height: `${height}in`\n      }}\n      className={\n        props.editable\n          ? (isSelected ? classes.selectedGate : classes.editableGate)\n          : classes.gate\n      }\n    >\n\n      {\n        /* Input pin wires */\n        props.gate.outputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={pinPositions[pin.id].x - x - 0.25}\n            y1={pinPositions[pin.id].y - y}\n          />)\n      }\n\n      {\n        /* Output pin wires */\n        props.gate.inputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={pinPositions[pin.id].x - x + 0.25}\n            y1={pinPositions[pin.id].y - y}\n          />)\n      }\n\n      {/* The gate itself */}\n      <img\n        alt={props.gate.type}\n        src={props.svg}\n        style={{ position: 'absolute' }}\n        onClick={(e) => props.onGateClick(e, props.gate)}\n        onMouseDown={(e) => props.onGateMouseDown(e, props.gate)}\n      />\n\n      {\n        props.gate.label && (\n          <p\n            className={classes.label}\n            style={{ left: `${theme.getWidth(props.gate) / 2}in` }}\n          >\n            {props.gate.label}\n          </p>\n        )\n      }\n\n      {\n        /* Input pins */\n        props.gate.inputs.map((pin) =>\n          <Pin pin={pin} isOutput={false} key={pin.id} />\n        )\n      }\n\n      {\n        /* Output pins */\n        props.gate.outputs.map((pin) =>\n          <Pin pin={pin} isOutput key={pin.id} />\n        )\n      }\n    </div>\n  )\n})\n\nexport default LogicGate\n","import React, { useMemo } from 'react'\nimport { useRefCallback } from './hooks'\n\nimport Wire from './Wire'\nimport LogicGate from './LogicGate'\n\n/**\n * React component used to hold a circuit.\n */\nexport default function Circuit (props) {\n  const theme = props.theme\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  const selection = props.selection\n  const moveAmount = props.moveAmount\n\n  const simState = props.simState\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, gates])\n\n  const onGateClick = useRefCallback(props.onGateClick)\n  const onGateMouseDown = useRefCallback(props.onGateMouseDown)\n\n  const onPinMouseUp = useRefCallback(props.onPinMouseUp)\n  const onPinMouseDown = useRefCallback(props.onPinMouseDown)\n\n  return (\n    <>\n      {\n        /* Wires */\n        gates.map(\n          (gate) => gate.inputs\n            .filter((pin) => pin.connections[0])\n            .map((pin) =>\n              <Wire\n                key={`${pin.id}-${pin.connections[0].id}`}\n                x0={pinPositions[pin.connections[0]].x}\n                y0={pinPositions[pin.connections[0]].y}\n                x1={pinPositions[pin.id].x}\n                y1={pinPositions[pin.id].y}\n              />))\n      }\n\n      {\n        /* Gates */\n        gates.map((gate) => {\n          const x = (gate.x || 0) +\n            (props.selection[gate.id] ? moveAmount[0] : 0)\n          const y = (gate.y || 0) +\n            (props.selection[gate.id] ? moveAmount[1] : 0)\n\n          return (\n            <LogicGate\n              gate={gate}\n              svg={theme.getGateSvg(gate, simState)}\n              x={x}\n              y={y}\n              key={gate.id}\n              theme={theme}\n              selected={selection[gate.id]}\n              editable={isEditable}\n              onGateClick={onGateClick}\n              onGateMouseDown={onGateMouseDown}\n              onPinMouseDown={onPinMouseDown}\n              onPinMouseUp={onPinMouseUp}\n            />\n          )\n        })\n      }\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nconst useStyles = makeStyles((theme) => ({\n  selectionBox: {\n    position: 'fixed',\n    background: fade(theme.palette.primary.main, 0.3),\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component for a selection box dragged by the user.\n */\nfunction SelectionBox (props) {\n  const [selectionEnd, setSelectionEnd] = useState(props.selectionStart)\n\n  const selectionStart = props.selectionStart\n  const onSelectionChanged = props.onSelectionChanged\n\n  const classes = useStyles()\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      const end = [e.clientX, e.clientY]\n      setSelectionEnd(end)\n      onSelectionChanged(\n        [\n          Math.min(selectionStart[0], end[0]),\n          Math.min(selectionStart[1], end[1])\n        ],\n        [\n          Math.max(selectionStart[0], end[0]),\n          Math.max(selectionStart[1], end[1])\n        ])\n    }\n\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [selectionStart, onSelectionChanged])\n\n  const hasMoved = (\n    selectionEnd[0] !== props.selectionStart[0] &&\n    selectionEnd[1] !== props.selectionStart[1])\n\n  /*\n   * The selection box should only be visible after the user moves their mouse.\n   */\n  return hasMoved && (\n    <div\n      className={classes.selectionBox} style={{\n        left: Math.min(props.selectionStart[0], selectionEnd[0]),\n        top: Math.min(props.selectionStart[1], selectionEnd[1]),\n        width: Math.abs(selectionEnd[0] - props.selectionStart[0]),\n        height: Math.abs(selectionEnd[1] - props.selectionStart[1])\n      }}\n    />\n  )\n}\n\nexport default SelectionBox\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\n\nimport logic from './logic'\n\nimport Wire from './Wire'\nimport Circuit from './Circuit'\nimport SelectionBox from './SelectionBox'\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    width: '8.5in',\n    height: '11in',\n    position: 'relative'\n  }\n}))\n\n/*\n * A react component for the wire currently being dragged by the user.\n */\nfunction PreviewWire (props) {\n  const [end, setEnd] = useState([props.x0, props.y0])\n\n  const clientToPage = props.clientToPage\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      setEnd(clientToPage([e.clientX, e.clientY]))\n    }\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [clientToPage])\n\n  if (props.isOutputPin) {\n    return (\n      <Wire x0={props.x0} y0={props.y0} x1={end[0]} y1={end[1]} />\n    )\n  } else {\n    return (\n      <Wire x1={props.x0} y1={props.y0} x0={end[0]} y0={end[1]} />\n    )\n  }\n}\n\nconst Page = React.forwardRef((props, ref) => {\n  const selection = props.selection\n  const theme = props.theme\n\n  const simState = props.simState\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n  const page = props.page\n\n  const onCircuitChanged = props.onCircuitChanged\n\n  const onSelectionChanged = props.onSelectionChanged\n  const onUserInputChanged = props.onUserInputChanged\n\n  const classes = useStyles()\n\n  const [selectionStart, setSelectionStart] = useState(null)\n\n  /* Object containing IDs of gates currently being selected. */\n  const [toBeAddedToSelection, setToBeAddedToSelection] = useState({})\n\n  /* Whether or not the selected items are being dragged. */\n  const [isDragging, setIsDragging] = useState(false)\n\n  /*\n   * Whether or not the selected items were dragged (to prevent the click event\n   * from being fired after a drag.\n   */\n  const [didDrag, setDidDrag] = useState(false)\n\n  /* The start and end positions of the drag in client coordinates. */\n  const [moveStart, setMoveStart] = useState([0, 0])\n  const [moveEnd, setMoveEnd] = useState([0, 0])\n\n  const [wireStartPin, setWireStartPin] = useState(null)\n\n  /* Whether or not the pin being dragged from is an output pin. */\n  const [wireStartPinIsOutput, setWireStartPinIsOutput] = useState(false)\n\n  /* The gates on the current page. */\n  const gates = useMemo(() => page !== undefined\n    ? circuit.gates.filter((gate) => (gate.page || 0) === page)\n    : circuit.gates,\n  [circuit, page]\n  )\n\n  /* The amount to move teh selected components in page coordinates. */\n  const moveAmount = isDragging\n    ? [\n      (moveEnd[0] - moveStart[0]) / 96,\n      (moveEnd[1] - moveStart[1]) / 96\n    ]\n    : [0, 0]\n\n  /*\n   * Function to convert from client coordianates to coordinates on the page.\n   */\n  const clientToPage = (coord) => {\n    const bounds = ref.current.getBoundingClientRect()\n    return [\n      (coord[0] - bounds.left) / 96,\n      (coord[1] - bounds.top) / 96\n    ]\n  }\n\n  /* Called when the bounds of the selection box changes. */\n  const onSelectionBoxChanged = (ul, br) => {\n    /* Calculate the selection on the page. */\n\n    const a = clientToPage(ul)\n    const b = clientToPage(br)\n\n    let clone = null\n\n    /* Determine if any items were added to the selection. */\n    gates.forEach((gate) => {\n      const width = props.theme.getWidth(gate)\n      const height = props.theme.getHeight(gate)\n\n      const isOverlapping = (\n        gate.x >= a[0] && gate.y >= a[1] &&\n        gate.x + width <= b[0] && gate.y + height <= b[1])\n\n      if (isOverlapping && !toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        clone[gate.id] = true\n      } else if (!isOverlapping && toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        delete clone[gate.id]\n      }\n    })\n\n    if (clone) {\n      setToBeAddedToSelection(clone)\n    }\n  }\n\n  const onGateClick = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      if (!didDrag) {\n        const newSelection = {}\n        if (e.shiftKey) {\n          Object.assign(newSelection, selection)\n        }\n        newSelection[gate.id] = !newSelection[gate.id]\n        onSelectionChanged(newSelection)\n        e.stopPropagation()\n      }\n    } else if (simState != null) {\n      if (gate.type === 'switch') {\n        onUserInputChanged(gate, !logic.getUserInput(gate, simState))\n      }\n    }\n  }, [\n    selection,\n    isEditable,\n    didDrag,\n    onSelectionChanged,\n    onUserInputChanged,\n    simState\n  ])\n\n  const onGateMouseDown = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      const isSelectionEmpty = Object.keys(selection).length === 0\n\n      setMoveStart([e.clientX, e.clientY])\n      setMoveEnd([e.clientX, e.clientY])\n      setDidDrag(false)\n\n      /* If no gates have been selected, select the gate. */\n      if (isSelectionEmpty) {\n        onSelectionChanged({ [gate.id]: true })\n      }\n\n      if (selection[gate.id] || isSelectionEmpty) {\n        setIsDragging(true)\n      }\n      e.stopPropagation()\n    }\n    e.preventDefault()\n  }, [\n    isEditable,\n    selection,\n    setMoveStart,\n    setMoveEnd,\n    setDidDrag,\n    onSelectionChanged\n  ])\n\n  const onMove = useCallback((moveAmount) => {\n    const clone = { ...circuit }\n    clone.gates = clone.gates.map((gate) => {\n      if (selection[gate.id]) {\n        /* Copy the gate. */\n        gate = { ...gate }\n        gate.x += moveAmount[0]\n        gate.y += moveAmount[1]\n      }\n      return gate\n    })\n    onCircuitChanged(clone)\n  }, [circuit, selection, onCircuitChanged])\n\n  const addWire = useCallback((from, to) => {\n    const clone = { ...circuit }\n\n    /*\n     * Function that takes in a pin, clones it and adds a connection if it is\n     * the from or to pin. Returns the pin otherwise.\n     */\n    const updatePin = (pin, isOutputPin) => {\n      if (isOutputPin || pin.connections.length === 0) {\n        if (pin.id === from) {\n          return { ...pin, connections: [...pin.connections, to] }\n        } else if (pin.id === to) {\n          return { ...pin, connections: [...pin.connections, from] }\n        }\n      }\n      return pin\n    }\n\n    /* Only update if the input pin has no connections. */\n    let shouldUpdate = false\n\n    let inputGateId, outputGateId\n\n    clone.gates = clone.gates.map((gate) => {\n      let hasPin = false\n      const inputs = gate.inputs.map((pin) => {\n        const r = updatePin(pin)\n        if (r !== pin) {\n          inputGateId = gate.id\n          hasPin = true\n        }\n        return r\n      })\n\n      /* If the gate has the pin, clone the gate. */\n      if (hasPin) {\n        shouldUpdate = true\n        return { ...gate, inputs }\n      } else {\n        return gate\n      }\n    })\n\n    if (shouldUpdate) {\n      /* Update output pin. */\n      clone.gates = clone.gates.map((gate) => {\n        let hasPin = false\n        const outputs = gate.outputs.map((pin) => {\n          const r = updatePin(pin, true)\n          if (r !== pin) {\n            outputGateId = gate.id\n            hasPin = true\n          }\n          return r\n        })\n\n        /* If the gate has the pin, clone it. */\n        if (hasPin) {\n          return { ...gate, outputs }\n        } else {\n          return gate\n        }\n      })\n\n      /* Only add the wire if the input and output are not on the same gate. */\n      if (inputGateId !== outputGateId) {\n        onCircuitChanged(clone)\n      }\n    }\n  }, [circuit, onCircuitChanged])\n\n  const onPinMouseDown = useCallback((e, pin, isOutputPin) => {\n    if (isEditable && e.button === 0) {\n      /* If the pin is an output pin, start dragging a wire from it. */\n      if (isOutputPin) {\n        setWireStartPin(pin.id)\n        setWireStartPinIsOutput(isOutputPin)\n      } else {\n        /*\n         * If the pin is an input pin and already has a connection, remove the\n         * connection and start dragging from the connected pin.\n         */\n        if (pin.connections.length > 0) {\n          const clone = { ...circuit }\n          clone.gates = clone.gates.map((gate) => {\n            const inIndex = gate.inputs.indexOf(pin)\n            const outIndex = gate.outputs.findIndex(\n              (output) => output.id === pin.connections[0])\n\n            if (inIndex !== -1) {\n              const gateClone = {\n                ...gate,\n                inputs: [...gate.inputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.inputs[inIndex] = { ...pin, connections: [] }\n\n              return gateClone\n            } else if (outIndex !== -1) {\n              const output = gate.outputs[outIndex]\n              const gateClone = {\n                ...gate,\n                outputs: [...gate.outputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.outputs[outIndex] = {\n                ...output,\n                connections: output.connections.filter((id) => id !== pin.id)\n              }\n\n              return gateClone\n            } else {\n              return gate\n            }\n          })\n\n          /* Update the circuit */\n          onCircuitChanged(clone)\n\n          setWireStartPin(pin.connections[0])\n          setWireStartPinIsOutput(true)\n        } else {\n          setWireStartPin(pin.id)\n          setWireStartPinIsOutput(isOutputPin)\n        }\n      }\n    }\n    e.stopPropagation()\n    e.preventDefault()\n  }, [\n    circuit,\n    isEditable,\n    setWireStartPin,\n    setWireStartPinIsOutput,\n    onCircuitChanged\n  ])\n\n  const onPinMouseUp = useCallback((e, pin, isOutputPin) => {\n    if (isEditable) {\n      /*\n       * Add a wire if the wire start pin is different from the wire\n       * end pin, and both of the pins are not output pins\n       */\n      if (wireStartPin !== null &&\n          wireStartPin !== pin.id &&\n          isOutputPin ^ wireStartPinIsOutput) {\n        addWire(wireStartPin, pin.id)\n        e.stopPropagation()\n        e.preventDefault()\n      }\n      setWireStartPin(null)\n    }\n  }, [isEditable, wireStartPin, wireStartPinIsOutput, addWire])\n\n  /*\n   * The total selection, including elements currently being selected as well as\n   * the previously selected elements.\n   */\n  const totalSelection = { ...props.selection, ...toBeAddedToSelection }\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    circuit.gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, circuit])\n\n  /*\n   * Add a mouseup event listener to the window. We need to do this in case the\n   * user drags outside the window.\n   */\n  useEffect(() => {\n    const onMouseUp = (e) => {\n      if (!isEditable) {\n        e.preventDefault()\n      } else if (e.button === 0) {\n        if (isDragging) {\n          onMove(moveAmount)\n          setIsDragging(false)\n          e.stopPropagation()\n        } else if (selectionStart) {\n          setToBeAddedToSelection({})\n          onSelectionChanged(totalSelection)\n        }\n        setSelectionStart(null)\n\n        if (wireStartPin !== null) {\n          setWireStartPin(null)\n        }\n        e.preventDefault()\n      }\n    }\n\n    window.addEventListener('mouseup', onMouseUp)\n    return () => window.removeEventListener('mouseup', onMouseUp)\n  })\n\n  useEffect(() => {\n    if (isEditable) {\n      const onMouseMove = (e) => {\n        if (isDragging) {\n          setMoveEnd([\n            e.clientX,\n            e.clientY\n          ])\n        }\n\n        if (!didDrag) {\n          setDidDrag(true)\n        }\n      }\n      window.addEventListener('mousemove', onMouseMove)\n      return () => window.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [isDragging, didDrag, isEditable])\n\n  return (\n    <Paper\n      elevation={3}\n      square\n      className={classes.page}\n      ref={ref}\n      onMouseDown={(e) => {\n        if (isEditable && e.button === 0) {\n          setSelectionStart([e.clientX, e.clientY])\n\n          /* Reset the selection if the user did not click shift. */\n          if (!e.shiftKey) {\n            onSelectionChanged({})\n          }\n        }\n\n        document.activeElement.blur()\n        e.preventDefault()\n      }}\n    >\n      {\n        isEditable && wireStartPin !== null && (\n          <PreviewWire\n            x0={pinPositions[wireStartPin].x}\n            y0={pinPositions[wireStartPin].y}\n            clientToPage={clientToPage}\n            isOutputPin={wireStartPinIsOutput}\n          />\n        )\n      }\n      <Circuit\n        page={props.page}\n        circuit={circuit}\n        editable={isEditable}\n        selection={totalSelection}\n        theme={theme}\n        moveAmount={moveAmount}\n        onPinMouseDown={onPinMouseDown}\n        onPinMouseUp={onPinMouseUp}\n        onGateClick={onGateClick}\n        onGateMouseDown={onGateMouseDown}\n        simState={simState}\n      />\n      {\n        isEditable && selectionStart && (\n          <SelectionBox\n            selectionStart={selectionStart}\n            onSelectionChanged={onSelectionBoxChanged}\n          />\n        )\n      }\n    </Paper>\n  )\n})\n\nexport default Page\n","import React from 'react'\n\nimport Tooltip from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SenderSvg from './assets/sender.svg'\nimport ReceiverSvg from './assets/receiver.svg'\nimport MuxSvg from './assets/mux.svg'\nimport DemuxSvg from './assets/demux.svg'\n\nimport PinInvertedSvg from './assets/pin-inverted.svg'\n\nimport Wire from './Wire'\n\nimport logic from './logic'\n\nfunction PaletteItem (props) {\n  return (\n    <Grid item xs={3}>\n      <Tooltip title={`Add ${props.text}`}>\n        <Button onClick={props.onClick}>\n          <div\n            style={{\n              position: 'relative',\n              width: '0.5in',\n              height: '0.5in',\n              overflow: 'hidden'\n            }}\n          >\n            {\n              props.inverted && (\n                <Wire\n                  x0={0.25}\n                  y0={0.25}\n                  x1={0.5 - 0.0625}\n                  y1={0.25}\n                />\n              )\n            }\n\n            {\n              props.inverted && (\n                <img\n                  src={PinInvertedSvg}\n                  alt=''\n                  style={{\n                    position: 'absolute',\n                    left: `${0.5 - 0.125}in`,\n                    top: `${0.25 - 0.0625}in`\n                  }}\n                />\n              )\n            }\n\n            <img\n              src={props.svg}\n              alt=''\n              style={{\n                position: 'absolute',\n                left: props.inverted ? '-0.0625in' : 0,\n                top: 0\n              }}\n            />\n          </div>\n        </Button>\n      </Tooltip>\n    </Grid>\n  )\n}\n\n/**\n * A palette for placing components.\n * Props:\n *     - onSelect(factory)\n *           A callback called when the user selects an item. The factory\n *           parameter is a function that constructs a new logic gate.\n */\nfunction Palette (props) {\n  const invert = (gate) => {\n    gate.outputs[0].isInverted = true\n    return gate\n  }\n  return (\n    <Grid container className={props.className}>\n      <PaletteItem\n        svg={AndGateSvg}\n        text='AND gate'\n        onClick={() => props.onSelect(logic.andGate)}\n      />\n      <PaletteItem\n        svg={AndGateSvg}\n        text='NAND gate'\n        onClick={() => props.onSelect(() => invert(logic.andGate()))}\n        inverted\n      />\n      <PaletteItem\n        svg={OrGateSvg}\n        text='OR gate'\n        onClick={() => props.onSelect(logic.orGate)}\n      />\n      <PaletteItem\n        svg={OrGateSvg}\n        text='NOR gate'\n        onClick={() => props.onSelect(() => invert(logic.orGate()))}\n        inverted\n      />\n      <PaletteItem\n        svg={XorGateSvg}\n        text='XOR gate'\n        onClick={() => props.onSelect(logic.xorGate)}\n      />\n      <PaletteItem\n        svg={ZeroGateSvg}\n        text='ground'\n        onClick={() => props.onSelect(() => logic.constantGate(false))}\n      />\n      <PaletteItem\n        svg={OneGateSvg}\n        text='+1'\n        onClick={() => props.onSelect(() => logic.constantGate(true))}\n      />\n      <PaletteItem\n        svg={BufferGateSvg}\n        text='buffer'\n        onClick={() => props.onSelect(() => logic.buffer())}\n      />\n      <PaletteItem\n        svg={BufferGateSvg}\n        text='inverter'\n        onClick={() => props.onSelect(() => invert(logic.buffer()))}\n        inverted\n      />\n      <PaletteItem\n        svg={LedSvg}\n        text='LED'\n        onClick={() => props.onSelect(() => logic.led())}\n      />\n      <PaletteItem\n        svg={SwitchOffSvg}\n        text='switch'\n        onClick={() => props.onSelect(logic.switchGate)}\n      />\n      <PaletteItem\n        svg={SenderSvg}\n        text='sender'\n        onClick={() => props.onSelect(logic.sender)}\n      />\n      <PaletteItem\n        svg={ReceiverSvg}\n        text='receiver'\n        onClick={() => props.onSelect(logic.receiver)}\n      />\n      <PaletteItem\n        svg={MuxSvg}\n        text='2 to 1 mux'\n        onClick={() => props.onSelect(() => logic.mux(1))}\n      />\n      <PaletteItem\n        svg={MuxSvg}\n        text='4 to 1 mux'\n        onClick={() => props.onSelect(() => logic.mux(2))}\n      />\n      <PaletteItem\n        svg={DemuxSvg}\n        text='1 to 2 demux'\n        onClick={() => props.onSelect(() => logic.demux(1))}\n      />\n      <PaletteItem\n        svg={DemuxSvg}\n        text='1 to 4 demux'\n        onClick={() => props.onSelect(() => logic.demux(2))}\n      />\n    </Grid>\n  )\n}\n\nexport default Palette\n","import React, { useState, useEffect, useMemo } from 'react'\n\nimport logic from './logic'\n\n/* Icons. */\nimport DeleteIcon from '@material-ui/icons/Delete'\n\n/* Material UI components. */\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}))\n\nfunction PinProperties (props) {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        <Tooltip title='Invert pin'>\n          <Checkbox\n            checked={Boolean(props.pin.isInverted)}\n            onChange={(e) => {\n              const clone = { ...props.pin }\n              if (e.target.checked) {\n                clone.isInverted = true\n              } else {\n                delete clone.isInverted\n              }\n              props.onChange(clone)\n            }}\n          />\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText> {props.label || `Pin ${props.index + 1}`} </ListItemText>\n      {\n        props.deletable && (\n          <Button\n            onClick={props.onPinDeleted}\n          >\n            <DeleteIcon />\n          </Button>\n        )\n      }\n    </ListItem>\n  )\n}\n\n/**\n * A react component for the inspector. The inspector allows the user to modify\n * the properties of each logic gate through a forms-style user interface.\n */\nexport default function Inspector (props) {\n  const { circuit, selection } = props\n  const classes = useStyles()\n\n  const selectedGates = useMemo(\n    () => circuit.gates.filter((gate) => selection[gate.id]),\n    [circuit, selection]\n  )\n\n  const minX = useMemo(\n    () => selectedGates.reduce((min, gate) => Math.min(min, gate.x), Infinity),\n    [selectedGates]\n  )\n\n  const minY = useMemo(\n    () => selectedGates.reduce((min, gate) => Math.min(min, gate.y), Infinity),\n    [selectedGates]\n  )\n\n  const sharedLabel = useMemo(\n    () => selectedGates.reduce((label, gate) =>\n      label === undefined\n        ? gate.label || ''\n        : (gate.label === label && gate.label !== undefined ? label : ''),\n    undefined) || '',\n    [selectedGates]\n  )\n\n  const allHaveLabels = useMemo(\n    () => selectedGates.every((gate) => gate.label !== undefined),\n    [selectedGates]\n  )\n\n  const [x, setX] = useState(0)\n  const [y, setY] = useState(0)\n  const [label, setLabel] = useState('')\n\n  useEffect(() => {\n    setX(minX)\n    setY(minY)\n  }, [minX, minY])\n\n  useEffect(() => {\n    setLabel(sharedLabel)\n  }, [sharedLabel])\n\n  const updateGates = (callback) => {\n    const clone = { ...circuit }\n    clone.gates = circuit.gates.map((gate) => {\n      if (selection[gate.id]) {\n        return callback(gate)\n      } else {\n        return gate\n      }\n    })\n    props.onCircuitChanged(clone)\n  }\n\n  const gate = selectedGates[0]\n\n  const updatePin = (index, pin, isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = [...gateClone.outputs]\n      gateClone.outputs[index] = pin\n    } else {\n      gateClone.inputs = [...gateClone.inputs]\n      gateClone.inputs[index] = pin\n    }\n    props.onCircuitChanged(clone)\n  }\n\n  const addPin = (isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = [...gateClone.outputs, logic.pin()]\n    } else {\n      gateClone.inputs = [...gateClone.inputs, logic.pin()]\n    }\n    props.onCircuitChanged(clone)\n  }\n\n  const deletePin = (index, isOutput) => {\n    const clone = { ...circuit }\n    clone.gates = [...circuit.gates]\n    const gateClone = {\n      ...gate\n    }\n    clone.gates[clone.gates.indexOf(gate)] = gateClone\n\n    if (isOutput) {\n      gateClone.outputs = gateClone.outputs.filter((v, i) => i !== index)\n    } else {\n      gateClone.inputs = gateClone.inputs.filter((v, i) => i !== index)\n    }\n\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n\n    props.onCircuitChanged(clone)\n  }\n\n  if (selectedGates.length === 0) {\n    return (\n      <Typography variant='body1'>\n        Make a selection, then its properties will be available here.\n      </Typography>\n    )\n  } else {\n    const isLogicGate = (\n      gate.type === 'and' ||\n      gate.type === 'or' ||\n      gate.type === 'xor')\n\n    const gateProps = (\n      <>\n        <Typography variant='h5'>Inputs</Typography>\n        <List>\n          {\n            gate.inputs.map((pin, i) =>\n              <PinProperties\n                key={i}\n                index={i}\n                pin={pin}\n                label={\n                  gate.type === 'mux' &&\n                    (i < gate.n ? `Select ${i + 1}` : `Data ${i - gate.n + 1}`)\n                }\n                onChange={(newPin) => updatePin(i, newPin, false)}\n                onPinDeleted={() => deletePin(i, false)}\n                deletable={gate.inputs.length > 2 && isLogicGate}\n              />\n            )\n          }\n          {\n            isLogicGate &&\n        (gate.inputs.length < 4) &&\n        (\n          <ListItem>\n            <Button\n              variant='contained'\n              fullWidth\n              onClick={() => addPin(false)}\n            >\n              Add Pin\n            </Button>\n          </ListItem>\n        )\n          }\n        </List>\n\n        <Typography variant='h5'>Outputs</Typography>\n        <List>\n          {\n            gate.outputs.map((pin, i) =>\n              <PinProperties\n                key={i}\n                index={i}\n                pin={pin}\n                onChange={(newPin) => updatePin(i, newPin, true)}\n                onPinDeleted={() => deletePin(i, true)}\n              />\n            )\n          }\n        </List>\n      </>\n    )\n\n    return (\n      <form className={classes.form} noValidate>\n        <TextField\n          label='X'\n          variant='filled'\n          value={x}\n          onChange={(e) => setX(e.target.value)}\n          onBlur={(e) => {\n            if (!isNaN(e.target.value)) {\n              updateGates((gate) => ({\n                ...gate,\n                x: Number(e.target.value) - minX + gate.x\n              }))\n            }\n          }}\n        />\n\n        <TextField\n          label='Y'\n          variant='filled'\n          onChange={(e) => setY(e.target.value)}\n          value={y}\n          onBlur={(e) => {\n            if (!isNaN(e.target.value)) {\n              updateGates((gate) => ({\n                ...gate,\n                y: Number(e.target.value) - minY + gate.y\n              }))\n            }\n          }}\n        />\n\n        <TextField\n          label='Label'\n          variant='filled'\n          value={label}\n          onChange={(e) => setLabel(e.target.value)}\n          disabled={!allHaveLabels}\n          onBlur={(e) => {\n            if (e.target.value.length > 0) {\n              updateGates((gate) => ({\n                ...gate,\n                label: e.target.value\n              }))\n            }\n          }}\n        />\n\n        {\n          selectedGates.length === 1 && gateProps\n        }\n      </form>\n    )\n  }\n}\n","/*\n * Themes are responsible for determining the images to use for each logic gate,\n * as well as the position of the pins.\n */\n\nimport logic from './logic'\n\n/* SVGs */\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport XorGateSvg from './assets/xor-gate.svg'\nimport OpenPinSvg from './assets/open-pin.svg'\nimport OpenPinInvertedSvg from './assets/open-pin-inverted.svg'\nimport PinSvg from './assets/pin.svg'\nimport PinInvertedSvg from './assets/pin-inverted.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport LedGlowSvg from './assets/led-glow.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SwitchOnSvg from './assets/switch-on.svg'\nimport SenderSvg from './assets/sender.svg'\nimport ReceiverSvg from './assets/receiver.svg'\nimport MuxSvg from './assets/mux.svg'\nimport DemuxSvg from './assets/demux.svg'\n\nconst defaultThemeSvgs = {\n  and: () => AndGateSvg,\n  or: () => OrGateSvg,\n  xor: () => XorGateSvg,\n  buffer: () => BufferGateSvg,\n  led: (gate, state) =>\n    state\n      ? (logic.getInputs(gate, state)[0] ? LedGlowSvg : LedSvg)\n      : LedSvg,\n  constant: (gate) => gate.value ? OneGateSvg : ZeroGateSvg,\n  switch: (gate, state) =>\n    state\n      ? (logic.getUserInput(gate, state) ? SwitchOnSvg : SwitchOffSvg)\n      : SwitchOffSvg,\n  sender: () => SenderSvg,\n  receiver: () => ReceiverSvg,\n  mux: () => MuxSvg,\n  demux: () => DemuxSvg\n}\n\nconst defaultTheme = {\n  /* Returns an SVG for the given pin. */\n  getPinSvg: (pin) => (\n    pin.connections.length === 0\n      ? (pin.isInverted\n        ? OpenPinInvertedSvg\n        : OpenPinSvg)\n      : (pin.isInverted\n        ? PinInvertedSvg\n        : PinSvg)),\n\n  /* Returns an SVG for the given gate. */\n  getGateSvg (gate, state) {\n    return defaultThemeSvgs[gate.type](gate, state)\n  },\n\n  /* Returns an object mapping a pin ID to a pin position. */\n  getPinPositions (gate, x, y, state) {\n    const calcY = (index, length) => (index - (length - 1) / 2) /\n        Math.max(length - 1, 1)\n\n    /* Maps a pin ID to a position */\n    if (gate.type === 'mux') {\n      const ret = {}\n      gate.inputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x,\n          y: y + 0.25 - calcY(\n            index + (index >= gate.n ? 1 : 0),\n            gate.inputs.length + 1) * 0.3\n        }\n      })\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - calcY(index, gate.outputs.length) * 0.225\n        }\n      })\n      return ret\n    } else if (gate.type === 'demux') {\n      const ret = {}\n      gate.inputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x,\n          y: y + 0.3 - calcY(\n            index + (index >= gate.n ? 1 : 0),\n            gate.inputs.length + 1) * 0.2\n        }\n      })\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - calcY(index, gate.outputs.length) * 0.3\n        }\n      })\n      return ret\n    } else {\n      const ret = {}\n\n      gate.inputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x,\n          y: y + 0.25 - calcY(index, gate.inputs.length) * 0.225\n        }\n      })\n\n      gate.outputs.forEach((pin, index) => {\n        ret[pin.id] = {\n          x: x + 0.5,\n          y: y + 0.25 - calcY(index, gate.outputs.length) * 0.225\n        }\n      })\n\n      return ret\n    }\n  },\n\n  getWidth (gate, state) {\n    return 0.5\n  },\n\n  getHeight (gate, state) {\n    return 0.5\n  }\n}\n\nexport {\n  defaultTheme\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport packageJson from '../package.json'\n\n/* Material UI components. */\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Container from '@material-ui/core/Container'\nimport Drawer from '@material-ui/core/Drawer'\nimport Typography from '@material-ui/core/Typography'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Box from '@material-ui/core/Box'\nimport Fade from '@material-ui/core/Fade'\n\n/* Icons. */\nimport StopIcon from '@material-ui/icons/Stop'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport RedoIcon from '@material-ui/icons/Redo'\nimport UndoIcon from '@material-ui/icons/Undo'\nimport HelpIcon from '@material-ui/icons/Help'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\n/* Editor components. */\nimport Page from './Page'\nimport Palette from './Palette'\nimport Inspector from './Inspector'\n\n/* Logic components. */\nimport logic from './logic'\nimport { defaultTheme } from './themes'\n\nimport { upload, download } from './utils'\n\nimport { useUndoable } from './hooks'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport SimWorker from 'workerize-loader!./sim.worker'\n\nconst drawerWidth = 320\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  menuButtonGroup: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerContent: {\n    width: drawerWidth,\n    overflowX: 'hidden'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\nfunction PageChanger (props) {\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const classes = useStyles()\n\n  const onClose = () => setAnchorEl(null)\n  const onClick = (e) => setAnchorEl(e.currentTarget)\n\n  const menuItems = []\n  for (let i = 0; i <= props.pageCount; i++) {\n    menuItems.push(\n      <MenuItem\n        key={i}\n        onClick={() => {\n          props.onChangedPage(i)\n          onClose()\n        }}\n      >\n        Page {i + 1}\n      </MenuItem>\n    )\n  }\n\n  return (\n    <>\n      <Tooltip title='Change page'>\n        <Button\n          aria-controls='simple-menu'\n          aria-haspopup='true'\n          aria-label='change page'\n          className={classes.menuButton}\n          color='inherit'\n          onClick={onClick}\n        >\n          Page {1 + props.page}\n          <ExpandMoreIcon />\n        </Button>\n      </Tooltip>\n\n      <Menu\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClose}\n        anchorEl={anchorEl}\n      >\n        {menuItems}\n      </Menu>\n    </>\n  )\n}\n\nfunction TabPanel (props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <Fade\n      in={value === index}\n    >\n      <div\n        role='tabpanel'\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            {children}\n          </Box>\n        )}\n      </div>\n    </Fade>\n  )\n}\n\nfunction App () {\n  const [circuit, setCircuit, undo, redo] = useUndoable(() => logic.circuit([]))\n  const [selection, setSelection] = useState(false)\n  const [simState, setSimState] = useState(null)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [copiedGates, setCopiedGates] = useState(null)\n  const [contextMenuPos, setContextMenuPos] = useState(null)\n  const [currentPage, setCurrentPage] = useState(0)\n  const [pageCount, setPageCount] = useState(1)\n  const [tab, setTab] = useState(0)\n\n  const simWorker = useRef(new SimWorker())\n\n  /* For opening and closing the error snackbar. */\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  /* Refs used for calculating the center of the page. */\n  const appBarRef = React.createRef()\n  const pageRef = React.createRef()\n\n  const classes = useStyles()\n\n  const closeContextMenu = () => setContextMenuPos(null)\n\n  const downloadProject = () => {\n    download('circuit.json', {\n      version: packageJson.version,\n      circuit,\n      currentPage\n    })\n  }\n\n  const uploadProject = () =>\n    upload()\n      .then((data) => {\n        setCircuit(logic.renumber(data.circuit))\n\n        const maxPage = data.circuit.gates.reduce(\n          (maxPage, gate) => gate.page ? Math.max(maxPage, gate.page) : maxPage,\n          0\n        )\n\n        const page = data.currentPage || 0\n\n        /* Set the number of pages available to the user. */\n        setPageCount(Math.max(page, maxPage + 1))\n\n        /* Goto the first page, or the current page that was saved. */\n        setCurrentPage(page)\n      })\n      .catch((error) => {\n        setErrorMessage(\"Uh oh! We weren't able to load that file.\")\n        console.error(error)\n      })\n\n  const selectAll = () => {\n    setSelection(\n      Object.fromEntries(\n        circuit.gates\n          .filter((gate) => (gate.page || 0) === currentPage)\n          .map((gate) => [gate.id, true]))\n    )\n    closeContextMenu()\n  }\n\n  const copy = () => {\n    /* Copy the selection. */\n    setCopiedGates(\n      logic.removeInvalidConnections(\n        circuit.gates.filter((gate) => selection[gate.id])\n      )\n    )\n    closeContextMenu()\n  }\n\n  const paste = () => {\n    if (copiedGates) {\n      /* Renumber the circuit so we have no ID collisions. */\n      const clone = logic.renumber(circuit)\n      /* Append the copied gates to the circuit. */\n      clone.gates = [\n        ...clone.gates,\n        ...copiedGates.map((gate) => ({\n          ...gate,\n          page: currentPage\n        }))\n      ]\n      setCircuit(clone)\n    }\n    closeContextMenu()\n  }\n\n  const onPlayButtonClicked = () => {\n    if (!isPlaying) {\n      /* Check for repeated senders. */\n      const duplicates = logic.getDuplicateSenderLabels(circuit.gates)\n\n      if (duplicates.length === 0) {\n        simWorker.current.startSimulation(circuit)\n        setIsPlaying(true)\n      } else {\n        setErrorMessage(\n          `Uh oh! Multiple senders for labels: ${duplicates.join(', ')}`\n        )\n      }\n    } else {\n      simWorker.current.stopSimulation()\n      setIsPlaying(false)\n    }\n  }\n\n  useEffect(() => {\n    let shouldLoop = isPlaying\n\n    const loop = (state) => {\n      if (shouldLoop) {\n        setSimState(state)\n        simWorker.current.getState().then(loop)\n      } else {\n        setSimState(null)\n      }\n    }\n    loop(null)\n\n    return () => { shouldLoop = false }\n  }, [isPlaying])\n\n  const deleteSelection = () => {\n    const clone = { ...circuit }\n\n    /* Remove the selected gates. */\n    clone.gates = clone.gates.filter((gate) => !selection[gate.id])\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n    setCircuit(clone)\n  }\n\n  const cut = () => {\n    copy()\n    deleteSelection()\n    closeContextMenu()\n  }\n\n  const changePage = (page) => {\n    if (page >= 0) {\n      setCurrentPage(page)\n      if (page >= pageCount) {\n        setPageCount(page + 1)\n      }\n    }\n  }\n\n  /* Attach key bindings to document body. */\n  useEffect(() => {\n    const onKeyDown = (e) => {\n      if (e.target === document.body) {\n        const uppercase = e.key.toUpperCase()\n\n        if (e.getModifierState('Control')) {\n          if (uppercase === 'C') {\n            copy()\n          } else if (uppercase === 'V') {\n            paste()\n          } else if (uppercase === 'X') {\n            cut()\n          } else if (uppercase === 'A') {\n            selectAll()\n          } else if (uppercase === 'Z') {\n            undo()\n          } else if (uppercase === 'Y') {\n            redo()\n          }\n        } else if (e.key === 'Delete') {\n          deleteSelection()\n        } else if (uppercase === 'P') {\n          onPlayButtonClicked()\n        } else if (!isNaN(e.key)) {\n          changePage(Number(e.key) - 1)\n        } else if (e.key === '+') {\n          changePage(currentPage + 1)\n        } else if (e.key === '-') {\n          changePage(currentPage - 1)\n        }\n\n        e.preventDefault()\n      }\n    }\n    document.body.addEventListener('keydown', onKeyDown)\n    return () => document.body.removeEventListener('keydown', onKeyDown)\n  })\n\n  return (\n    <div\n      className={classes.root}\n      onContextMenu={(event) => {\n        event.preventDefault()\n        setContextMenuPos([event.clientX - 2, event.clientY - 4])\n      }}\n    >\n      <CssBaseline />\n\n      <Drawer variant='persistent' className={classes.drawer} open>\n        <Toolbar />\n        <div\n          className={classes.drawerContent}\n        >\n          <Tabs\n            onChange={(e, value) => setTab(value)}\n            value={tab}\n            variant='fullWidth'\n          >\n            <Tab label='Palette' />\n            <Tab label='Properties' />\n          </Tabs>\n          <TabPanel value={tab} index={0}>\n            <Palette\n              onSelect={(factory) => {\n                /* Clone the circuit. */\n                const clone = { ...circuit }\n                clone.gates = [...clone.gates]\n\n                /* Place the gate. */\n                const gate = factory()\n                clone.gates.push(gate)\n\n                /* Calculate the gate position. */\n                const appBarRect = appBarRef.current.getBoundingClientRect()\n                const pageRect = pageRef.current.getBoundingClientRect()\n\n                gate.x = ((appBarRect.width + drawerWidth) / 2 -\n                  pageRect.left) / 96\n                gate.y = (\n                  (window.innerHeight + appBarRect.height) / 2 -\n                  pageRect.top) / 96\n\n                gate.page = currentPage\n\n                /* Update with the new circuit. */\n                setCircuit(clone)\n              }}\n            />\n          </TabPanel>\n          <TabPanel value={tab} index={1}>\n            <Inspector\n              circuit={circuit}\n              selection={selection}\n              onCircuitChanged={(circuit) => setCircuit(circuit)}\n            />\n          </TabPanel>\n        </div>\n      </Drawer>\n\n      <AppBar position='fixed' className={classes.appBar} ref={appBarRef}>\n        <Toolbar>\n\n          <Typography variant='h6' className={classes.title}>Flux Logic</Typography>\n\n          <PageChanger\n            page={currentPage}\n            pageCount={pageCount}\n            onChangedPage={changePage}\n          />\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Upload project'>\n              <Button\n                aria-label='upload'\n                onClick={uploadProject}\n              >\n                <CloudUploadIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Download project'>\n              <Button\n                aria-label='download'\n                onClick={downloadProject}\n              >\n                <CloudDownloadIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Undo'>\n              <Button aria-label='undo' onClick={undo}>\n                <UndoIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Redo'>\n              <Button aria-label='redo' onClick={redo}>\n                <RedoIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <Tooltip title={isPlaying ? 'Stop simulation' : 'Start simulation'}>\n            <Button\n              aria-label={isPlaying ? 'stop' : 'start'}\n              onClick={onPlayButtonClicked}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              {\n                isPlaying ? <StopIcon /> : <PlayIcon />\n              }\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Delete selection'>\n            <Button\n              aria-label='delete'\n              onClick={deleteSelection}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <DeleteIcon />\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Help'>\n            <Button\n              aria-label='help'\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <HelpIcon />\n            </Button>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n\n      <Toolbar />\n      <main className={classes.content}>\n        <Toolbar />\n        <Container>\n          <Page\n            page={currentPage}\n            circuit={circuit}\n            theme={defaultTheme}\n            ref={pageRef}\n            selection={selection}\n            simState={simState}\n            onSelectionChanged={(selection) => {\n              setSelection(selection)\n            }}\n            onCircuitChanged={(circuit) => {\n              setCircuit(circuit)\n            }}\n            onUserInputChanged={(gate, value) => {\n              simWorker.current.setUserInput(gate, value)\n            }}\n            editable={!simState}\n          />\n        </Container>\n      </main>\n      <Snackbar\n        open={errorMessage !== null}\n        autoHideDuration={10000}\n        onClose={() => { setErrorMessage(null) }}\n        message={errorMessage}\n      />\n      <Menu\n        keepMounted\n        open={contextMenuPos !== null}\n        onClose={closeContextMenu}\n        anchorReference='anchorPosition'\n        anchorPosition={\n          contextMenuPos && { left: contextMenuPos[0], top: contextMenuPos[1] }\n        }\n      >\n        <MenuItem onClick={cut}>Cut</MenuItem>\n        <MenuItem onClick={copy}>Copy</MenuItem>\n        <MenuItem onClick={paste}>Paste</MenuItem>\n        <MenuItem onClick={selectAll}>Select all</MenuItem>\n      </Menu>\n    </div>\n  )\n}\n\nexport default App\n","/*\n * Utility functions\n */\n\n/*\n * Converts the given data to JSON, and prompts the user to save the file as the\n * given filename.\n */\nexport const download = (filename, data) => {\n  var element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    `data:text/plain;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`)\n  element.setAttribute('download', filename)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\n/*\n * Prompts the user to upload a file. Returns a promise that resolves to the\n * parsed JSON.\n */\nexport const upload = () => {\n  return new Promise((resolve, reject) => {\n    var element = document.createElement('input')\n    element.setAttribute('type', 'file')\n\n    element.style.display = 'none'\n    document.body.appendChild(element)\n\n    element.addEventListener(\n      'change',\n      function () {\n        this.files[0].text()\n          .then(JSON.parse)\n          .then((data) => resolve(data))\n          .catch((error) => reject(error))\n      },\n      false)\n\n    element.click()\n\n    document.body.removeChild(element)\n  })\n}\n","/* eslint-env serviceworker */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#5f5fc4',\n      main: '#283593',\n      dark: '#001064',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#ffbd45',\n      main: '#fb8c00',\n      dark: '#c25e00',\n      contrastText: '#fff'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap' />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/and-gate.b39df76c.svg\";","module.exports = __webpack_public_path__ + \"static/media/or-gate.ce29e395.svg\";","module.exports = __webpack_public_path__ + \"static/media/led.788936c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/buffer-gate.96d07f6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-off.b1ab986c.svg\";","module.exports = __webpack_public_path__ + \"static/media/mux.148e9d2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/demux.7b2120ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/xor-gate.12bb51fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/one-gate.ac34b99c.svg\";","module.exports = __webpack_public_path__ + \"static/media/zero-gate.d126f49d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sender.737fb0fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/receiver.34ee3b2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-inverted.25b87449.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin.402b8aa6.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin-inverted.fb8a5ebb.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.4c8eaca6.svg\";","module.exports = __webpack_public_path__ + \"static/media/led-glow.ff1875d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-on.37d11db0.svg\";","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"startSimulation\",\"getState\",\"stopSimulation\",\"setUserInput\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"9999bf6c9cd165a1cee9.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t"],"sourceRoot":""}