{"version":3,"sources":["assets/and-gate.svg","assets/or-gate.svg","assets/led.svg","assets/buffer-gate.svg","assets/switch-off.svg","assets/one-gate.svg","assets/zero-gate.svg","assets/pin-inverted.svg","assets/open-pin.svg","assets/open-pin-inverted.svg","assets/pin.svg","assets/led-glow.svg","assets/switch-on.svg","sim.worker.js","logic.js","Wire.js","hooks.js","LogicGate.js","Circuit.js","SelectionBox.js","Page.js","Palette.js","themes.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["module","exports","addMethods","methods","w","Worker","name","nextOutputFunctions","and","gate","state","getInputs","every","x","or","some","constant","value","led","buffer","switch","Boolean","getUserInput","pin","id","nextId","connections","nextState","circuit","prevState","outputs","inputs","gates","nextOutputs","type","i","length","isInverted","Object","assign","map","currentId","Number","MAX_SAFE_INTEGER","getValidPins","fromEntries","reduce","t","concat","getOutputs","setUserInput","fastForward","n","renumber","clone","maxId","calcNewId","updateId","object","r","connect","a","b","push","andGate","seal","orGate","constantGate","switchGate","removeInvalidConnections","validPins","gateClone","updatePin","filter","Wire","props","x0","y0","x1","y1","curve","Math","min","abs","padding","l","c0","c1","width","height","d","viewBox","style","position","left","top","pointerEvents","stroke","strokeWidth","fill","useRefCallback","callback","ref","useRef","memoizedCallback","useCallback","current","useEffect","useStyles","makeStyles","theme","selectedGate","margin","border","palette","primary","main","background","fade","borderRadius","cursor","editableGate","editablePin","LogicGate","React","memo","classes","y","getWidth","getHeight","pinPositions","getPinPositions","isSelected","selected","Pin","pinProps","alt","src","getPinSvg","onMouseDown","e","onPinMouseDown","isOutput","onMouseUp","onPinMouseUp","className","editable","key","svg","onClick","onGateClick","onGateMouseDown","Circuit","isEditable","selection","moveAmount","simState","useMemo","positions","forEach","getGateSvg","selectionBox","SelectionBox","useState","selectionStart","selectionEnd","setSelectionEnd","onSelectionChanged","onMouseMove","end","clientX","clientY","max","document","addEventListener","removeEventListener","page","boxShadow","marginBottom","PreviewWire","setEnd","clientToPage","isOutputPin","Page","forwardRef","onCircuitChanged","onUserInputChanged","setSelectionStart","toBeAddedToSelection","setToBeAddedToSelection","isDragging","setIsDragging","didDrag","setDidDrag","moveStart","setMoveStart","moveEnd","setMoveEnd","wireStartPin","setWireStartPin","wireStartPinIsOutput","setWireStartPinIsOutput","coord","bounds","getBoundingClientRect","button","newSelection","shiftKey","stopPropagation","logic","preventDefault","onMove","addWire","from","to","shouldUpdate","hasPin","inIndex","indexOf","outIndex","findIndex","output","totalSelection","window","ul","br","isOverlapping","PaletteItem","Grid","item","xs","title","text","Button","overflow","inverted","PinInvertedSvg","Palette","invert","container","AndGateSvg","onSelect","OrGateSvg","ZeroGateSvg","OneGateSvg","BufferGateSvg","LedSvg","SwitchOffSvg","defaultThemeSvgs","LedGlowSvg","SwitchOnSvg","defaultTheme","OpenPinInvertedSvg","OpenPinSvg","PinSvg","ret","index","root","display","appBar","zIndex","drawer","menuButton","marginRight","spacing","menuButtonGroup","hide","flexShrink","drawerContent","content","flexGrow","App","present","setPresent","past","setPast","future","setFuture","canUndo","canRedo","splice","slice","useUndoable","setCircuit","undo","redo","setSelection","setSimState","isPlaying","setIsPlaying","copiedGates","setCopiedGates","contextMenuPos","setContextMenuPos","simWorker","SimWorker","openUploadError","setOpenUploadError","appBarRef","createRef","pageRef","closeContextMenu","shouldLoop","loop","getState","then","CssBaseline","Drawer","variant","open","Toolbar","factory","appBarRect","pageRect","innerHeight","AppBar","Typography","ButtonGroup","color","Tooltip","aria-label","Promise","resolve","reject","element","createElement","setAttribute","body","appendChild","this","files","JSON","parse","data","catch","error","click","removeChild","console","filename","encodeURIComponent","stringify","download","version","packageJson","stopSimulation","startSimulation","Container","onContextMenu","event","Snackbar","autoHideDuration","onClose","message","Menu","keepMounted","anchorReference","anchorPosition","MenuItem","location","hostname","match","ReactDOM","render","StrictMode","rel","href","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20900b60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/and-gate.b39df76c.svg\";","module.exports = __webpack_public_path__ + \"static/media/or-gate.ce29e395.svg\";","module.exports = __webpack_public_path__ + \"static/media/led.788936c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/buffer-gate.96d07f6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-off.b1ab986c.svg\";","module.exports = __webpack_public_path__ + \"static/media/one-gate.ac34b99c.svg\";","module.exports = __webpack_public_path__ + \"static/media/zero-gate.d126f49d.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-inverted.25b87449.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin.402b8aa6.svg\";","module.exports = __webpack_public_path__ + \"static/media/open-pin-inverted.fb8a5ebb.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.4c8eaca6.svg\";","module.exports = __webpack_public_path__ + \"static/media/led-glow.ff1875d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-on.37d11db0.svg\";","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"startSimulation\",\"getState\",\"stopSimulation\",\"setUserInput\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"0b06bb78d7d6425039f3.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","/*\n * An object mapping gate types to functions.\n */\nconst nextOutputFunctions = {\n  and: (gate, state) => [getInputs(gate, state).every((x) => x)],\n  or: (gate, state) => [getInputs(gate, state).some((x) => x)],\n  constant: (gate, state) => [gate.value],\n  led: (gate, state) => [],\n  buffer: (gate, state) => getInputs(gate, state),\n  switch: (gate, state) => [Boolean(getUserInput(gate, state))]\n}\n\n/** Connect to logic pins by a wire. */\nfunction connect (a, b) {\n  a.connections.push(b.id)\n  b.connections.push(a.id)\n}\n\n/**\n * Creates a circuit with the given gates.\n */\nfunction circuit (gates) {\n  return {\n    gates\n  }\n}\n\n/**\n * Creates a logic pin. A pin may be inverted by setting its isInverted field.\n */\nfunction pin () {\n  return {\n    id: nextId(),\n    connections: []\n  }\n}\n\n/** Creates an and gate. */\nfunction andGate () {\n  return {\n    id: nextId(),\n    type: 'and',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an or gate. */\nfunction orGate () {\n  return {\n    id: nextId(),\n    type: 'or',\n    inputs: [pin(), pin()],\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates a constant gate (for simulating ground or 1). */\nfunction constantGate (value) {\n  return {\n    id: nextId(),\n    type: 'constant',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()]),\n    value: value || false\n  }\n}\n\n/** Creates a switch gate that the user can interact with. */\nfunction switchGate () {\n  return {\n    id: nextId(),\n    type: 'switch',\n    inputs: Object.seal([]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/** Creates an LED. */\nfunction led () {\n  return {\n    id: nextId(),\n    type: 'led',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([])\n  }\n}\n\n/** Creates a buffer (a gate that simply passes its input to its output). */\nfunction buffer () {\n  return {\n    id: nextId(),\n    type: 'buffer',\n    inputs: Object.seal([pin()]),\n    outputs: Object.seal([pin()])\n  }\n}\n\n/**\n * Computes a state object to represent the current state of the simulation for\n * the given circuit. If prevState is passed, returns the next state after the\n * given state.\n *\n * The state object is an object containing an outputs field, which is an object\n * that maps each pin ID to a boolean value. For example, if a pin with ID 2 has\n * an output of true, the state object would look something like this:\n * { outputs: { 2: true } }\n *\n * To calculate the inputs and outputs of individual gates, the getInputs and\n * getOutputs helper functions can be used.\n *\n * The input from the user (for example, whether a switch is switched or not) is\n * stored in the inputs field, that maps a gate ID to a user input object. The\n * format of the input depends on the gate itself.\n */\nfunction nextState (circuit, prevState) {\n  const state = { outputs: {}, inputs: {} }\n\n  if (prevState) {\n    for (const gate of circuit.gates) {\n      /* Calculate the next output. */\n      const nextOutputs = nextOutputFunctions[gate.type](gate, prevState)\n\n      for (let i = 0; i < nextOutputs.length; i++) {\n        state.outputs[gate.outputs[i].id] = (\n          nextOutputs[i] ^ gate.outputs[i].isInverted) === 1\n      }\n    }\n\n    Object.assign(state.inputs, prevState.inputs)\n  } else {\n    /* Initialize all outputs to false. */\n    for (const gate of circuit.gates) {\n      for (const pin of gate.outputs) {\n        state.outputs[pin.id] = false\n      }\n    }\n  }\n\n  return state\n}\n\n/**\n * Returns a list of input booleans for the gate given the current simulation\n * state.\n */\nfunction getInputs (gate, state) {\n  return gate.inputs\n    .map((pin) => (state.outputs[pin.connections[0]] ^ pin.isInverted) === 1)\n}\n\n/**\n * Returns a list of output booleans for the gate given the current simulation\n * state.\n */\nfunction getOutputs (gate, state) {\n  return gate.outputs.map((pin) => state.outputs[pin.id])\n}\n\n/**\n * Returns the user input for the gate given the current simulation state.\n */\nfunction getUserInput (gate, state) {\n  return state.inputs[gate.id]\n}\n\n/**\n * Sets the user input for the gate for the current simulation state.\n */\nfunction setUserInput (gate, state, value) {\n  state.inputs[gate.id] = value\n}\n\n/**\n * Skip forward n simulation states given a circuit, n, and the (optional)\n * current state. This function simply calls nextState(circuit, state) n times.\n */\nfunction fastForward (circuit, n, state) {\n  for (let i = 0; i < n; i++) {\n    state = nextState(circuit, state)\n  }\n  return state\n}\n\n/*\n * Function to return a unique id. This should only be used within this JS file.\n * The ID wraps around to 0 once Number.MAX_SAFE_INTEGER is reached. This is\n * assumed to be okay since Number.MAX_SAFE_INTEGER is so large.\n */\nlet currentId = 0\nfunction nextId () {\n  if (currentId >= Number.MAX_SAFE_INTEGER) {\n    currentId = 0\n  }\n\n  return currentId++\n}\n\n/*\n * This function renumbers the IDs of the given circuit so that there are no\n * collisions. This should be called any time a circuit is loaded to avoid\n * collisions. It returns the circuit.\n */\nfunction renumber (circuit) {\n  const clone = { ...circuit }\n  let maxId = currentId\n\n  const calcNewId = (id) => currentId < (Number.MAX_SAFE_INTEGER - id)\n    ? id + currentId\n    : (id - Number.MAX_SAFE_INTEGER) + currentId\n\n  const updateId = (object) => {\n    const clone = {\n      ...object,\n      id: calcNewId(object.id)\n    }\n    if (clone.id > maxId) {\n      maxId = clone.id\n    }\n\n    if (clone.connections) {\n      clone.connections = clone.connections.map(calcNewId)\n    }\n    return clone\n  }\n\n  clone.gates = clone.gates.map((gate) => {\n    const r = updateId(gate)\n    r.inputs = r.inputs.map(updateId)\n    r.outputs = r.outputs.map(updateId)\n    return r\n  })\n\n  currentId = maxId + 1\n\n  return clone\n}\n\n/**\n * Create an object containing the IDs of all valid pins for the given gates.\n */\nconst getValidPins = (gates) => (\n  Object.fromEntries(gates.reduce(\n    (t, gate) => t.concat(\n      gate.inputs.map((pin) => pin.id),\n      gate.outputs.map((pin) => pin.id)),\n    []\n  ).map((id) => [id, true]))\n)\n\n/**\n * Returns a new list of gates from the given list of gates with the\n * connections to invalid pins removed.\n */\nconst removeInvalidConnections = (gates) => {\n  const validPins = getValidPins(gates)\n\n  /* Remove all connections that point to a deleted pin. */\n  return gates.map((gate) => {\n    const gateClone = { ...gate }\n    const updatePin = (pin) => {\n      return {\n        ...pin,\n        connections: pin.connections.filter((id) => validPins[id])\n      }\n    }\n\n    gateClone.inputs = gateClone.inputs.map(updatePin)\n    gateClone.outputs = gateClone.outputs.map(updatePin)\n    return gateClone\n  })\n}\n\nexport default {\n  /* Simulation. */\n  nextState,\n  getOutputs,\n  getInputs,\n  getUserInput,\n  setUserInput,\n  fastForward,\n\n  /* Circuit creation. */\n  renumber,\n  connect,\n  circuit,\n  andGate,\n  orGate,\n  constantGate,\n  switchGate,\n  led,\n  buffer,\n\n  /* Utils. */\n  removeInvalidConnections,\n  getValidPins\n}\n","import React from 'react'\n\nfunction Wire (props) {\n  const x0 = Number(props.x0)\n  const y0 = Number(props.y0)\n  const x1 = Number(props.x1)\n  const y1 = Number(props.y1)\n\n  const curve = Math.min(Math.abs(y1 - y0), Math.abs(x1 - x0))\n  const padding = 0.1 + (x1 < x0 ? curve * 0.25 : 0)\n\n  const l = Math.min(x0, x1) - padding\n  const t = Math.min(y0, y1) - padding\n\n  const c0 = x0 - l + curve\n  const c1 = x1 - l - curve\n\n  const width = Math.abs(x1 - x0) + padding * 2\n  const height = Math.abs(y1 - y0) + padding * 2\n\n  const d = `M ${x0 - l} ${y0 - t} ` +\n            `C ${c0} ${y0 - t}, ${c1} ${y1 - t}, ${x1 - l} ${y1 - t}`\n\n  return (\n    <svg\n      width={`${width}in`}\n      height={`${height}in`}\n      viewBox={`0 0 ${width} ${height}`}\n      style={{\n        position: 'absolute',\n        left: `${l}in`,\n        top: `${t}in`,\n        pointerEvents: 'none'\n      }}\n    >\n      <path\n        d={d}\n        stroke='black' strokeWidth='0.01' fill='transparent'\n      />\n    </svg>\n  )\n}\n\nexport default Wire\n","import { useRef, useEffect, useCallback, useState } from 'react'\n\n/**\n * Creates a callback function that calls the given callback by reference. This\n * is useful when multiple components need to use the same callback, and you\n * don't want to trigger a rerender of all the components when the callback\n * changes. Returns the memoized callback.\n */\nexport const useRefCallback = (callback) => {\n  const ref = useRef(null)\n  const memoizedCallback = useCallback(\n    (...args) => ref.current(...args),\n    []\n  )\n\n  useEffect(() => {\n    ref.current = callback\n  }, [callback])\n\n  return memoizedCallback\n}\n\nexport const useUndoable = (state, max) => {\n  const [present, setPresent] = useState(state)\n  const [past, setPast] = useState([])\n  const [future, setFuture] = useState([])\n\n  const canUndo = past.length > 0\n  const canRedo = future.length > 0\n\n  const undo = () => {\n    if (canUndo) {\n      setFuture([present, ...future])\n      setPresent(past[0])\n      setPast(past.slice(1))\n    }\n  }\n\n  const redo = () => {\n    if (canRedo) {\n      setPast([present, ...past])\n      setPresent(future[0])\n      setFuture(future.slice(1))\n    }\n  }\n\n  const setState = (state) => {\n    setPast([present, ...past].splice(-(max || 1000)))\n    setPresent(state)\n    setFuture([])\n  }\n\n  return [present, setState, undo, redo]\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nimport Wire from './Wire'\n\nconst useStyles = makeStyles((theme) => ({\n  selectedGate: {\n    position: 'absolute',\n    margin: '-1px',\n    left: 0,\n    top: 0,\n    border: `1px solid ${theme.palette.primary.main}`,\n    background: fade(theme.palette.primary.main, 0.25),\n    borderRadius: '4px',\n    cursor: 'move'\n  },\n\n  gate: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  pin: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n\n  editableGate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    margin: '-1px',\n    border: '1px solid #ffffff00',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      border: `1px solid ${theme.palette.primary.main}`\n    }\n  },\n\n  editablePin: {\n    position: 'absolute',\n    margin: 0,\n    borderRadius: '4px',\n    cursor: 'pointer',\n    '&:hover': {\n      border: `1px solid ${theme.palette.primary.main}`,\n      margin: '-1px'\n    }\n  }\n}))\n\n/*\n * A react component representing a single logic gate.\n */\nconst LogicGate = React.memo((props) => {\n  /*\n   * The object responsible for placing the pins and choosing the SVGs. Note\n   * that this is not related to the material-ui theme.\n   */\n  const theme = props.theme\n\n  const classes = useStyles()\n\n  /* The position of the gate. */\n  const x = props.x\n  const y = props.y\n\n  const width = theme.getWidth(props.gate)\n  const height = theme.getHeight(props.gate)\n\n  /* The positions of the pins. */\n  const pinPositions = theme.getPinPositions(props.gate, x, y)\n\n  const isSelected = props.selected\n\n  const Pin = (pinProps) => (\n    <img\n      alt=''\n      src={theme.getPinSvg(pinProps.pin)}\n      onMouseDown={\n        (e) => props.onPinMouseDown(e, pinProps.pin, pinProps.isOutput)\n      }\n      onMouseUp={\n        (e) => props.onPinMouseUp(e, pinProps.pin, pinProps.isOutput)\n      }\n      style={{\n        left: `${pinPositions[pinProps.pin.id].x - x - 0.0625}in`,\n        top: `${pinPositions[pinProps.pin.id].y - y - 0.0625}in`\n      }}\n      className={props.editable ? classes.editablePin : classes.pin}\n    />\n  )\n\n  return (\n    <div\n      style={{\n        left: `${x}in`,\n        top: `${y}in`,\n        width: `${width}in`,\n        height: `${height}in`\n      }}\n      className={\n        isSelected\n          ? classes.selectedGate\n          : (props.editable ? classes.editableGate : classes.gate)\n      }\n    >\n\n      {\n        /* Input pin wires */\n        props.gate.outputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={pinPositions[pin.id].x - x - 0.25}\n            y1={pinPositions[pin.id].y - y}\n          />)\n      }\n\n      {\n        /* Output pin wires */\n        props.gate.inputs.map((pin) =>\n          <Wire\n            key={`${pin.id}-`}\n            x0={pinPositions[pin.id].x - x}\n            y0={pinPositions[pin.id].y - y}\n            x1={pinPositions[pin.id].x - x + 0.25}\n            y1={pinPositions[pin.id].y - y}\n          />)\n      }\n\n      {/* The gate itself */}\n      <img\n        alt={props.gate.type}\n        src={props.svg}\n        style={{ position: 'absolute' }}\n        onClick={(e) => props.onGateClick(e, props.gate)}\n        onMouseDown={(e) => props.onGateMouseDown(e, props.gate)}\n      />\n\n      {\n        /* Input pins */\n        props.gate.inputs.map((pin) =>\n          <Pin pin={pin} isOutput={false} key={pin.id} />\n        )\n      }\n\n      {\n        /* Output pins */\n        props.gate.outputs.map((pin) =>\n          <Pin pin={pin} isOutput key={pin.id} />\n        )\n      }\n    </div>\n  )\n})\n\nexport default LogicGate\n","import React, { useMemo } from 'react'\nimport { useRefCallback } from './hooks'\n\nimport Wire from './Wire'\nimport LogicGate from './LogicGate'\n\n/**\n * React component used to hold a circuit.\n */\nexport default function Circuit (props) {\n  const theme = props.theme\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n\n  const selection = props.selection\n  const moveAmount = props.moveAmount\n\n  const simState = props.simState\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    circuit.gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, circuit])\n\n  const onGateClick = useRefCallback(props.onGateClick, [])\n  const onGateMouseDown = useRefCallback(props.onGateMouseDown, [])\n\n  const onPinMouseUp = useRefCallback(props.onPinMouseUp, [])\n  const onPinMouseDown = useRefCallback(props.onPinMouseDown, [])\n\n  return (\n    <>\n      {\n        /* Wires */\n        circuit.gates.map(\n          (gate) => gate.inputs\n            .filter((pin) => pin.connections[0])\n            .map((pin) =>\n              <Wire\n                key={`${pin.id}-${pin.connections[0].id}`}\n                x0={pinPositions[pin.connections[0]].x}\n                y0={pinPositions[pin.connections[0]].y}\n                x1={pinPositions[pin.id].x}\n                y1={pinPositions[pin.id].y}\n              />))\n      }\n\n      {\n        /* Gates */\n        circuit.gates.map((gate) => {\n          const x = (gate.x || 0) +\n            (props.selection[gate.id] ? moveAmount[0] : 0)\n          const y = (gate.y || 0) +\n            (props.selection[gate.id] ? moveAmount[1] : 0)\n\n          return (\n            <LogicGate\n              gate={gate}\n              svg={theme.getGateSvg(gate, simState)}\n              x={x}\n              y={y}\n              key={gate.id}\n              theme={theme}\n              selected={selection[gate.id]}\n              editable={isEditable}\n              onGateClick={onGateClick}\n              onGateMouseDown={onGateMouseDown}\n              onPinMouseDown={onPinMouseDown}\n              onPinMouseUp={onPinMouseUp}\n            />\n          )\n        })\n      }\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\n\nconst useStyles = makeStyles((theme) => ({\n  selectionBox: {\n    position: 'fixed',\n    border: `1px solid ${theme.palette.primary.main}`,\n    background: fade(theme.palette.primary.main, 0.25),\n    pointerEvents: 'none'\n  }\n}))\n\n/*\n * A react component for a selection box dragged by the user.\n */\nfunction SelectionBox (props) {\n  const [selectionEnd, setSelectionEnd] = useState(props.selectionStart)\n\n  const selectionStart = props.selectionStart\n  const onSelectionChanged = props.onSelectionChanged\n\n  const classes = useStyles()\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      const end = [e.clientX, e.clientY]\n      setSelectionEnd(end)\n      onSelectionChanged(\n        [\n          Math.min(selectionStart[0], end[0]),\n          Math.min(selectionStart[1], end[1])\n        ],\n        [\n          Math.max(selectionStart[0], end[0]),\n          Math.max(selectionStart[1], end[1])\n        ])\n    }\n\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [selectionStart, onSelectionChanged])\n\n  const hasMoved = (\n    selectionEnd[0] !== props.selectionStart[0] &&\n    selectionEnd[1] !== props.selectionStart[1])\n\n  /*\n   * The selection box should only be visible after the user moves their mouse.\n   */\n  return hasMoved && (\n    <div\n      className={classes.selectionBox} style={{\n        left: Math.min(props.selectionStart[0], selectionEnd[0]),\n        top: Math.min(props.selectionStart[1], selectionEnd[1]),\n        width: Math.abs(selectionEnd[0] - props.selectionStart[0]),\n        height: Math.abs(selectionEnd[1] - props.selectionStart[1])\n      }}\n    />\n  )\n}\n\nexport default SelectionBox\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport logic from './logic'\n\nimport Wire from './Wire'\nimport Circuit from './Circuit'\nimport SelectionBox from './SelectionBox'\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    width: '8.5in',\n    height: '11in',\n    background: 'white',\n    position: 'relative',\n    margin: 'auto',\n    boxShadow: '0 0 .05in #aaa',\n    marginBottom: '0.1in'\n  }\n}))\n\n/*\n * A react component for the wire currently being dragged by the user.\n */\nfunction PreviewWire (props) {\n  const [end, setEnd] = useState([props.x0, props.y0])\n\n  const clientToPage = props.clientToPage\n\n  useEffect(() => {\n    const onMouseMove = (e) => {\n      setEnd(clientToPage([e.clientX, e.clientY]))\n    }\n    document.addEventListener('mousemove', onMouseMove)\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [clientToPage])\n\n  if (props.isOutputPin) {\n    return (\n      <Wire x0={props.x0} y0={props.y0} x1={end[0]} y1={end[1]} />\n    )\n  } else {\n    return (\n      <Wire x1={props.x0} y1={props.y0} x0={end[0]} y0={end[1]} />\n    )\n  }\n}\n\nconst Page = React.forwardRef((props, ref) => {\n  const selection = props.selection\n  const theme = props.theme\n\n  const simState = props.simState\n\n  const isEditable = props.editable\n  const circuit = props.circuit\n\n  const onCircuitChanged = props.onCircuitChanged\n\n  const onSelectionChanged = props.onSelectionChanged\n  const onUserInputChanged = props.onUserInputChanged\n\n  const classes = useStyles()\n\n  const [selectionStart, setSelectionStart] = useState(null)\n\n  /* Object containing IDs of gates currently being selected. */\n  const [toBeAddedToSelection, setToBeAddedToSelection] = useState({})\n\n  /* Whether or not the selected items are being dragged. */\n  const [isDragging, setIsDragging] = useState(false)\n\n  /*\n   * Whether or not the selected items were dragged (to prevent the click event\n   * from being fired after a drag.\n   */\n  const [didDrag, setDidDrag] = useState(false)\n\n  /* The start and end positions of the drag in client coordinates. */\n  const [moveStart, setMoveStart] = useState([0, 0])\n  const [moveEnd, setMoveEnd] = useState([0, 0])\n\n  const [wireStartPin, setWireStartPin] = useState(null)\n\n  /* Whether or not the pin being dragged from is an output pin. */\n  const [wireStartPinIsOutput, setWireStartPinIsOutput] = useState(false)\n\n  /* The amount to move teh selected components in page coordinates. */\n  const moveAmount = isDragging\n    ? [\n      (moveEnd[0] - moveStart[0]) / 96,\n      (moveEnd[1] - moveStart[1]) / 96\n    ]\n    : [0, 0]\n\n  /*\n   * Function to convert from client coordianates to coordinates on the page.\n   */\n  const clientToPage = (coord) => {\n    const bounds = ref.current.getBoundingClientRect()\n    return [\n      (coord[0] - bounds.left) / 96,\n      (coord[1] - bounds.top) / 96\n    ]\n  }\n\n  /* Called when the bounds of the selection box changes. */\n  const onSelectionBoxChanged = (ul, br) => {\n    /* Calculate the selection on the page. */\n\n    const a = clientToPage(ul)\n    const b = clientToPage(br)\n\n    let clone = null\n\n    /* Determine if any items were added to the selection. */\n    circuit.gates.forEach((gate) => {\n      const width = props.theme.getWidth(gate)\n      const height = props.theme.getHeight(gate)\n\n      const isOverlapping = (\n        gate.x >= a[0] && gate.y >= a[1] &&\n        gate.x + width <= b[0] && gate.y + height <= b[1])\n\n      if (isOverlapping && !toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        clone[gate.id] = true\n      } else if (!isOverlapping && toBeAddedToSelection[gate.id]) {\n        if (!clone) {\n          clone = Object.assign({}, toBeAddedToSelection)\n        }\n        delete clone[gate.id]\n      }\n    })\n\n    if (clone) {\n      setToBeAddedToSelection(clone)\n    }\n  }\n\n  const onGateClick = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      if (!didDrag) {\n        const newSelection = {}\n        if (e.shiftKey) {\n          Object.assign(newSelection, selection)\n        }\n        newSelection[gate.id] = !newSelection[gate.id]\n        onSelectionChanged(newSelection)\n        e.stopPropagation()\n      }\n    } else if (simState != null) {\n      if (gate.type === 'switch') {\n        onUserInputChanged(gate, !logic.getUserInput(gate, simState))\n      }\n    }\n  }, [\n    selection,\n    isEditable,\n    didDrag,\n    onSelectionChanged,\n    onUserInputChanged,\n    simState\n  ])\n\n  const onGateMouseDown = useCallback((e, gate) => {\n    if (isEditable && e.button === 0) {\n      setMoveStart([e.clientX, e.clientY])\n      setMoveEnd([e.clientX, e.clientY])\n      setDidDrag(false)\n      if (selection[gate.id]) {\n        setIsDragging(true)\n      }\n      e.stopPropagation()\n    }\n    e.preventDefault()\n  }, [isEditable, selection, setMoveStart, setMoveEnd, setDidDrag])\n\n  const onMove = useCallback((moveAmount) => {\n    const clone = { ...circuit }\n    clone.gates = clone.gates.map((gate) => {\n      if (selection[gate.id]) {\n        /* Copy the gate. */\n        gate = { ...gate }\n        gate.x += moveAmount[0]\n        gate.y += moveAmount[1]\n      }\n      return gate\n    })\n    onCircuitChanged(clone)\n  }, [circuit, selection, onCircuitChanged])\n\n  const addWire = useCallback((from, to) => {\n    const clone = { ...circuit }\n\n    /*\n     * Function that takes in a pin, clones it and adds a connection if it is\n     * the from or to pin. Returns the pin otherwise.\n     */\n    const updatePin = (pin, isOutputPin) => {\n      if (isOutputPin || pin.connections.length === 0) {\n        if (pin.id === from) {\n          return { ...pin, connections: [...pin.connections, to] }\n        } else if (pin.id === to) {\n          return { ...pin, connections: [...pin.connections, from] }\n        }\n      }\n      return pin\n    }\n\n    /* Only update if the input pin has no connections. */\n    let shouldUpdate = false\n\n    clone.gates = clone.gates.map((gate) => {\n      let hasPin = false\n      const inputs = gate.inputs.map((pin) => {\n        const r = updatePin(pin)\n        if (r !== pin) {\n          hasPin = true\n        }\n        return r\n      })\n\n      /* If the gate has the pin, clone the gate. */\n      if (hasPin) {\n        shouldUpdate = true\n        return { ...gate, inputs }\n      } else {\n        return gate\n      }\n    })\n\n    if (shouldUpdate) {\n      /* Update output pin. */\n      clone.gates = clone.gates.map((gate) => {\n        let hasPin = false\n        const outputs = gate.outputs.map((pin) => {\n          const r = updatePin(pin, true)\n          if (r !== pin) {\n            hasPin = true\n          }\n          return r\n        })\n\n        /* If the gate has the pin, clone it. */\n        if (hasPin) {\n          return { ...gate, outputs }\n        } else {\n          return gate\n        }\n      })\n\n      onCircuitChanged(clone)\n    }\n  }, [circuit, onCircuitChanged])\n\n  const onPinMouseDown = useCallback((e, pin, isOutputPin) => {\n    if (isEditable && e.button === 0) {\n      /* If the pin is an output pin, start dragging a wire from it. */\n      if (isOutputPin) {\n        setWireStartPin(pin.id)\n        setWireStartPinIsOutput(isOutputPin)\n      } else {\n        /*\n         * If the pin is an input pin and already has a connection, remove the\n         * connection and start dragging from the connected pin.\n         */\n        if (pin.connections.length > 0) {\n          const clone = { ...circuit }\n          clone.gates = clone.gates.map((gate) => {\n            const inIndex = gate.inputs.indexOf(pin)\n            const outIndex = gate.outputs.findIndex(\n              (output) => output.id === pin.connections[0])\n\n            if (inIndex !== -1) {\n              const gateClone = {\n                ...gate,\n                inputs: [...gate.inputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.inputs[inIndex] = { ...pin, connections: [] }\n\n              return gateClone\n            } else if (outIndex !== -1) {\n              const output = gate.outputs[outIndex]\n              const gateClone = {\n                ...gate,\n                outputs: [...gate.outputs]\n              }\n\n              /* Remove the connection. */\n              gateClone.outputs[outIndex] = {\n                ...output,\n                connections: output.connections.filter((id) => id !== pin.id)\n              }\n\n              return gateClone\n            } else {\n              return gate\n            }\n          })\n\n          /* Update the circuit */\n          onCircuitChanged(clone)\n\n          setWireStartPin(pin.connections[0])\n          setWireStartPinIsOutput(true)\n        } else {\n          setWireStartPin(pin.id)\n          setWireStartPinIsOutput(isOutputPin)\n        }\n      }\n    }\n    e.stopPropagation()\n    e.preventDefault()\n  }, [\n    circuit,\n    isEditable,\n    setWireStartPin,\n    setWireStartPinIsOutput,\n    onCircuitChanged\n  ])\n\n  const onPinMouseUp = useCallback((e, pin, isOutputPin) => {\n    if (isEditable) {\n      /*\n       * Add a wire if the wire start pin is different from the wire\n       * end pin, and both of the pins are not output pins\n       */\n      if (wireStartPin !== null &&\n          wireStartPin !== pin.id &&\n          isOutputPin ^ wireStartPinIsOutput) {\n        addWire(wireStartPin, pin.id)\n        e.stopPropagation()\n        e.preventDefault()\n      }\n      setWireStartPin(null)\n    }\n  }, [isEditable, wireStartPin, wireStartPinIsOutput, addWire])\n\n  /*\n   * The total selection, including elements currently being selected as well as\n   * the previously selected elements.\n   */\n  const totalSelection = { ...props.selection, ...toBeAddedToSelection }\n\n  /* An object that maps each pin to its position. */\n  const pinPositions = useMemo(() => {\n    const positions = {}\n\n    /* Calculate the pin positions. */\n    circuit.gates.forEach((gate) => {\n      const x = (gate.x || 0) + (selection[gate.id] ? moveAmount[0] : 0)\n      const y = (gate.y || 0) + (selection[gate.id] ? moveAmount[1] : 0)\n\n      Object.assign(positions, theme.getPinPositions(gate, x, y))\n    })\n\n    return positions\n  }, [selection, theme, moveAmount, circuit])\n\n  /*\n   * Add a mouseup event listener to the window. We need to do this in case the\n   * user drags outside the window.\n   */\n  useEffect(() => {\n    const onMouseUp = (e) => {\n      if (!isEditable) {\n        e.preventDefault()\n      } else if (e.button === 0) {\n        if (isDragging) {\n          onMove(moveAmount)\n          setIsDragging(false)\n          e.stopPropagation()\n        } else if (selectionStart) {\n          setToBeAddedToSelection({})\n          onSelectionChanged(totalSelection)\n        }\n        setSelectionStart(null)\n\n        if (wireStartPin !== null) {\n          setWireStartPin(null)\n        }\n        e.preventDefault()\n      }\n    }\n\n    window.addEventListener('mouseup', onMouseUp)\n    return () => window.removeEventListener('mouseup', onMouseUp)\n  })\n\n  useEffect(() => {\n    if (isEditable) {\n      const onMouseMove = (e) => {\n        if (isDragging) {\n          setMoveEnd([\n            e.clientX,\n            e.clientY\n          ])\n        }\n\n        if (!didDrag) {\n          setDidDrag(true)\n        }\n      }\n      window.addEventListener('mousemove', onMouseMove)\n      return () => window.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [isDragging, didDrag, isEditable])\n\n  return (\n    <div\n      className={classes.page} ref={ref}\n      onMouseDown={(e) => {\n        if (isEditable && e.button === 0) {\n          setSelectionStart([e.clientX, e.clientY])\n\n          /* Reset the selection if the user did not click shift. */\n          if (!e.shiftKey) {\n            onSelectionChanged({})\n          }\n        }\n\n        e.preventDefault()\n      }}\n    >\n      {\n        isEditable && wireStartPin !== null && (\n          <PreviewWire\n            x0={pinPositions[wireStartPin].x}\n            y0={pinPositions[wireStartPin].y}\n            clientToPage={clientToPage}\n            isOutputPin={wireStartPinIsOutput}\n          />\n        )\n      }\n      <Circuit\n        circuit={circuit}\n        editable={isEditable}\n        selection={totalSelection}\n        theme={theme}\n        moveAmount={moveAmount}\n        onPinMouseDown={onPinMouseDown}\n        onPinMouseUp={onPinMouseUp}\n        onGateClick={onGateClick}\n        onGateMouseDown={onGateMouseDown}\n        simState={simState}\n      />\n      {\n        isEditable && selectionStart && (\n          <SelectionBox\n            selectionStart={selectionStart}\n            onSelectionChanged={onSelectionBoxChanged}\n          />\n        )\n      }\n    </div>\n  )\n})\n\nexport default Page\n","import React from 'react'\n\nimport Tooltip from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\n\nimport PinInvertedSvg from './assets/pin-inverted.svg'\n\nimport Wire from './Wire'\n\nimport logic from './logic'\n\nfunction PaletteItem (props) {\n  return (\n    <Grid item xs={3}>\n      <Tooltip title={`Add ${props.text}`}>\n        <Button onClick={props.onClick}>\n          <div\n            style={{\n              position: 'relative',\n              width: '0.5in',\n              height: '0.5in',\n              overflow: 'hidden'\n            }}\n          >\n            {\n              props.inverted && (\n                <Wire\n                  x0={0.25}\n                  y0={0.25}\n                  x1={0.5 - 0.0625}\n                  y1={0.25}\n                />\n              )\n            }\n\n            {\n              props.inverted && (\n                <img\n                  src={PinInvertedSvg}\n                  alt=''\n                  style={{\n                    position: 'absolute',\n                    left: `${0.5 - 0.125}in`,\n                    top: `${0.25 - 0.0625}in`\n                  }}\n                />\n              )\n            }\n\n            <img\n              src={props.svg}\n              alt=''\n              style={{\n                position: 'absolute',\n                left: props.inverted ? '-0.0625in' : 0,\n                top: 0\n              }}\n            />\n          </div>\n        </Button>\n      </Tooltip>\n    </Grid>\n  )\n}\n\n/**\n * A palette for placing components.\n * Props:\n *     - onSelect(factory)\n *           A callback called when the user selects an item. The factory\n *           parameter is a function that constructs a new logic gate.\n */\nfunction Palette (props) {\n  const invert = (gate) => {\n    gate.outputs[0].isInverted = true\n    return gate\n  }\n  return (\n    <Grid container className={props.className}>\n      <PaletteItem\n        svg={AndGateSvg}\n        text='AND gate'\n        onClick={() => props.onSelect(logic.andGate)}\n      />\n      <PaletteItem\n        svg={AndGateSvg}\n        text='NAND gate'\n        onClick={() => props.onSelect(() => invert(logic.andGate()))}\n        inverted\n      />\n      <PaletteItem\n        svg={OrGateSvg}\n        text='OR gate'\n        onClick={() => props.onSelect(logic.orGate)}\n      />\n      <PaletteItem\n        svg={OrGateSvg}\n        text='NOR gate'\n        onClick={() => props.onSelect(() => invert(logic.orGate()))}\n        inverted\n      />\n      <PaletteItem\n        svg={ZeroGateSvg}\n        text='ground'\n        onClick={() => props.onSelect(() => logic.constantGate(false))}\n      />\n      <PaletteItem\n        svg={OneGateSvg}\n        text='+1'\n        onClick={() => props.onSelect(() => logic.constantGate(true))}\n      />\n      <PaletteItem\n        svg={BufferGateSvg}\n        text='buffer'\n        onClick={() => props.onSelect(() => logic.buffer())}\n      />\n      <PaletteItem\n        svg={BufferGateSvg}\n        text='inverter'\n        onClick={() => props.onSelect(() => invert(logic.buffer()))}\n        inverted\n      />\n      <PaletteItem\n        svg={LedSvg}\n        text='LED'\n        onClick={() => props.onSelect(() => logic.led())}\n      />\n      <PaletteItem\n        svg={SwitchOffSvg}\n        text='switch'\n        onClick={() => props.onSelect(logic.switchGate)}\n      />\n    </Grid>\n  )\n}\n\nexport default Palette\n","/*\n * Themes are responsible for determining the images to use for each logic gate,\n * as well as the position of the pins.\n */\n\nimport logic from './logic'\n\n/* SVGs */\nimport AndGateSvg from './assets/and-gate.svg'\nimport OrGateSvg from './assets/or-gate.svg'\nimport OpenPinSvg from './assets/open-pin.svg'\nimport OpenPinInvertedSvg from './assets/open-pin-inverted.svg'\nimport PinSvg from './assets/pin.svg'\nimport PinInvertedSvg from './assets/pin-inverted.svg'\nimport BufferGateSvg from './assets/buffer-gate.svg'\nimport OneGateSvg from './assets/one-gate.svg'\nimport ZeroGateSvg from './assets/zero-gate.svg'\nimport LedSvg from './assets/led.svg'\nimport LedGlowSvg from './assets/led-glow.svg'\nimport SwitchOffSvg from './assets/switch-off.svg'\nimport SwitchOnSvg from './assets/switch-on.svg'\n\nconst defaultThemeSvgs = {\n  and: () => AndGateSvg,\n  or: () => OrGateSvg,\n  buffer: () => BufferGateSvg,\n  led: (gate, state) =>\n    state\n      ? (logic.getInputs(gate, state)[0] ? LedGlowSvg : LedSvg)\n      : LedSvg,\n  constant: (gate) => gate.value ? OneGateSvg : ZeroGateSvg,\n  switch: (gate, state) =>\n    state\n      ? (logic.getUserInput(gate, state) ? SwitchOnSvg : SwitchOffSvg)\n      : SwitchOffSvg\n}\n\nconst defaultTheme = {\n  /* Returns an SVG for the given pin. */\n  getPinSvg: (pin) => (\n    pin.connections.length === 0\n      ? (pin.isInverted\n        ? OpenPinInvertedSvg\n        : OpenPinSvg)\n      : (pin.isInverted\n        ? PinInvertedSvg\n        : PinSvg)),\n\n  /* Returns an SVG for the given gate. */\n  getGateSvg (gate, state) {\n    return defaultThemeSvgs[gate.type](gate, state)\n  },\n\n  /* Returns an object mapping a pin ID to a pin position. */\n  getPinPositions (gate, x, y, state) {\n    /* Maps a pin ID to a position */\n    const ret = {}\n\n    gate.inputs.forEach((pin, index) => {\n      ret[pin.id] = {\n        x: x,\n        y: y + 0.25 + (index - (gate.inputs.length - 1) / 2) * 0.2\n      }\n    })\n\n    gate.outputs.forEach((pin, index) => {\n      ret[pin.id] = {\n        x: x + 0.5,\n        y: y + 0.25\n      }\n    })\n\n    return ret\n  },\n\n  getWidth (gate, state) {\n    return 0.5\n  },\n\n  getHeight (gate, state) {\n    return 0.5\n  }\n}\n\nexport {\n  defaultTheme\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport packageJson from '../package.json'\n\n/* Material UI components. */\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Container from '@material-ui/core/Container'\nimport Drawer from '@material-ui/core/Drawer'\nimport Typography from '@material-ui/core/Typography'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\n/* Icons. */\nimport StopIcon from '@material-ui/icons/Stop'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport RedoIcon from '@material-ui/icons/Redo'\nimport UndoIcon from '@material-ui/icons/Undo'\nimport HelpIcon from '@material-ui/icons/Help'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\n/* Page components. */\nimport Page from './Page'\nimport Palette from './Palette'\n\n/* Logic components. */\nimport logic from './logic'\nimport { defaultTheme } from './themes'\n\nimport { upload, download } from './utils'\n\nimport { useUndoable } from './hooks'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport SimWorker from 'workerize-loader!./sim.worker'\n\nconst drawerWidth = 256\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  menuButtonGroup: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerContent: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\nfunction App () {\n  const [circuit, setCircuit, undo, redo] = useUndoable(() => logic.circuit([]))\n  const [selection, setSelection] = useState(false)\n  const [simState, setSimState] = useState(null)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [copiedGates, setCopiedGates] = useState(null)\n  const [contextMenuPos, setContextMenuPos] = useState(null)\n\n  const simWorker = useRef(new SimWorker())\n\n  /* For opening and closing the upload error snackbar. */\n  const [openUploadError, setOpenUploadError] = useState(false)\n\n  /* Refs used for calculating the center of the page. */\n  const appBarRef = React.createRef()\n  const pageRef = React.createRef()\n\n  const classes = useStyles()\n\n  const closeContextMenu = () => setContextMenuPos(null)\n\n  const selectAll = () => {\n    setSelection(\n      Object.fromEntries(circuit.gates.map((gate) => [gate.id, true]))\n    )\n    closeContextMenu()\n  }\n\n  const copy = () => {\n    /* Copy the selection. */\n    setCopiedGates(\n      logic.removeInvalidConnections(\n        circuit.gates.filter((gate) => selection[gate.id])\n      )\n    )\n    closeContextMenu()\n  }\n\n  const paste = () => {\n    /* Renumber the circuit so we have no ID collisions. */\n    const clone = logic.renumber(circuit)\n    /* Append the copied gates to the circuit. */\n    clone.gates = clone.gates.concat(copiedGates)\n    setCircuit(clone)\n    closeContextMenu()\n  }\n\n  const onPlayButtonClicked = () => {\n    if (!isPlaying) {\n      simWorker.current.startSimulation(circuit)\n      setIsPlaying(true)\n    } else {\n      simWorker.current.stopSimulation()\n      setIsPlaying(false)\n    }\n  }\n\n  useEffect(() => {\n    let shouldLoop = isPlaying\n\n    const loop = (state) => {\n      if (shouldLoop) {\n        setSimState(state)\n        simWorker.current.getState().then(loop)\n      } else {\n        setSimState(null)\n      }\n    }\n    loop(null)\n\n    return () => { shouldLoop = false }\n  }, [isPlaying])\n\n  const deleteSelection = () => {\n    const clone = { ...circuit }\n\n    /* Remove the selected gates. */\n    clone.gates = clone.gates.filter((gate) => !selection[gate.id])\n    clone.gates = logic.removeInvalidConnections(clone.gates)\n    setCircuit(clone)\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n\n      <Drawer variant='persistent' className={classes.drawer} open>\n        <Toolbar />\n        <Palette\n          className={classes.drawerContent}\n          onSelect={(factory) => {\n            /* Clone the circuit. */\n            const clone = { ...circuit }\n            clone.gates = [...clone.gates]\n\n            /* Place the gate. */\n            const gate = factory()\n            clone.gates.push(gate)\n\n            /* Calculate the gate position. */\n            const appBarRect = appBarRef.current.getBoundingClientRect()\n            const pageRect = pageRef.current.getBoundingClientRect()\n\n            gate.x = ((appBarRect.width + drawerWidth) / 2 - pageRect.left) / 96\n            gate.y = (\n              (window.innerHeight + appBarRect.height) / 2 - pageRect.top) / 96\n\n            /* Update with the new circuit. */\n            setCircuit(clone)\n          }}\n        />\n      </Drawer>\n\n      <AppBar position='fixed' className={classes.appBar} ref={appBarRef}>\n        <Toolbar>\n\n          <Typography variant='h6' className={classes.title}>MML2</Typography>\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Upload project'>\n              <Button\n                aria-label='upload'\n                onClick={\n                  () => upload()\n                    .then((data) => {\n                      setCircuit(logic.renumber(data.circuit))\n                    })\n                    .catch((error) => {\n                      setOpenUploadError(true)\n                      console.error(error)\n                    })\n                }\n              >\n                <CloudUploadIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Download project'>\n              <Button\n                aria-label='download'\n                onClick={() => {\n                  download('circuit.json', {\n                    version: packageJson.version,\n                    circuit\n                  })\n                }}\n              >\n                <CloudDownloadIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <ButtonGroup\n            className={classes.menuButtonGroup}\n            color='inherit'\n          >\n            <Tooltip title='Undo'>\n              <Button aria-label='undo' onClick={undo}>\n                <UndoIcon />\n              </Button>\n            </Tooltip>\n            <Tooltip title='Redo'>\n              <Button aria-label='redo' onClick={redo}>\n                <RedoIcon />\n              </Button>\n            </Tooltip>\n          </ButtonGroup>\n\n          <Tooltip title={isPlaying ? 'Stop simulation' : 'Start simulation'}>\n            <Button\n              aria-label={isPlaying ? 'stop' : 'start'}\n              onClick={onPlayButtonClicked}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              {\n                isPlaying ? <StopIcon /> : <PlayIcon />\n              }\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Delete selection'>\n            <Button\n              aria-label='delete'\n              onClick={deleteSelection}\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <DeleteIcon />\n            </Button>\n          </Tooltip>\n\n          <Tooltip title='Help'>\n            <Button\n              aria-label='help'\n              className={classes.menuButton}\n              color='inherit'\n            >\n              <HelpIcon />\n            </Button>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n\n      <Toolbar />\n      <main className={classes.content}>\n        <Toolbar />\n        <Container\n          onContextMenu={(event) => {\n            event.preventDefault()\n            setContextMenuPos([event.clientX - 2, event.clientY - 4])\n          }}\n        >\n          <Page\n            circuit={circuit}\n            theme={defaultTheme}\n            ref={pageRef}\n            selection={selection}\n            simState={simState}\n            onSelectionChanged={(selection) => {\n              setSelection(selection)\n            }}\n            onCircuitChanged={(circuit) => {\n              setCircuit(circuit)\n            }}\n            onUserInputChanged={(gate, value) => {\n              simWorker.current.setUserInput(gate, value)\n            }}\n            editable={!simState}\n          />\n        </Container>\n      </main>\n      <Snackbar\n        open={openUploadError}\n        autoHideDuration={10000}\n        onClose={() => { setOpenUploadError(false) }}\n        message=\"Uh oh! We weren't able to load that file.\"\n      />\n      <Menu\n        keepMounted\n        open={contextMenuPos !== null}\n        onClose={closeContextMenu}\n        anchorReference='anchorPosition'\n        anchorPosition={\n          contextMenuPos && { left: contextMenuPos[0], top: contextMenuPos[1] }\n        }\n      >\n        <MenuItem onClick={copy}>Copy</MenuItem>\n        <MenuItem onClick={paste}>Paste</MenuItem>\n        <MenuItem onClick={selectAll}>Select all</MenuItem>\n      </Menu>\n    </div>\n  )\n}\n\nexport default App\n","/*\n * Utility functions\n */\n\n/*\n * Converts the given data to JSON, and prompts the user to save the file as the\n * given filename.\n */\nexport const download = (filename, data) => {\n  var element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    `data:text/plain;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`)\n  element.setAttribute('download', filename)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\n/*\n * Prompts the user to upload a file. Returns a promise that resolves to the\n * parsed JSON.\n */\nexport const upload = () => {\n  return new Promise((resolve, reject) => {\n    var element = document.createElement('input')\n    element.setAttribute('type', 'file')\n\n    element.style.display = 'none'\n    document.body.appendChild(element)\n\n    element.addEventListener(\n      'change',\n      function () {\n        this.files[0].text()\n          .then(JSON.parse)\n          .then((data) => resolve(data))\n          .catch((error) => reject(error))\n      },\n      false)\n\n    element.click()\n\n    document.body.removeChild(element)\n  })\n}\n","/* eslint-env serviceworker */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap' />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}